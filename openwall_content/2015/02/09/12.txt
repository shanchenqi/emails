  oss-security - CVE request: sudo TZ issue            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 09 Feb From: "Todd C. Miller" <Todd.Miller@...rtesan.com> To: oss-security@...ts.openwall.com Subject: CVE request: sudo TZ issue  I'm going to be releasing sudo shortly which includes sanity checks for the TZ environment variable.  This issue was previously discussed here:      There is an associated Debian bug:      >From http://www.sudo.ws/alerts/tz.html  Summary:  Prior to sudo the TZ environment variable was passed through unchecked.  Most libc tzset() implementations support passing an absolute pathname in the time zone to point to an arbitrary, user-controlled file.  This may be used to exploit bugs in the C library's TZ parser or open files the user would not otherwise have access to.  Arbitrary file access via TZ could also be used in a denial of service attack by reading from a file or fifo that will block.  Beginning with sudo TZ is only passed through by default if it is considered "safe".  The TZ variable is now considered "unsafe" if any of the following are true:      o   It consists of a fully-qualified path name that         does not match the location of the zoneinfo directory.      o   It contains a ".." path element.      o   It contains white space or non-printable characters.      o   It is longer than the value of PATH_MAX.  Sudo versions affected:  Sudo versions prior to are affected.  Details:  Unix systems support a user-specified time zone value stored in the TZ environment variable.  On many systems, the value of TZ is ignored for set user ID processes (such as sudo) if it does not pass certain sanity checks.  However, while the value may be ignored, it is not actually removed from the environment.  As such, a program run via sudo will inherit the (possibly malicious) value of TZ.  A user with sudo access may take advantage of this to exploit bugs in the C library functions which parse the TZ environment variable. The TZ handling in most C libraries (including GNU libc and the tzcode used by BSD and others) supports reading arbitrary files.  By setting TZ to a fully-qualified path name, a command run via sudo may be used to read (but not disclose the contents of) files that the user would not otherwise be able to open.  This is generally benign for regular files, but it may be possible to change the behavior of the system by reading from device special files.  For instance, it may be possible to hijack the output from a terminal device file, consume kernel log messages or cause a tape drive to change position.  It may also be possible to cause a command run by sudo to hang if TZ is set to the value of a named pipe or a device special file that blocks on read.  Impact:  A user with sudo access may be able to exploit parsing bugs in the time zone parsing functions of the system's C library functions. The user may also be able to read arbitrary files, potentially causing changes in system behavior when reading certain device special files or simply causing the program run via sudo to block.  Fix:  The bug is fixed in sudo  Credit:  Jakub Wilk began a discussion about abusing the TZ environment variable on the oss-security mailing list.  Stephane Chazelas also reported the problem and supplied some concrete examples of how it could be abused.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      