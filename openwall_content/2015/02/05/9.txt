  oss-security - Re: Linux kernel: multiple vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 5 Feb From: Shawn <citypw@...il.com> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel: multiple vulnerabilities  Great analysis. Just for the record, there was a POC released for a while:  On Tue, Feb 3, at PM, Solar Designer <solar@...nwall.com> wrote: > On Mon, Dec 15, at Andy Lutomirski wrote: >> local privilege escalation, all kernel versions > > Here's Rafal Wojtczuk's writeup on exploiting it: > > > > It's been a while since Andy posted this, so I'll quote the rest of his > message for context: > >> Any kernel that is not patched against is vulnerable to >> privilege escalation due to incorrect handling of a #SS fault caused >> by an IRET instruction.  In particular, if IRET executes on a >> writeable kernel stack (this was always the case before and is >> sometimes the case on and newer), the assembly function >> general_protection will execute with the user's gsbase and the >> kernel's gsbase swapped. >> >> This is likely to be easy to exploit for privilege escalation, except >> on systems with SMAP or UDEREF.  On those systems, assuming that the >> mitigation works correctly, the impact of this bug may be limited to >> massive memory corruption and an eventual crash or reboot. >> >> As with this is fixed by: >> >> >> >> The related fix to remove bad_iret is also an effective mitigation to >> prevent a bug like this from being reintroduced: >> >> >> >> Partial credit for this bug goes to Borislav Petkov, who asked pointed >> questions about causing me to realize that there were >> two separate bugs in #SS handling.  The first bug >> caused a fatal double fault, masking the second bug that caused the >> gsbase issue. >> >> ---------- >> >> The next two bugs are related to espfix.  The IRET instruction has IMO >> a blatant design flaw: IRET to a 16-bit user stack segment will leak >> bits of the kernel stack pointer.  This flaw exists on 32-bit >> and 64-bit systems.  32-bit Linux kernels have mitigated this leak for >> a long time, and 64-bit Linux kernels have mitigated this leak since >>  The mitigation is called espfix. >> >> espfix bypass using set_thread_area >> >> On all kernels, a valid 16-bit stack segment can be created using >> set_thread_area.  Arranging to return to such a stack segment will >> bypass espfix, leaking bits of the kernel stack pointer.  Fixed >> by: >> >> >> >> espfix was broken on 32-bit KVM paravirt guests >> >> espfix was completely broken on 32-bit Linux KVM guests with >> CONFIG_KVM_GUEST=y.  Fixed by: >> >> >> >> This commit hasn't made it to Linus' tree yet. >> >> ---------- >> >> (previously announced), >> and can be tested by sigreturn_32, available here: >> >> >> >> Save your data before running this on a production system.  If you a >> vulnerable to or the test will crash your >> system.  The espfix issues will cause warnings and failures that >> mention register mismatches. >> >> -- >> Andy Lutomirski >> AMA Capital Management, LLC    --  GNU powered it... GPL protect it... God blessing it...  regards Shawn  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      