  oss-security - CVE-Request -- phpBugTracker v. -- Multiple SQLi,  stored/reflecting XSS- and CSRF-vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sat, 21 Feb From: Steffen Rรถsemann To: oss-security@...ts.openwall.com Subject: CVE-Request -- phpBugTracker v. -- Multiple SQLi,  stored/reflecting XSS- and CSRF-vulnerabilities  Hi Steve, Josh, vendors, list.  I found multiple SQLI-, stored/reflecting XSS- and CSRF-vulnerabilities in Issuetracker phpBugTracker v.  The following files used in a common phpBugTracker installation suffer from different SQLi-, stored/reflected XSS- and CSRF-vulnerabilities:  =========== project.php ===========  SQL injection / underlaying CSRF vulnerability  in project.php via id parameter:  http://  Stored XSS via input field "project name":  http://{TARGET}/admin/project.php?op=add  executed in: e.g. http://{TARGET}/admin/project.php, http:// {TARGET}/index.php   ======== user.php ========  Reflecting XSS in user.php via use_js parameter:  http://  executed in: same page   ========= group.php =========  Reflecting XSS in group.php via use_js parameter:  http://  executed in: same page  (Blind) SQL Injection / underlaying CSRF vulnerability  in group.php via group_id parameter (used in different operations):  http:// http://   ========== status.php ==========  SQL injection / underlaying CSRF vulnerability  in status.php via status_id parameter:  http://  Stored XSS via input field "Description":  http://{TARGET}/admin/status.php?op=edit&use_js=1&status_id=0  executed in: e.g. http://{TARGET}/admin/status.php  CSRF vulnerability in status.php (delete statuses):  <img src="http://{TARGET}/admin/status.php?op=del&status_id={NUMERIC_STATUS_ID}" >   ============== resolution.php ==============  SQL injection / underlaying CSRF vulnerability  in resolution.php via resolution_id parameter:  http://  CSRF vulnerability in resolution.php (delete resolutions):  <img src="http://{TARGET}/admin/resolution.php?op=del&resolution_id={NUMERIC_RESOLUTION_ID}" >   ============ severity.php ============  SQL injection / underlaying CSRF vulnerability  in severity.php via severity_id parameter:  http://  CSRF vulnerability in severity.php (delete severities):  <img src="http://{TARGET}/admin/severity.php?op=del&severity_id={NUMERIC_SEVERITY_ID}" >  Stored XSS in severity.php via input field "Description":  http://{TARGET}/admin/severity.php?op=edit&use_js=1&severity_id=0  executed in: e.g. http://{TARGET}/admin/severity.php   ============ priority.php ============  SQL injection / underlaying CSRF vulnerability in priority.php via priority_id parameter:  http://   ====== os.php ======  SQL Injection / underlaying CSRF vulnerability in os.php via os_id parameter:  http://  CSRF vulnerability in os.php (delete operating systems):  <img src="http://{TARGET}/admin/os.php?op=del&os_id={NUMERIC_OS_ID}" >  Stored XSS vulnerability in os.php via input field "Regex":  http://{TARGET}/admin/os.php?op=edit&use_js=1&os_id=0  executed in: e.g. http://{TARGET}/admin/os.php?   ============ database.php ============  SQL injection / underlaying CSRF vulnerability in database.php via database_id:  http://  CSRF vulnerability in database.php (delete databases):  <img src="http://{TARGET}/admin/database.php?op=del&database_id={NUMERIC_DATABASE_ID}" >  Stored XSS vulnerability in database.php via input field "Name":  http://{TARGET}/admin/database.php?op=edit&use_js=1&database_id=0   ======== site.php ========  CSRF vulnerability in site.php (delete sites):  <img src="http://{TARGET}/admin/site.php?op=del&site_id={NUMERIC_SITE_ID}" >  SQL injection / underlaying CSRF vulnerability in site.php via site_id parameter:  http://  Can I have a CVE-ID/CVE-IDs for the issues, please?  Thank you very much!  Greetings from Germany.  Steffen Rรถsemann  References:  [1] https://github.com/a-v-k/phpBugTracker [2] [3] https://github.com/a-v-k/phpBugTracker/issues/4 [4] https://github.com/sroesemann/phpBugTracker [5]   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      