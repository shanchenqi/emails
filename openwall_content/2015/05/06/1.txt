  oss-security - Re: PHP and some == wonkiness            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 6 May From: Sliv TaMere <slivtamere@...il.com> To: oss-security@...ts.openwall.com Subject: Re: PHP and some == wonkiness  The == stuff is just one of the problems of PHP:  Grandma Eubanks <tborland1@...il.com>:  > > > > Your examples are seen often, and the md5 comparison example was exploited > in SMF as my public exploit shows in the above link. > > if (empty($_POST['code']) || substr($realCode, 0, 10) != > substr(md5($_POST['code']), 0, 10)) [4] >         { >                 // Stop brute force attacks like this. >                 validatePasswordFlood($_POST['u'], $flood_value, false); > [5] > > There's also other interesting oddities with their juggling system. I > provide several links to how you can see them, but one of my favorites is: > > if ($input < "30") { >         print("$input < 30\t"); >         print((int)$input); > } > > You can see how this is bypassed under the "Math is Crazy" section and then > think on how this can be extrapolated. > > On Tue, May 5, at AM, mancha <mancha1@...o.com> wrote: > > > On Tue, May 05, at mancha wrote: > > > On Tue, May 05, at Florian Weimer wrote: > > > > On AM, mancha wrote: > > > > > > > > > Taking sha1 as our reference hash and "==" as our equivalence > > > > > relation: > > > > > > > > > > All are in equivalence class A. > > > > > > > > > > All are in equivalence class B. > > > > > > > > > > Note: those regexes aren't representative of the full equivalence > > > > > classes because prepending 0s doesn't alter the value (i.e. > > > > > is in equivalence class "A" as well.. > > > > > > > > I cannot reproduce this.  Or you use âequivalence classâ in a > > > > non-standard way. > > > > > > > > -- Florian Weimer / Red Hat Product Security > > > > > > I was using "equivalence class" in a standard way but mis-understood > > > PHP's casting rules when comparing strings so never mind that comment. > > > > > > To raise the SNR back up, I agree with your assessment if we account > > > for prepended 0s. So out of the total hashes, I believe > > > of them will evaluate to float(0). A bit higher > > > than your estimate (which only considered of them). Same order > > > of magnitude though. > > > > > > --mancha > > > > That has a small off-by-one because 40 0s will be cast to float(0) when > > compared to those. > > > > Also, we have equivalence classes such as: > > > > > > > > ... > > > > > > > > > > --mancha > > >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      