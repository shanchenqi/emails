  oss-security - CVE Request + Advisory: PHP str_repeat() sign mismatch based memory  corruption            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 18 May From: Andrea Palazzo <andrea.palazzo@...el.it> To: cve-assign@...re.org CC: oss-security@...ts.openwall.com, security@....net Subject: CVE Request + Advisory: PHP str_repeat() sign mismatch based memory  corruption  Hi everyone, this is intended as CVE Request and advisory for   ## Info # #  Title: PHP str_repeat() sign mismatch based memory corruption #  Author: Andrea Palazzo #                  <andrea [dot] palazzo [at] truel [dot] it> #                    http://www.truel.it #  Product: PHP #                     <= / / #                     http://www.php.net #     Patch:  #  #  CVE:     Not assigned yet # ## Summary  str_repeat() suffers from a sign mismatch based integer overflow that  results in creation of corrupted ZVALs; this condition, depending on the  context, can be abused to bypass PHP-level checks or trigger any kind of  memory error: a successful exploitation of this issue is likely to  produce both local and remote code execution vectors.  ## Details  str_repeat() takes mult as second argument, which represents the number  of desired repetitions for the string passed as first argument. Once  retrieved, this value is multiplied by input_len and stored into result_len       /* Initialize the result string */    result_len = input_len * mult;  which then, on line is passed as argument for RETURN_STRINGL() macro. It should be noticed that while RETURN_STRINGL() ends up calling  ZVAL_STRINGL(), which expects the length argument to be a signed int,  result_len is defined as size_t, producing an implicit cast of the  actual value. In situations in which huge memory allocations are possible (most likely  64-bit systems), it is possible to take advantage of this situation  overflowing ZVAL_STRINGL's length into a negative value, in order to get  a corrupted string-typed ZVAL.  (gdb) r -r 'var_dump(str_repeat("a",  Breakpoint 1, php_var_dump level=level@...ry=1)      at 88    No such file or  directory. (gdb) p **struc $7 = {value = {lval = dval =  str = {        val = 'a' <repeats times>..., len = -1},      ht = obj = {handle =        handlers = 0x7fffffffffff}, ast = refcount__gc = 1,    type = 6 is_ref__gc = 0  ## Solution  Update to PHP / / http://php.net/downloads.php  ## Timeline  - Privately submitted through PHP Bug tracking system - Assigned - Patch issued  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      