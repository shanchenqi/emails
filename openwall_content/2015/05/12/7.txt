  oss-security - Two invalid read errors / heap overflows in SQLite (TFPA            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 12 May From: Hanno Bรถck <hanno@...eck.de> To: oss-security@...ts.openwall.com, cve-assign@...re.org,   fulldisclosure@...lists.org Subject: Two invalid read errors / heap overflows in SQLite (TFPA   While fuzzing SQLite I discovered two read heap overflow errors. One is in the database file parser, one in the sql command parser. Both issues are present in SQLite and are fixed in SQLite These bugs can be seen with either valgrind or address sanitizer.  Passing the command ".\" will cause a one byte heap overflow in the function resolve_backslashes().  Sample input file (test with sqlite3 < [inputfile])  Upstream commit / patch  Parsing a malformed database file will cause a heap overflow of several bytes in the function sqlite3VdbeExec(). This only matters if your attack scenario involves parsing untrusted database files.  Sample input file (test with sqlite3 [inputfile] .dump)  Upstream commit / patch  Please also note: Finding bugs in SQLite, the easy way - Michal Zalewski fuzzed SQLite with a dictionary - most of these were already fixed in the version I was testing.  https://www.sqlite.org/testing.html#aflfuzz SQL Fuzz Using The American Fuzzy Lop Fuzzer - SQLite developers themselve now use regular fuzz testing to find further bugs.  SQLite release notes mention fixes for "many obscure problems discovered while SQL fuzzing", so there are likely more fixes than the two I mentioned above.  --  Hanno Bรถck http://hboeck.de/  mail/jabber: hanno@...eck.de GPG:  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      