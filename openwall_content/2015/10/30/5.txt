  oss-security - Re: CVE Request: Openpgp.js Critical vulnerability in S2K            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 30 Oct (EDT) From: cve-assign@...re.org To: g.hollestelle@...il.com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE Request: Openpgp.js Critical vulnerability in S2K  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > A vulnerability in the S2K function of OpenPGP.js allows to produce a > predictable session key without knowing the passphrase. >  > An attacker is able to create a private PGP key that will decrypt in > OpenPGP.js regardless of the passphrase given. >  > Also using this flaw it is possible to forge a symmetrically encrypted PGP > message (Symmetric-Key Encrypted Session Key Packets (Tag 3)) that > will decrypt with any passphrase in OpenPGP.js. This can be an attack > vector if successful decryption of such a message is used as an > authentication mechanism. >  > The bug is fixed with a strict check on unknown S2K types. >  > >  Nobody has commented on this, so we'll conclude that "successful decryption of such a message is used as an authentication mechanism" is a plausible use case, and assign a CVE ID:  As far as we know, the scenario might be something like:    if a user symmetrically encrypts a message of "hello" with the   hard-to-guess passphrase of secret0, then an automated process   grants them access to uid 0    if a user symmetrically encrypts a message of "hello" with the   hard-to-guess passphrase of secret1, then an automated process   grants them access to uid 1    etc.  Although there is a communication channel from the user to the automated process, there is no way for the user to send a helpful hint about what passphrase should be tried. The automated process only tries its own set of hard-coded passphrases. For this reason, it is a vulnerability if a user is able to construct (intentionally) a properly formatted message that seems to be encrypted in a useful way, but actually isn't encrypted in a useful way.  This vulnerability (unlike the https://github.com/openpgpjs/openpgpjs/wiki/Cure53-security-audit vulnerabilities) is not yet referenced from the https://github.com/openpgpjs/openpgpjs/blob/master/README.md page.  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  ntQ5dTRst2lyzmzSciSB =RXDl -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      