  oss-security - CVE request: crash when attempt to garbage collect an uninstantiated  keyring            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 20 Oct From: Adam Maris <amaris@...hat.com> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: CVE request: crash when attempt to garbage collect an uninstantiated  keyring  Hello,  I'd like to request CVE for the following issue.  ------------------------------------------------------------  The following sequence of commands:       i=`keyctl add user a a @s`      keyctl request2 keyring foo bar @t      keyctl unlink $i @s  tries to invoke an upcall to instantiate a keyring if one doesn't already exist by that name within the user's keyring set. However, if the upcall fails, the code sets keyring->type_data.reject_error to -ENOKEY or some other error code.  When the key is garbage collected, the key destroy function is called unconditionally and keyring_destroy() uses list_empty() on keyring->type_data.link - which is in a union with reject_error. Subsequently, the kernel tries to unlink the keyring from the keyring names list - which oopses like this:  	BUG: unable to handle kernel paging request at 	IP: 	... 	Workqueue: events key_garbage_collector 	... 	RIP: 	RSP:  EFLAGS: 	RAX: RBX: RCX: 	RDX: RSI: RDI: 	RBP: R08: R09: 	R10: R11: R12: 	R13: R14: R15: 	... 	CR2: CR3: CR4: 	... 	Call Trace: 	 	 	 	 	 ? 	 	 ? 	 	 ? Note the value in RAX. This is a 32-bit representation of -ENOKEY.  The solution is to only call ->destroy() if the key was successfully instantiated.  Upstream patch:   Reported by: Dmitry Vyukov Fixed by: David Howells  References:   ------------------------------------------------------ Note that provided commit contains two fixes, although the second one is  not a security fix.  Thanks!  --  Adam MariĹĄ / Red Hat Product Security   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      