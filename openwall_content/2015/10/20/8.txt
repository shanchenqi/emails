  oss-security - Re: Prime example of a can of worms            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 20 Oct From: gremlin@...mlin.ru To: oss-security@...ts.openwall.com Subject: Re: Prime example of a can of worms  On Kurt Seifried wrote:   > 1) in openssl does the -2/-5 option matter with respect to  > security?  Actually, no: it's just a "generator", so it can be almost any small prime number - say, 3 or 7 or whatever. It can even be just co-prime to group modulo base.  However, the value 2 is the default in OpenSSL, so there may be some space for experiments with birthdays paradox... especially when the modulo is small.   > 2) Openssl/gnutls (and likely others) all apparently have  > slight variations on how they generate/test primes [...]  > this worries me, diversity is good, but if not implemented  > correctly. Do any best practices actually exist?  All implementations I know of simply use the randomized algorithms with Miller-Rabin primality test.   > 3) in testing for primeness how sure are we? Reading [wikipedia: "Miller-Rabin primality test"]  > and so on these tests are all "probably prime" but I can't find  > any data to show that e.g. given this set of large primes, tested  > against the various traditional primality methods, and then brute  > forced to confirm they are prime/not prime, what % failed?  There's the Agrawal-Kayal-Saxena primality test, but I'm unaware of any attempts to use it for checking the prime candidates which passed the Miller-Rabin primality test.   --  Alexey V. Vissarionov aka Gremlin from Kremlin <gremlin ПРИ gremlin ТЧК ru> GPG: @ hkp://keys.gnupg.net  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      