  oss-security - Re: CVE Request: more php unserializing issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue,  8 Sep (EDT) From: cve-assign@...re.org To: meissner@...e.de Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE Request: more php unserializing issues  -----BEGIN PGP SIGNED MESSAGE----- Hash:  The CVE IDs in this message apply to PHP before 5.5.x before and 5.6.x before  > These look like they can be exploited for code execution.  There is related discussion in the post. The essential question is whether there should be a new CVE ID for every report where exploitation depends on the attacker's ability to control the argument to unserialize. We think these reports are important to relatively few people, i.e., either because their applications don't allow arbitrary input to unserialize, or because their applications do allow arbitrary input to unserialize and there's already a much simpler attack approach available. In other words, in practice, no privilege boundary is crossed. However, it's conceivable for an application to have constraints on how unserialize is used, such that many attacks are blocked, but these remote-code-execution attacks involving use-after-free bugs aren't blocked. For example, see some of the discussion linked from the https://wiki.php.net/rfc/secure_unserialize page.   > > (dup) > Use After Free Vulnerability in unserialize() with SPLArrayObject >  > > Use After Free Vulnerability in unserialize() with SplObjectStorage >  > > Use After Free Vulnerability in unserialize() with SplDoublyLinkedList  In the current case, we feel it is best to combine a number of taoguangchen@...oud.com discoveries into one CVE. Use for   > > Dangling pointer in the unserialization of ArrayObject items >         impact: remote code execution  Use for this sean.heelan@...il.com discovery.   > > Files extracted from archive may be placed outside of destination directory  Use This seems to be a marginal case in which the issue can be interpreted as a security enhancement because the vendor states that the behavior was intended. However, for most people, "Extract the contents of a phar archive to a directory" (see the http://php.net/manual/en/phar.extractto.php page) probably doesn't suggest that an arbitrary set of directories can be chosen by the author of the archive. Also, we already have  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  TRCdGfALD7wzyv/cUAoQ =hXh2 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      