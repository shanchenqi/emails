  oss-security - Re: CVE Request: PHP remote exploits (even more)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue,  8 Sep (EDT) From: cve-assign@...re.org To: meissner@...e.de Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE Request: PHP remote exploits (even more)  -----BEGIN PGP SIGNED MESSAGE----- Hash:  The CVE IDs in this message apply to PHP before 5.5.x before and 5.6.x before   >           Use After Free Vulnerability in unserialize() >                 Given attacker input to unserialize() we should consider this a security issue.  >           yet another use-after-free vulnerability in unserialize() with SplObjectStorage >                 I would also say this can be attacker driven, so needs a CVE. >  >           yet another use-after-free vulnerability in unserialize() with SplDoublyLinkedL >                 Same.  Use for this set of taoguangchen@...oud.com use-after-free discoveries. Note that the scope of does not include any subsequent work on these bugs after the release of For example, has an apparently pending comment. The code as shipped in has ext/standard/var.c with:     var_push_dtor_no_addref(&var_hash, &return_value);    /* FIXME: old_rval is not freed in some scenarios, see bug       var_push_dtor_no_addref(&var_hash, &old_rval); */    >           Use after free vulnerability in session deserializer >                 Same.  Our feeling is that this discovery is somewhat specific to the implementation details of session_decode, and that the use-after-free is resultant. Use Also, note the comment of "Also I understand that this requires control over the session content, which for most applications would mean the security is already overridden, as session usually contains all security data."   >           SOAP serialize_function_call() type confusion / RCE >                 Definitely, even the summary has enough indication for me.  Use for this andrea.palazzo@...el.it discovery. >  >  >           NULL pointer dereference >                 Denial of service, these queries might be fed from remote.  It appears that some copies of ext/xsl/xsltprocessor.c have one of the cases fixed, but not the other. We would like to assign, and maintain, two separate CVE IDs for this, regardless of ultimate cause. The PHP release has a check for a NULL return value both in the "if (error == 1)" code block and on the later "if (obj == NULL || obj->stringval == NULL)" line. However, the current http://git.php.net/?p=php-src.git;a=blob;f=ext/xsl/xsltprocessor.c code (i.e., has the former but not the latter.  Use for the vulnerability fixed by the:    -      xmlXPathFreeObject(obj);   +   +      if (obj) {   +          xmlXPathFreeObject(obj);   +      }  patch.   Use for the vulnerability fixed by the:      -   if (obj->stringval == NULL) {   -      php_error_docref(NULL, E_WARNING, "Handler name must be a string");   -      xmlXPathFreeObject(obj);   +   if (obj == NULL || obj->stringval == NULL) {   +      if (obj && obj->stringval == NULL) {   +         php_error_docref(NULL, E_WARNING, "Handler name must be a string");   +         xmlXPathFreeObject(obj);   +      }  patch.  (Also, neither copy of the code made a change related to "obj = valuePop(ctxt); switch (obj->type)" -- if this is a remaining vulnerability, it would have its own CVE ID.)   > Perhaps CVEs also for: >           Buffer over-read in exif_read_data with TIFF IFD tag byte value of 32 bytes >  >         Questionable. It seems no crash was observed, so no denial of service. At most a information leak.  It says "potential data leak" but there's no example of a plausible PHP application in which a client user may obtain private information.   >           HAVAL gives wrong hashes in specific cases >  >         Questionable. I am not sure this is attacker driveable or if an attacker could do anything with this.  This might be primarily an interoperability bug. doesn't attempt to show that the hashes produced by PHP's HAVAL implementation had weaker security properties than those produced by a correct implementation. (One might also argue that applications requiring especially good hash properties should not be using HAVAL at all.)   >         >  >         Various PCRE issues caused by the regexp string. There has been a tendency to either declare this CVE worthy or >         declare that its not attacker driven usually.  There is related discussion at the end of the post. A regular expression can be untrusted input from an attacker, but in a typical PHP application it is not. Also, doesn't have much impact analysis beyond "exploitation to achieve arbitrary code execution might be possible, but not trivial." In addition, there is an overlap with the security fixes available in the unreleased PCRE (see the http://vcs.pcre.org/pcre/code/trunk/ChangeLog?view=markup page).  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  yClKtAjpIOMDRaivspjp =ha5T -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      