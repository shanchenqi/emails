  oss-security - CVE-Request for stored WCI (a.k.a XSS) in Visual Form Builder -             Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 14 Sep From: Anti RĂ¤is <antirais@...il.com> To: oss-security@...ts.openwall.com Subject: CVE-Request for stored WCI (a.k.a XSS) in Visual Form Builder -   Greetings,  I've discovered a vulnerability in the following component and would like to request CVE-ID for it:  Product:       Visual Form Builder (https://wordpress.org/plugins/visual-form-builder/) Version:       - (according to the source code), fixed in Product-type:  Wordpress plugin Vendor:        http://vfbpro.com/ Fixed:         reported Changelog:      Description: This plugin is used to create feedback forms. Unauthenticated user can submit  malicious code and it is shown to the authenticated administrator in the entries  page. Upon viewing the submitted entry, the attackers code executes resulting in  web content injection attack (WCI, a.k.a XSS).   Vulnerability:  --- start visual-form-builder/includes/class-entries-detail.php --- case 'textarea' : case 'html' :         ?>         <tr valign="top">                 <th scope="row"><label for="field[<?php echo $obj->id; ?>]"><?php echo stripslashes( $obj->name ); ?></label></th>                 <td style="background:#eee;border:1px solid #ddd"><?php echo wpautop( stripslashes( wp_specialchars_decode( esc_html( $obj->value ) ) ) ); ?></td>         </tr> <?php         break; default :         ?>         <tr valign="top">                 <th scope="row"><label for="field[<?php echo $obj->id; ?>]"><?php echo stripslashes( $obj->name ); ?></label></th>                 <td style="background:#eee;border:1px solid #ddd"><?php echo stripslashes( wp_specialchars_decode( esc_html( $obj->value ) ) ); ?></td>         </tr> <?php         break; --- end visual-form-builder/includes/class-entries-detail.php ---  The vulnerability lies in the following PHP code: <?php echo stripslashes( wp_specialchars_decode( esc_html( $obj->value ) ) ); ?>  The $obj->value contains user supplied data and is escaped using the esc_html()  and then HTML special characters are decoded using wp_specialchars_decode()  which essentially neuters the esc_html(). Finally, the stripslashes() is  applied, which removes '\' from the given argument.  Poc:     * Submit the following value in the form's text field:         \<svg/onload=alert(1)  ;      * authenticated administrator views the entry and executes the code         Visual Form Builder -> Entries -> (attacker's entry) -> View  Disclosure timeline:     - discovery, contacted the developers     - sent further details and requested feedback     - new release with the fix was released  All the best,  Anti RĂ¤is    Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      