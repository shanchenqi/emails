  oss-security - Re: Some Wordpress Plugin Stuff            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Sun,  6 Sep (EDT) From: cve-assign@...re.org To: scott@...iszewski.me Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: Some Wordpress Plugin Stuff  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > SecurityMoz Security Audit >  > https://wordpress.org/plugins/securemoz-security-audit/ >  > file_get_contents() + explicitly HTTP (no TLS) -> unserialize()  > http://plugins.svn.wordpress.org/securemoz-security-audit/trunk/class/__functions.php >  > unserialize(file_get_contents("http://api.tweetmeme.com/url_info.php?url=$url"));  Use   > WP Limit Login Attempts >  > https://wordpress.org/plugins/wp-limit-login-attempts/ >  > Trivial SQL injection via HTTP headers. >  > $ip = getip(); >  > SELECT ... WHERE `login_ip` =  '$ip' >  > function getip(){ >  > $ip = $_SERVER['HTTP_CLIENT_IP']; > $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];  Use   > Also, Tor Blocker (link below) uses HTTP to grab the list of IP addresses > to block. It's telling and appropriate that the person who developed a > plugin to oppose a privacy technology would fail to use TLS. >  > https://wordpress.org/plugins/tor-exit-nodes-blocker/ >  > (Surely no one would ever think to hack an upstream router and MitM the > connection to block the blog administrator from their own blog or allow Tor > nodes through!)  We don't think that we can assign a CVE ID for this. The product relies on data at the http://pike.hqpeak.com/api/free.php URL; that data is not currently available at the https://pike.hqpeak.com/api/free.php URL or any other HTTPS URL that we know about. Apparently the risk in using HTTP is incorrect/incomplete data, not code execution. If MITM attacks occur, the product user could typically recover from them by deleting unwanted postings and by establishing their own administrative login from a different IP address. MITM attacks aren't likely to occur continuously. Given that the data is only available via HTTP (not HTTPS) and the product user wants the data, we're unable to reach a conclusion that the http://pike.hqpeak.com URL is necessarily a vulnerability without knowing the vendor's perspective. One possible example is that the vendor didn't want to support HTTPS in case the plugin became very popular and the pike.hqpeak.com server was unable to support all of the load of cryptography calculations.  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =DjqZ -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      