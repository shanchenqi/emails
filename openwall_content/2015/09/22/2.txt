  oss-security - Re: Samsung S4 multiple kernel  vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 22 Sep From: Florian Weimer <fweimer@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: Samsung S4 multiple kernel  vulnerabilities  On PM, Daniel Micay wrote: >> is prevented by the STRUCTLEAK GCC plugin. >  > So I'm wrong about this part, as pipacs pointed out the __user marking > is missing here, so it won't memset it in this case. >  > The missing __user would be found by upstream's sparse tool or the PaX > checker plugin though. >  > The STRUCTLEAK plugin could also be extended to zero based on the > copy_*_user calls, but that's probably not very useful since the missing > __user markings could just be found via the existing tooling and fixed.  Did you measure the performance impact of initializing *all* local variables to zero?  If the variable is not addressible (that is, if it is an SSA_NAME), this is essentially free.  In our testing, we only saw a performance loss in socket address handling, where a large placeholder struct is allocated, and the performance loss is quite noticeable when processing small packets. Unfortunately, this is were information disclosure happens in the past, so excluding this very spot for performance reasons is not very satisfying.  The GCC patch we used is here:   --  Florian Weimer / Red Hat Product Security  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      