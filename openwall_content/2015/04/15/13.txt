  oss-security - Re: Re: Problems in automatic crash analysis frameworks            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 15 Apr From: Tavis Ormandy <taviso@...gle.com> To: Tyler Hicks <tyhicks@...onical.com> Cc: oss-security@...ts.openwall.com,  	Assign a CVE Identifier <cve-assign@...re.org>, security <security@...ntu.com>,  	Stéphane Graber <stgraber@...ntu.com> Subject: Re: Re: Problems in automatic crash analysis frameworks  On Wed, Apr 15, at AM, Tyler Hicks <tyhicks@...onical.com> wrote: > On Tavis Ormandy wrote: >> On Wed, Apr 15, at AM, Tyler Hicks <tyhicks@...onical.com> wrote: >> > On Tyler Hicks wrote: >> >> On Tavis Ormandy wrote: >> >> > On Tue, Apr 14, at PM, Tavis Ormandy <taviso@...gle.com> wrote: >> >> > > On Tue, Apr 14, at PM, Tavis Ormandy <taviso@...gle.com> wrote: >> >> > >> On Tue, Apr 14, at AM, Marc Deslauriers >> >> > >> <marc.deslauriers@...onical.com> wrote: >> >> > >>> Hi, >> >> > >>> >> >> > >>> On AM, cve-assign@...re.org wrote: >> >> > >>>> This is mostly a question for the persons who assigned >> >> > >>>> and Should these CVE assignments be interpreted to >> >> > >>>> mean: >> >> > >>>> >> >> > >>>>   - in Apport, an unprivileged user can use a >> >> > >>>>                   namespace-based attack because there is an execve by >> >> > >>>>                   root after a chroot into a user-specified directory >> >> > >>> >> >> > >>> Yes, I assigned to that specific issue in Apport. >> >> > >>> >> >> > >>> Marc. >> >> > >> >> >> > >> It looks like this is the patch for Apport: >> >> > >> >> >> > >> >> >> > >> >> >> > >> It's far more complicated than I expected, and not obviously correct. >> >> > >> It could probably use some review, I'll think about it today. >> >> > >> >> >> > >> Tavis. >> >> > > >> >> > > Wait, my first thought is that it's not obvious to me that >> >> > > /proc/net/unix is guaranteed to be newline delimited, newline is a >> >> > > perfectly valid name in a filename, no? >> >> > > >> >> > >>>> import socket >> >> > >>>> socket.socket(socket.AF_UNIX, socket.SOCK_STREAM).bind('test\ntest') >> >> > >>>> sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) >> >> > >>>> sock.bind('/tmp/foo\nbar') >> >> > >>>> sock.listen(1) >> >> > > >> >> > > $ grep -A1 foo /proc/net/unix >> >> > > 01 /tmp/foo >> >> > > bar >> >> > >> >> > And with complete control over this line, it seems like it's game over. >> >> > >> >> >                 container = lxc.Container(path[-2], real_path) >> >> > >> >> > I'm calling this re-broken. >> >> >> >> I've pointed Stéphane Graber to your analysis (and put him on cc). He's >> >> working on a fix. >> >> >> >> Even though it isn't clear if all of the checks added in revision >> >> can be bypassed, it is worth coming up with another approach. >> > >> > Hi Tavis - We've opened a bug to track the issue that you discovered: >> > >> >   >> > >> > Stéphane has prepared a patch that is more resilient to a malicious >> > /proc/net/unix: >> > >> >   >> > >> > Any feedback that you have would be appreciated. Thanks again! >> > >> > Tyler >> >> Thanks Tyler, I'll think about this morning. I'm not sure if these >> observations are important, but my first thought is It's definitely >> possible to make the st_uid of /proc/ppid 0, you could just do su >> $USER for example. > > Ah, right. Looking at the real uid in /proc/ppid/status is the way to do > it. > >> >> Also, you can at least trust /proc/pid is stopped while the core >> handler is running, but ppid is still running. I think this matters, >> because the pid might be recycled. > > That's why I suggested that he chdir('/proc/ppid') and then only work > off of relative paths. I assumed that would be sufficient but I'll > verify that.  That's true, but there's a race between reading the Ppid and the chdir.   Tavis.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      