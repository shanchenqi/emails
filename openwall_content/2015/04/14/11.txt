  oss-security - Ember.js XSS Vulnerability With {{view "select"}}  Options            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 14 Apr From: "Matthew Beale" <mbeale@...tlabs.com> To: ember-security@...glegroups.com, oss-security@...ts.openwall.com Subject: Ember.js XSS Vulnerability With {{view "select"}}  Options  Ember.js XSS Vulnerability With {{view "select"}}  Options  Data passed as the label of select options may not be escaped before  being passed to the browser.  * Versions Affected: beta * Not affected: Versions prior to * Fixed Versions:  Impact -------  In general, Ember.js escapes or strips any user-supplied content before  inserting it in strings that will be sent to innerHTML.  However, a  change made to the implementation of the select view means that any  user-supplied data bound to an option's label will not be escaped  correctly.  In applications that use Ember's select view and pass user-supplied  content to the label, a specially-crafted payload could execute  arbitrary JavaScript in the context of the current domain ("XSS").  All users running an affected release and binding user-supplied data to  the select options should either upgrade or use one of the workarounds  immediately.  Releases --------  Releases are available on emberjs.com/builds/#/tagged  Workarounds -----------  Ensure that you escape any user-supplied value that you bind to an  option label. For example, if you bind a label:      {{view 'select' content=people optionLabelPath='content.name'}}  Ensure that you escape the `name` value of each item `people` using  Ember.Handlebars.Utils.escapeExpression:      var people = this.get('people');     var peopleForSelect = people.map(function(person){       var newPerson = Object.create(person);       newPerson.name = Ember.Handlebars.escapeExpression(person.name);       return newPerson;     });     this.set('peopleForSelect', peopleForSelect);  Credits -------  This vulnerability was reported to us by Phillip Haines of Zestia. Many  thanks for working with us on identifying the issue and on the advisory  process.  Best,  -Matthew (Ember.js Core Team member)  http://madhatted.com :: @mixonic  diff --git a/packages/ember-htmlbars/lib/templates/select-option.hbs b/pa= ckages/ember-htmlbars/lib/templates/select-option.hbs new file mode index --- /dev/null +++ b/packages/ember-htmlbars/lib/templates/select-option.hbs @@ -0,0 +1 @@ +{{~view.label~}} diff --git a/packages/ember-views/lib/views/select.js b/packages/ember-vi= ews/lib/views/select.js index --- a/packages/ember-views/lib/views/select.js +++ b/packages/ember-views/lib/views/select.js @@ @@ import { computed } from "ember-metal/computed";  import { A as emberA } from "ember-runtime/system/native_array";  import { observer } from "ember-metal/mixin";  import { defineProperty } from "ember-metal/properties"; -import run from "ember-metal/run_loop";  =   import htmlbarsTemplate from "ember-htmlbars/templates/select"; +import selectOptionDefaultTemplate from "ember-htmlbars/templates/select= -option";  =   var defaultTemplate =3D htmlbarsTemplate;  =  -var selectOptionDefaultTemplate =3D { -  isHTMLBars: true, -  render: function(context, env, contextualElement) { -    var lazyValue =3D context.getStream('view.label'); - -    lazyValue.subscribe(context._wrapAsScheduled(function() { -      run.scheduleOnce('render', context, 'rerender'); -    })); - -    return lazyValue.value(); -  } -}; -  var SelectOption =3D View.extend({    instrumentDisplay: 'Ember.SelectOption',  =  diff --git a/packages/ember-views/tests/views/select_test.js b/packages/e= mber-views/tests/views/select_test.js index --- a/packages/ember-views/tests/views/select_test.js +++ b/packages/ember-views/tests/views/select_test.js @@ -4,6 +4,7 @@ import run from "ember-metal/run_loop";  import jQuery from "ember-views/system/jquery";  import { map } from "ember-metal/enumerable_utils";  import EventDispatcher from "ember-views/system/event_dispatcher"; +import SafeString from 'htmlbars-util/safe-string';  =   var trim =3D jQuery.trim;  =  @@ @@ test("can specify the property path for an option's = label and value", function()    deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values");  });  =  +QUnit.test("XSS: does not escape label value when it is a SafeString", f= unction() { +  select.set('content', Ember.A([ +    { id: 1, firstName: new SafeString('<p>Yehuda</p>') }, +    { id: 2, firstName: new SafeString('<p>Tom</p>') } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 1, "Should have child el= ements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "YehudaTom", "Options should have conte= nt"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); + +QUnit.test("XSS: escapes label value content", function() { +  select.set('content', Ember.A([ +    { id: 1, firstName: '<p>Yehuda</p>' }, +    { id: 2, firstName: '<p>Tom</p>' } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 0, "Should have no child=  elements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "<p>Yehuda</p><p>Tom</p>", "Options sho= uld have content"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); +  test("can retrieve the current selected option when multiple=3Dfalse", f= unction() {    var yehuda =3D { id: 1, firstName: 'Yehuda' };    var tom =3D { id: 2, firstName: 'Tom' };   diff --git a/packages/ember-htmlbars/lib/templates/select-option.hbs b/pa= ckages/ember-htmlbars/lib/templates/select-option.hbs new file mode index --- /dev/null +++ b/packages/ember-htmlbars/lib/templates/select-option.hbs @@ -0,0 +1 @@ +{{~view.label~}} diff --git a/packages/ember-views/lib/views/select.js b/packages/ember-vi= ews/lib/views/select.js index --- a/packages/ember-views/lib/views/select.js +++ b/packages/ember-views/lib/views/select.js @@ @@ import { computed } from "ember-metal/computed";  import { A as emberA } from "ember-runtime/system/native_array";  import { observer } from "ember-metal/mixin";  import { defineProperty } from "ember-metal/properties"; -import run from "ember-metal/run_loop";  =   import htmlbarsTemplate from "ember-htmlbars/templates/select"; +import selectOptionDefaultTemplate from "ember-htmlbars/templates/select= -option";  =   var defaultTemplate =3D htmlbarsTemplate;  =  -var selectOptionDefaultTemplate =3D { -  isHTMLBars: true, -  revision: 'Ember@...SION_STRING_PLACEHOLDER', -  render: function(context, env, contextualElement) { -    var lazyValue =3D context.getStream('view.label'); - -    lazyValue.subscribe(context._wrapAsScheduled(function() { -      run.scheduleOnce('render', context, 'rerender'); -    })); - -    return lazyValue.value(); -  } -}; -  var SelectOption =3D View.extend({    instrumentDisplay: 'Ember.SelectOption',  =  diff --git a/packages/ember-views/tests/views/select_test.js b/packages/e= mber-views/tests/views/select_test.js index --- a/packages/ember-views/tests/views/select_test.js +++ b/packages/ember-views/tests/views/select_test.js @@ -4,6 +4,7 @@ import run from "ember-metal/run_loop";  import jQuery from "ember-views/system/jquery";  import { map } from "ember-metal/enumerable_utils";  import EventDispatcher from "ember-views/system/event_dispatcher"; +import SafeString from 'htmlbars-util/safe-string';  =   var trim =3D jQuery.trim;  =  @@ @@ QUnit.test("can specify the property path for an opt= ion's label and value", func    deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values");  });  =  +QUnit.test("XSS: does not escape label value when it is a SafeString", f= unction() { +  select.set('content', Ember.A([ +    { id: 1, firstName: new SafeString('<p>Yehuda</p>') }, +    { id: 2, firstName: new SafeString('<p>Tom</p>') } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 1, "Should have child el= ements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "YehudaTom", "Options should have conte= nt"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); + +QUnit.test("XSS: escapes label value content", function() { +  select.set('content', Ember.A([ +    { id: 1, firstName: '<p>Yehuda</p>' }, +    { id: 2, firstName: '<p>Tom</p>' } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 0, "Should have no child=  elements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "<p>Yehuda</p><p>Tom</p>", "Options sho= uld have content"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); +  QUnit.test("can retrieve the current selected option when multiple=3Dfal= se", function() {    var yehuda =3D { id: 1, firstName: 'Yehuda' };    var tom =3D { id: 2, firstName: 'Tom' };   diff --git a/packages/ember-htmlbars/lib/templates/select-option.hbs b/pa= ckages/ember-htmlbars/lib/templates/select-option.hbs new file mode index --- /dev/null +++ b/packages/ember-htmlbars/lib/templates/select-option.hbs @@ -0,0 +1 @@ +{{~view.label~}} diff --git a/packages/ember-views/lib/views/select.js b/packages/ember-vi= ews/lib/views/select.js index --- a/packages/ember-views/lib/views/select.js +++ b/packages/ember-views/lib/views/select.js @@ @@ import { computed } from "ember-metal/computed";  import { A as emberA } from "ember-runtime/system/native_array";  import { observer } from "ember-metal/mixin";  import { defineProperty } from "ember-metal/properties"; -import run from "ember-metal/run_loop";  =   import htmlbarsTemplate from "ember-htmlbars/templates/select"; +import selectOptionDefaultTemplate from "ember-htmlbars/templates/select= -option";  =   var defaultTemplate =3D htmlbarsTemplate;  =  -var selectOptionDefaultTemplate =3D { -  isHTMLBars: true, -  revision: 'Ember@...SION_STRING_PLACEHOLDER', -  render(context, env, contextualElement) { -    var lazyValue =3D context.getStream('view.label'); - -    lazyValue.subscribe(context._wrapAsScheduled(function() { -      run.scheduleOnce('render', context, 'rerender'); -    })); - -    return lazyValue.value(); -  } -}; -  var SelectOption =3D View.extend({    instrumentDisplay: 'Ember.SelectOption',  =  diff --git a/packages/ember-views/tests/views/select_test.js b/packages/e= mber-views/tests/views/select_test.js index --- a/packages/ember-views/tests/views/select_test.js +++ b/packages/ember-views/tests/views/select_test.js @@ -4,6 +4,7 @@ import run from "ember-metal/run_loop";  import jQuery from "ember-views/system/jquery";  import { map } from "ember-metal/enumerable_utils";  import EventDispatcher from "ember-views/system/event_dispatcher"; +import SafeString from 'htmlbars-util/safe-string';  =   var trim =3D jQuery.trim;  =  @@ @@ QUnit.test("can specify the property path for an opt= ion's label and value", func    deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values");  });  =  +QUnit.test("XSS: does not escape label value when it is a SafeString", f= unction() { +  select.set('content', Ember.A([ +    { id: 1, firstName: new SafeString('<p>Yehuda</p>') }, +    { id: 2, firstName: new SafeString('<p>Tom</p>') } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 1, "Should have child el= ements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "YehudaTom", "Options should have conte= nt"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); + +QUnit.test("XSS: escapes label value content", function() { +  select.set('content', Ember.A([ +    { id: 1, firstName: '<p>Yehuda</p>' }, +    { id: 2, firstName: '<p>Tom</p>' } +  ])); + +  select.set('optionLabelPath', 'content.firstName'); +  select.set('optionValuePath', 'content.id'); + +  append(); + +  equal(select.$('option').length, 2, "Should have two options"); +  equal(select.$('option[value=3D1] b').length, 0, "Should have no child=  elements"); + +  // IE 8 adds whitespace +  equal(trim(select.$().text()), "<p>Yehuda</p><p>Tom</p>", "Options sho= uld have content"); +  deepEqual(map(select.$('option').toArray(), function(el) { return jQue= ry(el).attr('value'); }), ["1", "2"], "Options should have values"); +}); +  QUnit.test("can retrieve the current selected option when multiple=3Dfal= se", function() {    var yehuda =3D { id: 1, firstName: 'Yehuda' };    var tom =3D { id: 2, firstName: 'Tom' };   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      