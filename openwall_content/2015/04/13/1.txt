  oss-security - net-snmp snmp_pdu_parse() function incompletely initializaition vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 13 Apr From: 罗大龙 <luodalongde@...il.com> To: oss-security@...ts.openwall.com Subject: net-snmp snmp_pdu_parse() function incompletely initializaition vulnerability  HI there,    Greeting! This is Qinghao Tang from QIHU  company, China. I am a security researcher there.  I'm writing to apply for a CVE ID, for a 0day vulnerability in net-snmp. Please refer to below report.      [requester info]           name: Qinghao Tang           company: QIHU  company, China           email: tangqinghao@....cn    [vendor info]           name: net-snmp           email: net-snmp-users@...ts.sourceforge.net           website: http://www.net-snmp.org/    [vulnerable net-snmp version]  All version    [vulnerability Description]  Incompletely initialized vulnerability exists in the function ‘snmp_pdu_parse()’ of ‘snmp_api.c', and remote attackers can cause memory leak, DOS and possible command executions by sending malicious packets.  Since the vulnerability occurs when parsing the packets, it could have broader impacts. Currently we have find 12 remote DOS methods in the latest version of net-snmp client software. I think this vulnerability could cause even more severe risks.    [vulnerability resaon]  In the function ‘snmp_pdu_parse()’ of ‘snmp_api.c', the structure of ‘netsnmp_variable_list is initialized incompletely, thus the malicious packets can cause ‘snmp_parse_var_op()’ returning ERROR. When using the uninitialized data（type，val，name_loc，buf） in structure ‘ netsnmp_variable_list’, it will cause memory leak, DOS and possible command executions.    int  snmp_pdu_parse(netsnmp_pdu *pdu, u_char * data, size_t * length)  {                     ….  netsnmp_variable_list *vptemp;          vptemp = (netsnmp_variable_list *) malloc(sizeof(*vptemp));          if (NULL == vptemp) {              return -1;          }          if (NULL == vp) {              pdu->variables = vptemp;          } else {              vp->next_variable = vptemp;          }          vp = vptemp;            vp->next_variable = NULL;          vp->val.string = NULL;          vp->name_length = MAX_OID_LEN;          vp->name = NULL;          vp->index = 0;          vp->data = NULL;          vp->dataFreeHook = NULL;          DEBUGDUMPSECTION("recv", "VarBind");          data = snmp_parse_var_op(data, objid, &vp->name_length, &vp->type,                                   &vp->val_len, &var_val, length);          if (data == NULL)              return -1;                    ……  }  typedef struct variable_list netsnmp_variable_list;  struct variable_list {     /** NULL for last variable */     struct variable_list *next_variable;     /** Object identifier of variable */     oid            *name;     /** number of subid's in name */     size_t          name_length;     /** ASN type of variable */     u_char          type;     /** value of variable */      netsnmp_vardata val;     /** the length of the value to be copied into buf */     size_t          val_len;     /** 90 percentile < 24. */     oid             name_loc[MAX_OID_LEN];     /** 90 percentile < 40. */     u_char          buf[40];     /** (Opaque) hook for additional data */     void           *data;     /** callback to free above */     void            (*dataFreeHook)(void *);     int             index;  };    typedef union {     long           *integer;     u_char         *string;     oid            *objid;     u_char         *bitstring;     struct counter64 *counter64;  #ifdef OPAQUE_SPECIAL_TYPES     float          *floatVal;     double         *doubleVal;     /*      * t_union *unionVal;      */  #endif                          /* OPAQUE_SPECIAL_TYPES */  } netsnmp_vardata;        [crash info from /var/log/messages]  sprint_realloc_integer   overview:Feb 22 localhost kernel: segfault at 0 ip sp error 4 in      asn_realloc_rbuild_int   overview:Feb 22 localhost kernel: segfault at 0 ip sp error 4 in    asn_realloc_rbuild_unsigned_int   overview:Feb 22 localhost kernel: segfault at 0 ip sp error 4 in    asn_realloc_rbuild_unsigned_int64   overview:Feb 22 localhost kernel: segfault at 0 ip sp error 4 in    sprint_realloc_counter   overview:Feb 23 localhost kernel: segfault at 0 ip sp error 4 in    sprint_realloc_uinteger   overview:Feb 13 localhost kernel: segfault at 0 ip sp error 4 in      printI64   overview:Feb 13 localhost kernel: segfault at 0 ip sp error 4 in    sprint_realloc_gauge   overview:Feb 13 localhost kernel: segfault at 0 ip sp error 4 in    sprint_realloc_timeticks   overview:Feb 13 localhost kernel: segfault at 0 ip sp error 4 in    printU64   overview:Feb 13 localhost kernel: segfault at 0 ip sp error 4 in    sprint_realloc_float   overview:Feb 18 localhost kernel: segfault at 0 ip sp error 4 in    asn_realloc_rbuild_signed_int64   overview:Feb 21 localhost kernel: segfault at 0 ip sp error 4 in      [patch]  --- snmp_api.c  +++ snmp_api.c.patch      @@ @@           vp->index = 0;           vp->data = NULL;           vp->dataFreeHook = NULL;  +       vp->type = 0;  +       vp->name_loc = 0;  +       vp->buf = 0;           DEBUGDUMPSECTION("recv", "VarBind");           data = snmp_parse_var_op(data, objid, &vp->name_length, &vp->type,                                    &vp->val_len, &var_val, length)   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      