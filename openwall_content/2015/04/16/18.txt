  oss-security - Re: Re: Problems in automatic crash analysis  frameworks            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Apr From: Tyler Hicks <tyhicks@...onical.com> To: Tavis Ormandy <taviso@...gle.com> Cc: oss-security@...ts.openwall.com, 	Assign a CVE Identifier <cve-assign@...re.org>, 	security <security@...ntu.com>, 	StĂŠphane Graber <stgraber@...ntu.com> Subject: Re: Re: Problems in automatic crash analysis  frameworks  On Tavis Ormandy wrote: > On Wed, Apr 15, at PM, Tavis Ormandy <taviso@...gle.com> wrote: > > On Wed, Apr 15, at AM, Tavis Ormandy <taviso@...gle.com> wrote: > >> FWIW, I verified this is exploitable. > >> > > > > Here's the script I used to verify, it should create the file > > /etc/rootfiletest. By using the partial trick or creating parse > > errors, this is easy to turn into a root shell. >  > It looks like there's a new patch here: > >  > In get_parentns_pid code, it looks like it has the same problem as > before in that there's no guarantee ppid isn't recycled (possibly by > root). Also, you can easily get an untrusted process reparented to > init. If you're not convinced of this, try this: >  > $ bash -c 'sleep & echo $!; disown -ah' > > $ egrep '(PPid|Name):' > Name: sleep > PPid: 1 >  > I'm almost certain it's not possible for the core_patten handler to > perform any meaningful analysis on the parent process. >  > This code is definitely not sufficient: >  >         os.chdir("/proc/%s/" % ppid) >         ... >         with open("status", "r") as fd: >         .... >                             if line.startswith("Uid:"): >  >  > Because you can just wait for ppid to be recycled before the chdir(). > The UDS inode validation is a neat idea, but I don't think it works - > the obvious case is reparenting to init and then using one of the > inode numbers init uses, but even if you special-case init, pid > recycling is possible. >  > I saw the duplicate inode checks, but that doesn't work....it's racy, > and you can just use a netlink socket or similar. >  > Once you've passed this check, it's a controlled lxc.Container() and > you can use my previous PoC to verify that is exploitable.  We've decided to disable support for gathering crash reports of containerized processes (see  We may reintroduce the feature, with a different implementation, in the future. The current idea is described in this feature bug:     Please leave any comments on the proposed design in the feature bug.  Many thanks for thinking through the old implementation and follow up patches, Tavis.  Tyler  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      