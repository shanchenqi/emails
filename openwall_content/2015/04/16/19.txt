  oss-security - Re: kernel: fs.suid_dumpable=2 privilege escalation            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Apr (EDT) From: cve-assign@...re.org To: fweimer@...hat.com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com, keescook@...omium.org Subject: Re: kernel: fs.suid_dumpable=2 privilege escalation  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  >  An alternative perspective might be:    If any program is designed to execute code in a file (or perform   a similar security-relevant action on the contents of a file)   on the basis that the file exists in a specific directory, then   the program is responsible for reasonably distinguishing between   "intended files" and "stray files." The stray files must always   be ignored.  You had mentioned content-based recognition of stray files, i.e., a program should not choose a loose parsing strategy that results in finding an executable item within a core dump. However, there can also be name-based recognition.  An example of a program roughly consistent with this is run-parts -    http://manpages.debian.org/cgi-bin/man.cgi?query=run-parts&manpath=Debian+7.0+wheezy&format=html    "the names must not end in .dpkg-old or .dpkg-dist or .dpkg-new or .dpkg-tmp"  Relative to the exploit code for this would mean: cron is required to recognize /etc/cron.d/core (regardless of content) as a stray file and ignore its existence. This would similarly apply to other cron-like programs that use the /etc/cron.d directory, or a different directory in an analogous role.  The possible advantage of this perspective is that it covers the case of root having a current working directory of /etc/cron.d while running a non-setuid program. If that program happens to dump core, it would seem to violate reasonable expectations for /etc/cron.d/core to be processed as an intended file. Obviously the system could have an unusual configuration in which /proc/sys/kernel/core_pattern has an arbitrary unqualified pathname, not the usual "core" string, but maybe that needs to be specified in the core_pattern documentation. For example: "Some applications are designed to recognize core and the core\..* pattern as stray files. For this reason, it is less safe to choose arbitrary unqualified core_pattern values."  There hasn't been any final decision by MITRE. There might be multiple CVEs, e.g.,    - a Linux kernel CVE because unprivileged users can trigger creation     of large files in otherwise-protected directories, leading to (at     least) denial of service - consuming disk space on arbitrary     filesystems without quotas, generating network traffic to     slow/expensive remote filesystems, etc.    - one CVE for each independent cron codebase that does not skip the     /etc/cron.d/core filename and similar filenames, and has a parsing     approach with a risk of executing something  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG (SunOS)  =YRoX -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      