  oss-security - Re: kernel: infiniband: uverbs: unprotected physical memory access            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 3 Apr From: Solar Designer <solar@...nwall.com> To: Haggai Eran <haggaie@...lanox.com> Cc: Shachar Raindel <raindel@...lanox.com>, 	Yann Droneaud <ydroneaud@...eya.com>, 	Sagi Grimberg <sagig@...lanox.com>, 	"oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: Re: kernel: infiniband: uverbs: unprotected physical memory access  Guys,  Can you please remove oss-security from CC on further replies that also go to linux-kernel?  oss-security is meant to be focused on security, whereas threads on linux-kernel tend to wander off.  In fact, I'd appreciate it if we avoid this combination of CC's in the future - that is, if linux-kernel is CC'ed, please don't CC oss-security on the same message (as the resulting thread is extremely likely to be at least partially off-topic for oss-security).  If something relevant to oss-security comes up in a discussion on LKML, it's better to post a summary of it to oss-security separately.  Thanks!  Alexander  Over-quoting to illustrate what I mean:  On Thu, Apr 02, at Haggai Eran wrote: > On Thursday, April 2, PM, Shachar Raindel wrote: > >> -----Original Message----- > >> From: Yann Droneaud [mailto:ydroneaud@...eya.com] > >> Sent: Thursday, April 02, PM > >> To: Haggai Eran > >> Cc: Shachar Raindel; Sagi Grimberg; oss-security@...ts.openwall.com; > >> <linux-rdma@...r.kernel.org> (linux-rdma@...r.kernel.org); linux- > >> kernel@...r.kernel.org; stable@...r.kernel.org > >> Subject: Re: kernel: infiniband: uverbs: unprotected > >> physical memory access > >> > >> Hi Haggai, > >> > >> Le jeudi 02 avril ? Haggai Eran a ?crit : > >> > On Yann Droneaud wrote: > >> >> Hi, > >> >> > >> >> Le jeudi 02 avril ? Shachar Raindel a ?crit : > >> >>>> -----Original Message----- > >> >>>> From: Yann Droneaud [mailto:ydroneaud@...eya.com] > >> >>>> Sent: Thursday, April 02, PM > >> >>>> Le mercredi 18 mars ? Shachar Raindel a ?crit : > >> >> > >> >>>>> +      /* > >> >>>>> +       * If the combination of the addr and size requested for this > >> >>>> memory > >> >>>>> +       * region causes an integer overflow, return error. > >> >>>>> +       */ > >> >>>>> +      if ((PAGE_ALIGN(addr + size) <= size) || > >> >>>>> +          (PAGE_ALIGN(addr + size) <= addr)) > >> >>>>> +              return ERR_PTR(-EINVAL); > >> >>>>> + > >> >>>> > >> >>>> Can access_ok() be used here ? > >> >>>> > >> >>>>          if (!access_ok(writable ? VERIFY_WRITE : VERIFY_READ, > >> >>>>                         addr, size)) > >> >>>>                   return ERR_PTR(-EINVAL); > >> >>>> > >> >>> > >> >>> No, this will break the current ODP semantics. > >> >>> > >> >>> ODP allows the user to register memory that is not accessible yet. > >> >>> This is a critical design feature, as it allows avoiding holding > >> >>> a registration cache. Adding this check will break the behavior, > >> >>> forcing memory to be all accessible when registering an ODP MR. > >> >>> > >> >> > >> >> Where's the check for the range being in userspace memory space, > >> >> especially for the ODP case ? > >> >> > >> >> For non ODP case (eg. plain old behavior), does get_user_pages() > >> >> ensure the requested pages fit in userspace region on all > >> >> architectures ? I think so. > >> > > >> > Yes, get_user_pages will return a smaller amount of pages than > >> requested > >> > if it encounters an unmapped region (or a region without write > >> > permissions for write requests). If this happens, the loop in > >> > ib_umem_get calls get_user_pages again with the next set of pages, and > >> > this time if it the first page still cannot be mapped an error is > >> returned. > >> > > >> >> > >> >> In ODP case, I'm not sure such check is ever done ? > >> > > >> > In ODP, we also call get_user_pages, but only when a page fault occurs > >> > (see ib_umem_odp_map_dma_pages()). This allows the user to pre- > >> register > >> > a memory region that contains unmapped virtual space, and then mmap > >> > different files into that area without needing to re-register. > >> > > >> > >> OK, thanks for the description. > >> > >> ... > >> > >> Another related question: as the large memory range could be registered > >> by user space with ibv_reg_mr(pd, base, size, IB_ACCESS_ON_DEMAND), > >> what's prevent the kernel to map a file as the result of mmap(0, ...) > >> in this  region, making it available remotely through IBV_WR_RDMA_READ / > >> IBV_WR_RDMA_WRITE ? > >> > >  > > This is not a bug. This is a feature. > >  > > Exposing a file through RDMA, using ODP, can be done exactly like this. > > Given that the application explicitly requested this behavior, I don't > > see why it is a problem. Actually, some of our tests use such flows. > > The mmu notifiers mechanism allow us to do this safely. When the page is > > written back to disk, it is removed from the ODP mapping. When it is > > accessed by the HCA, it is brought back to RAM. > >  >  >  > I want to add that we would like to see users registering a very large memory region (perhaps the entire process address space) for local access, and then enabling remote access only to specific regions using memory windows. However, this isn't supported yet by our driver. Still, there are valid cases where you would still want the results of an mmap(0,...) call to be remotely accessible, in cases where there is enough trust between the local process and the remote process. It may help a middleware communication library register a large portion of the address space in advance, and still work with random pointers given to it by another application module. >  >  > Regards, > Haggai  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      