  oss-security - Re: Possible CVE Request: Multiple stack overflows in squashfs-tools and sasquatch            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 18 Jun (EDT) From: cve-assign@...re.org To: gcanalesb@...com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: Possible CVE Request: Multiple stack overflows in squashfs-tools and sasquatch  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  > Sasquatch is an experimental fork of squashfs-tools. > I'm requesting a CVE number for this vulnerability, per project.  CVE assignments typically cannot be done that way.  > https://github.com/devttys0/sasquatch/pull/5  As far as we can tell, there are two independent types of problems:    - "int bytes" is incorrect because the return value of     SQUASHFS_FRAGMENT_BYTES can be larger than the maximum     value of a signed int    - pull/5 says "If we fix this by making the variable size_t, we run     into an unrelated problem in which the stack VLA allocation of     fragment_table_index[] can easily exceed RLIMIT_STACK" but     actually RLIMIT_STACK can be exceeded regardless of the data type     of the bytes variable  We understand that the pull request is only intended to be an example code change, not a comprehensive code change to all affected functions.  This type of fork situation can have up to six CVEs:   1 - all "int where size_t is correct" issues that occur only in squashfs-tools   2 - all "int where size_t is correct" issues that occur only in sasquatch   3 - all "int where size_t is correct" issues that occur in both squashfs-tools and sasquatch   4 - all "exceeding RLIMIT_STACK" issues that occur only in squashfs-tools   5 - all "exceeding RLIMIT_STACK" issues that occur only in sasquatch   6 - all "exceeding RLIMIT_STACK" issues that occur in both squashfs-tools and sasquatch  We would guess that the most likely case is that only 3 and 6 are applicable, i.e., the code problems are found only in and all of these files exist in both squashfs-tools and sasquatch. Is this correct?  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG (SunOS)  =YsiJ -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      