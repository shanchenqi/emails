  oss-security - Re: PostgreSQL - Predictable cancel key            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 16 Jun From: Pierre Schweitzer <pierre@...ctos.org> To: Bastian Blank <waldi@...ian.org>, oss-security@...ts.openwall.com Subject: Re: PostgreSQL - Predictable cancel key  -----BEGIN PGP SIGNED MESSAGE----- Hash:  Hi Bastian,  On PM, Bastian Blank wrote: > Hi Pierre >  > On Mon, Jun 15, at Pierre Schweitzer wrote: >> I had a look at glibc random implementation, they got rid of the >> old LCG they were using for a "nonlinear additive feedback" PRNG >> which uses a 31 numbers state. That means that knowing a number >> in the pseudo-random stream you cannot recover the whole >> generator state to compute the next PRN, as it was possible with >> a LCG. >  >> So, basically, if I'm right (correct otherwise!) knowing your >> cancel key and your PID makes it really hard to know which key >> belongs to other PIDs. Because you still lack two pieces of >> information: the initial state (deduced from the knowledge of the >> seed) and the state of the generator when it generated your key >> (or perhaps knowing just one state would be enough? Anyway, it's >> missing). >  > The seed is not public, but you missed one detail: there are only > one million different ones.  This seed is the only input of the > PRNG.  With one million starting points (which is a lot less then > the complete state) you can easily brute force the seed for the > returned values.  Well, I've thought about it, but that's still one million seeds and the cancel key you're looking for might have been generated after several random() call. So, that means perhaps 10 millions values to explore? (If we make the hypothesis that for a given initialization, it will only draw 10 PRN)  How relevant would still be your cancel key once you found it?  > After you know the complete state, you can calculate possible > state ranges for different PID.  The exploration range still seem to look huge to me, no?  I mean, let's say you auth to PGSQL, you get your cancel key. Next, you'll try the one million seeds + X drawn numbers to find if you find yours, so that you can match the appropriated seed. Given your seed, you can generate all the cancel keys for all the PID you find, and attempt to find which one matches which one. With all the noise you'll have in PIDs (gone PGSQL connections, other random processes started & gone, and so on).  Or you have a fastest/simplest method I would have missed?  Cheers, - --  Pierre Schweitzer <pierre@...ctos.org> System & Network Administrator Senior Kernel Developer ReactOS Deutschland e.V. -----BEGIN PGP SIGNATURE----- Version: GnuPG v2  =vx00 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      