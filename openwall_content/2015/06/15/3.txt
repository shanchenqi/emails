  oss-security - Re: PostgreSQL - Predictable cancel key            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 15 Jun From: Pierre Schweitzer <pierre@...ctos.org> To: Bastian Blank <waldi@...ian.org>, oss-security@...ts.openwall.com Subject: Re: PostgreSQL - Predictable cancel key  -----BEGIN PGP SIGNED MESSAGE----- Hash:  Hi,  How is it really exploitable?  I had a look at glibc random implementation, they got rid of the old LCG they were using for a "nonlinear additive feedback" PRNG which uses a 31 numbers state. That means that knowing a number in the pseudo-random stream you cannot recover the whole generator state to compute the next PRN, as it was possible with a LCG.  So, basically, if I'm right (correct otherwise!) knowing your cancel key and your PID makes it really hard to know which key belongs to other PIDs. Because you still lack two pieces of information: the initial state (deduced from the knowledge of the seed) and the state of the generator when it generated your key (or perhaps knowing just one state would be enough? Anyway, it's missing).  So, I feel like that it's really hard for a PID to hijack another PID.  But, for my reasoning, I used the hypothesis that random() is implemented with a robust PRNG. This is actually really libc quality dependent. I'm not sure if some implementations still rely on a LCG.  Correct me if I'm wrong or if I missed something.  Cheers,  On AM, Bastian Blank wrote: > Hi >  > PostgreSQL postmaster uses predictable random numbers from > random(). The PRNG is seeded once during its lifetime with > srandom().  The seed is generated as following, also zero is > explicitely excluded: >  > | random_seed = random_start_time.tv_usec ^ | > ((random_stop_time.tv_usec << 16) | | > ((random_stop_time.tv_usec >> 16) & 0xffff)); >  > So we have at most different seeds. >  > A so called cancel key is generated with random() for every new > backend used by client connections and for autovacuum childs.  This > key together with the PID is used for asynchronous cancelation of > queries in client backends.  This values are transmitted to the > client after successful authentication. >  > The information needed to cancel other queries is the (sequential, > at least on Linux) pid and a predicable (secret) key. >  > Another set of four calles to random() are used to generate the > salt for the md5-authentication.  This value is given to the client > before the authentication.  One call per byte is done, excluding > zero bytes: >  > | md5Salt[0] = (random() % + 1; | md5Salt[1] = (random() % > + 1; | md5Salt[2] = (random() % + 1; | md5Salt[3] = > (random() % + 1; >  > Timeline: - Reported upstream, considered no problem - > Published >  > Regards, Bastian >    - --  Pierre Schweitzer <pierre@...ctos.org> System & Network Administrator Senior Kernel Developer ReactOS Deutschland e.V. -----BEGIN PGP SIGNATURE----- Version: GnuPG v2  uCNVNGa8cLnxnxSAaVht =l/HC -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      