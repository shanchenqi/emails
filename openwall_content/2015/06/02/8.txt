  oss-security - Stack out of bounds read access in uudecode / sharutils            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 3 Jun From: Hanno Bรถck <hanno@...eck.de> To: oss security list <oss-security@...ts.openwall.com> Cc: cve-assign@...re.org Subject: Stack out of bounds read access in uudecode / sharutils  https://blog.fuzzing-project.org/13-Stack-out-of-bounds-read-access-in-uudecode-sharutils.html  uudecode is a tool to decode uuencoded data. It is shipped with the package sharutils.  An invalid input file can cause an out of bounds stack read access in the function expand_tilde(). This issue has been reported to the developers on It has been fixed in sharutils  To see this bug one needs to use a tool like valgrind or address sanitizer that detects out of bounds memory reads. The bug was found with american fuzzy lop.  Sample file https://crashes.fuzzing-project.org/uudecode-oob-read-stack-expand_tilde.uu  Address sanitizer output:  AddressSanitizer: stack-buffer-overflow on address at pc bp sp READ of size 1 at thread T0 #0 in expand_tilde #1 in decode #2 in main #3 in __libc_start_main #4  Address is located in stack of thread T0 at offset in frame #0 in decode  This frame has 7 object(s): [32, 36) 'mode' [96, 'outlen' 'ctx' 'attr' 'buf' <== Memory access at offset overflows this variable 'buf_in' 'buf'  --  Hanno Bรถck http://hboeck.de/  mail/jabber: hanno@...eck.de GPG:  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      