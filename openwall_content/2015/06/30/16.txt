  oss-security - Re: Question about world readable config files and  commented warnings            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 30 Jun From: vladz <vladz@...zero.fr> To: oss-security@...ts.openwall.com Subject: Re: Question about world readable config files and  commented warnings   On Tue, Jun 30, at Kurt Seifried wrote: > From a developer perspective I somewhat agree, however I'm looking at > this from a vendor perspective where we do control the chmod, easily > (RPM spec file).  I don't know if this is relevant, but I also regularly find applications that, during their installation phases, set the correct permissions to sensitive files for instance) but in a insecure manner, i.e. they:      1) create the file (perms will depend on root umask, usually     2) restrict its permissions (chmod     3) open the file and write sensitive content in it  I won't paraphrase this post [1], but chmod on a file isn't sufficient to preserve a file content on a multiuser system: a local user can open the file in read-only right after 1) to obtain a file descriptor, and use it for later content disclosure after 3).  We all know that a better way to create the file would be to set the adequate umask first.  But the above steps can be found in initialization and installation scripts (I can share a non-exhaustive list if wished).  I also wouldn't recommend the use of "-m in the "install" command as it has the same problem:      # touch f1     # strace install -m f1 f2     [...]     open("f2", O_WRONLY|O_CREAT|O_EXCL, = 4 // here f2 is readable     chmod("f2",                         = 0  Regards, vladz.    [1]   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      