  oss-security - Re: CVE request: Linux kernel - bpf jit optimization flaw can panic kenrel.            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 22 Jun (EDT) From: cve-assign@...re.org To: wmealing@...hat.com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE request: Linux kernel - bpf jit optimization flaw can panic kenrel.  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  > In the problematic case, the compiler fails to optimise a set > of specially crafted instructions. This creates a problem when this faulty > instruction list is used during filtering and the CPU can execute an invalid > instruction (in receive_pkt). >  > This can be triggered as an non-root user, as they can start a server on a > ephemeral port and the packet filter with a specially crafted filter. >  > These incorrect instructions will run when the server receives a packet and execute > the buggy instructions.  >  > x86: bpf_jit: fix compilation of large bpf programs > > x86 has variable length encoding. x86 JIT compiler is trying to pick > the shortest encoding for given bpf instruction. While doing so the > jump targets are changing, so JIT is doing multiple passes over the > program. Typical program needs 3 passes. Some very short programs > converge with 2 passes. Large programs may need 4 or 5. But specially > crafted bpf programs may hit the pass limit and if the program > converges on the last iteration the JIT compiler will be producing an > image full of 'int 3' insns. Fix this corner case by doing final > iteration over bpf program. >  > - for (pass = 0; pass < 10; pass++) { > + for (pass = 0; pass < 10 || image; pass++) {  Use  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG (SunOS)  =7y5J -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      