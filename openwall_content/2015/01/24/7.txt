  oss-security - Re: Re: CVE Request: Linux kernel crypto api  unprivileged arbitrary module load            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 24 Jan From: Mathias Krause <minipli@...glemail.com> To: oss-security@...ts.openwall.com Cc: marc.deslauriers@...onical.com, cve-assign@...re.org Subject: Re: Re: CVE Request: Linux kernel crypto api  unprivileged arbitrary module load  On 24 January at  <cve-assign@...re.org> wrote: >> The Crypto API in the Linux kernel before allowed unprivileged users to >> load arbitrary kernel modules. > >> https://plus.google.com/+MathiasKrause/posts/PqFCo4bfrWu > >> >> > > Use for the original discovery by Mathias Krause, > with a "Try the code snippet below on a system with > CONFIG_CRYPTO_USER_API=y" attack. > [...]  >> > > Use for this second discovery in mentioned in > PqFCo4bfrWu as 'stumbled over the first flaw -- not handling crypto > templates correctly. This means, the patch would prevent loading the > vfat.ko module when requesting a cipher named "vfat" but would fail to > do so if one would request "vfat(aes)" instead.' As far as we can > tell, this is a discovery of a separate attack vector that wasn't > implied by the post.  Even though this was a new discovery, not explicitly mentioned in the initial report, it's the same bug, essentially -- using the AF_ALG interface to load arbitrary modules. In fact, commits and should have been a single one in the first place. But for whatever reasons commit was applied, so the template issue had to be fixed in the follow-up commit However, both commits were merged together into Linus' tree that ended up in See the merge commit at [1] and the discussion at [2] for further reference.  [1] [2]  So I think should be marked as a duplicate of It's the same issue, really.  >> > > This isn't within the scope of either or > As far as we can tell, it is largely a usability fix. The example > mentioned is "This fixes, e.g., requesting 'ecb(blowfish-generic)', > which used to work with kernels and below." Is there also a > security impact if is > missing? For example, is it likely that code exists that requests > ecb(blowfish-generic) in an environment without > and is able to continue > working afterward, but falls back to weak encryption?  It's just an API compliance fix to not regress the user interface for the Crypt User API. No security fix, AFAICS.  Regards, Mathias  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      