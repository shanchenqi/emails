  oss-security - Re: Re: Fwd: x86 ROP mitigation            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 18 Nov From: Florian Weimer <fweimer@...hat.com> To: oss-security@...ts.openwall.com, Bernd Schmidt <bschmidt@...hat.com> Cc: Jeff Law <law@...hat.com> Subject: Re: Re: Fwd: x86 ROP mitigation  On AM, Solar Designer wrote:  > I'd like more detail on the plan of dealing with function epilogues, if > there is a plan for that. >  > I'm not sure if this fits under: >  >>   * Look into an idea Florian had for improving stack-protector >>     epilogues. >  > or if that's (more likely) something entirely different.  It's about things like this:           48 8b 4c 24 58          mov             64 48 33 0c 25 28 00    xor       1c6df:       00 00          75 31                   jne             48 83 c4 68             add             5b                      pop    %rbx          5d                      pop    %rbp          41 5c                   pop    %r12    1c6eb:       41 5d                   pop    %r13    1c6ed:       41 5e                   pop    %r14    1c6ef:       41 5f                   pop    %r15          c3                      retq âŚ          e8 47 b7 ff ff          callq  <__stack_chk_fail@plt>          0f 1f 80 00 00 00 00    nopl   0x0(%rax)  It seems to me that if the stack canary check happened directly before the RET instruction, after restoring the registers, it would make it more difficult to abuse the RET instruction.  With the code above, you can just jump to the address and have access to quite a few useful POP instructions.  Florian  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      