  oss-security - Re: CVE-Request: Assign CVE for common-collections remote  code execution on deserialisation flaw            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 13 Nov From: Mark Felder <feld@...d.me> To: oss-security@...ts.openwall.com Subject: Re: CVE-Request: Assign CVE for common-collections remote  code execution on deserialisation flaw    On Fri, Nov 13, at Gsunde Orangen wrote: > > I share Tim's view [2] and a dozen of (own) applications we checked > won't break. A property that re-enables deserialization of course would > help additionally: allow applications that really *need* this to get it > working; but that requires an explicit step - so latest by that time: > those, whose applications break after including a "fixed" version of > Commons-Collections would (hopefully) start to think about their design. >  > Gsunde >  > [1] > [2]  This statement is how we have been operating our mitigation strategy:  "Applications which use Apache Commons Collections and do not use deserialization are not vulnerable."  Assuming that statement is correct, disabling deserialization by default doesn't offer additional protection to people. Instead it requires a code change when they upgrade to re-enable it and cause them to be vulnerable again.  Would the greater community be better served by additional documentation on how to safely handle the deserialization in their application? Is there such a method, or is this hopelessly broken?  If you're still vulnerable even if you don't use deserialization in your application this completely changes our risk profile and we need to change our mitigation strategy.   --    Mark Felder   feld@...d.me  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      