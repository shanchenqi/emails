  oss-security - Re: Pointer misuse unziping files with busybox            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue,  3 Nov (EST) From: cve-assign@...re.org To: dalias@...c.org Cc: cve-assign@...re.org, oss-security@...ts.openwall.com, gustavo.grieco@...il.com Subject: Re: Pointer misuse unziping files with busybox  -----BEGIN PGP SIGNED MESSAGE----- Hash:  >> > >> >> > Unziping a specially crafted zip file results in a computation of an invalid >> > pointer and a crash reading an invalid address.  >> BusyBox wouldn't realistically be >> used for deployment of a program that remains running to offer an >> unzipping service to multiple clients.  > There are several distributions including Alpine Linux, widely used in > container environments, which by default use busybox to provide the > unzip utility. Unzipping of any files downloaded by the user, possibly > from untrusted sources, may be affected. I believe CVE is appropriate > for user-facing programs commonly used to open untrusted files even > without an automated process accepting and processing > potentially-malicious files from a client.  We'll try to add some information about what we're looking for.  1. If the product were a library that decompresses untrusted files, then the existence of a crash would be enough to assign a CVE ID. The rationale is that a library might have been used to develop a program that needs to remain running even after one bad file is encountered.  2. Many products that aren't libraries have no need to remain running after a bad file is encountered. If the only possible problem is "a crash reading an invalid address" and there is no way to write to an invalid address or change the flow of control, then there typically can't be a CVE ID. Typically, a simple and complete workaround for the crash problem is to not try to unzip the bad file again.  > From: Gustavo Grieco <gustavo.grieco@...il.com> > Date: Fri, 30 Oct  >> Could you please comment directly about the likelihood of >> exploitability for code execution?  > To be honest, i don't know. The patched code looks quite complex and i > cannot discard any potential arbitrary write there.  We currently prefer not to assign CVE IDs when the available information is "a crash reading an invalid address" in combination with "cannot discard any potential arbitrary write."  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =xHYl -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      