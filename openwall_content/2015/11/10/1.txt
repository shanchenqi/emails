  oss-security - Xen Security Advisory - x86:  CPU lockup during exception delivery            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 10 Nov From: Xen.org security team <security@....org> To: xen-announce@...ts.xen.org, xen-devel@...ts.xen.org,  xen-users@...ts.xen.org, oss-security@...ts.openwall.com CC: Xen.org security team <security@....org> Subject: Xen Security Advisory - x86:  CPU lockup during exception delivery  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1        Xen Security Advisory /                               version 2                x86: CPU lockup during exception delivery  UPDATES IN VERSION 2 ====================  Minor title and text adjustment.  has been assigned for the problem with #DB. (The #AC issue remains  Public release.  ISSUE DESCRIPTION =================  When a benign exception occurs while delivering another benign exception, it is architecturally specified that these would be delivered sequentially. There are, however, cases where this results in an infinite loop inside the CPU, which (in the virtualized case) can be broken only by intercepting delivery of the respective exception.  Architecturally, at least some of these cases should also be resolvable by an arriving NMI or external interrupt, but empirically this has been determined to not be the case.  The cases affecting Xen are:  #AC (Alignment Check Exception, When a 32-bit guest sets up the IDT entry corresponding to this exception to reference a ring-3 handler, and when ring 3 code triggers the exception while running with an unaligned stack pointer, delivering the exception will re-encounter #AC, ending in an infinite loop.  #DB (Debug Exception, When a guest sets up a hardware breakpoint covering a data structure involved in delivering #DB, upon completion of the delivery of the first exception another #DB will need to be delivered. The effects slightly differ depending on further guest characteristics:  - - Guests running in 32-bit mode would be expected to sooner or later   encounter another fault due to the stack pointer decreasing during   each iteration of the loop. The most likely case would be #PF (Page   Fault) due to running into unmapped virtual space. However, an   infinite loop cannot be excluded (e.g. when the guest is running with   paging disabled).  - - Guests running in long mode, but not using the IST (Interrupt Stack   Table) feature for the IDT entry corresponding to #DB would behave   similarly to guests running in 32-bit mode, just that the larger   virtual address space allows for a much longer loop. The loop can't,   however, be infinite, as eventually the stack pointer would move into   non-canonical address space, causing #SS (Stack Fault) instead.  - - Guests running in long mode and using IST for the IDT entry   corresponding to #DB would enter an infinite loop, as the stack   pointer wouldn't change between #DB instances.  IMPACT ======  A malicious HVM guest administrator can cause a denial of service. Specifically, prevent use of a physical CPU for a significant, perhaps indefinite period.  If a host watchdog (Xen or dom0) is in use, this can lead to a watchdog timeout and consequently a reboot of the host.  If another, innocent, guest, is configured with a watchdog, this issue can lead to a reboot of such a guest.  It is possible that a guest kernel might expose the #AC vulnerability to malicious unprivileged guest users (by permitting #AC to be handled in guest user mode).  However, we believe that almost all ordinary operating system kernels do not permit this; we are not aware of any exceptions.  (A guest kernel which exposed the #AC vulnerability to guest userspace would be vulnerable when running on baremetal, without Xen involved.)   VULNERABLE SYSTEMS ==================  The vulnerability is exposed to any x86 HVM guest.  ARM is not vulnerable.  x86 PV VMs are not vulnerable.  All versions of Xen are affected.  x86 CPUs from all manufacturers are affected.  MITIGATION ==========  Running only PV guests will avoid this issue.  Running only kernels which avoid exposing the #AC problem to userspace (as discussed in Impact) will prevent untrusted guest users from exploiting this issue.  With such good kernels, the vulnerability can be avoided altogether if the guest kernel is controlled by the host rather than guest administrator, provided that further steps are taken to prevent the guest administrator from loading code into the kernel (e.g. by disabling loadable modules etc) or from using other mechanisms which allow them to run code at kernel privilege.  In Xen HVM, controlling the guest's kernel would involve locking down the bootloader.   CREDITS =======  These issues were discovered by Ben Serebrin from Google and Jan Beulich from SUSE.  RESOLUTION ==========  To correctly support the intended uses of the relevant CPU features would require architectural changes to the CPU specification, design and implementation.  This is not practical as a security response.  Applying the appropriate attached patch works around the issue in software.         xen-unstable, Xen 4.6.x    Xen 4.5.x    Xen 4.4.x    Xen 4.3.x  $     $   NOTE REGARDING EMBARGO DURATION ===============================  We have released this advisory as soon as possible after we obtained firm confirmation of the embargo end date from the discoverer.   DEPLOYMENT DURING EMBARGO =========================  Deployment of the patches and/or mitigations described above (or others which are substantially similar) is permitted during the embargo, even on public-facing systems with untrusted guest users and administrators.  But: Distribution of updated software is prohibited (except to other members of the predisclosure list).  Predisclosure list members who wish to deploy significantly different patches and/or mitigations, please contact the Xen Project Security Team.   (Note: this during-embargo deployment notice is retained in post-embargo publicly released Xen Project advisories, even though it is then no longer applicable.  This is to enable the community to have oversight of the Xen Project Security Team's decisionmaking.)  For more information about permissible uses of embargoed information, consult the Xen Project community's agreed Security Policy:   http://www.xenproject.org/security-policy.html -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  =z+MW -----END PGP SIGNATURE-----  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      