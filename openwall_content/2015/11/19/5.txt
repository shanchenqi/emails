  oss-security - Re: Fwd: x86 ROP mitigation            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 19 Nov From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: Fwd: x86 ROP mitigation  Thank you all for the responses.  The project makes more sense to me now.  Florian wrote: > > It seems to me that if the stack canary check happened directly before > > the RET instruction, after restoring the registers, it would make it > > more difficult to abuse the RET instruction.  With the code above, you > > can just jump to the address and have access to quite a few useful > > POP instructions.  On Wed, Nov 18, at Fabio Pagani wrote: > You are right. Attackers will have access to POP instruction and > potentially to any instruction found in an unaligned fashion. > Shifting down the check will work but it's very dangerous, because you > are accessing a part of the stack that was deallocated with the add.  Perhaps the POP instructions can be replaced with MOVs (since the stack pointer would not yet be right for the POPs) and the ADD postponed until after the check?  That way, the check would still be inside the would-be desirable gadget, and would hopefully spoil it (since the gadget would be invoked without a prior invocation of the function's prologue).  > Actually I've implemented G-Free for (except the "symbolic > addresses" part) in the LLVM backend. > The source will be released max in 2 weeks, but anyway i will be very > happy to discuss and help for a GCC implementation.  Cool!  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      