  oss-security - Re: CVE request - Android kernel - IPv6 connect cause  a denial of service            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 9 Dec From: Hannes Frederic Sowa <hannes@...essinduktion.org> To: oss-security@...ts.openwall.com Subject: Re: CVE request - Android kernel - IPv6 connect cause  a denial of service  Hello,  On 郭永刚 wrote: >  > Analysis of causes: > In the file net/ipv4/af_inet.c , It will cause pc is 0x0  , if the sk->sk_prot->get_port is NULL. > static int inet_autobind(struct sock *sk) > { >          struct inet_sock *inet; >          /* We may need to bind the socket. */ >          lock_sock(sk); >          inet = inet_sk(sk); >          if (!inet->inet_num) { >                    if (sk->sk_prot->get_port(sk, 0)) { >                             release_sock(sk); >                             return -EAGAIN; >                    } >                    inet->inet_sport = htons(inet->inet_num); >          } >          release_sock(sk); >          return 0; > } >  > Solution: >  >          Add check as follow: >                   if (sk->sk_prot->get_port &&sk->sk_prot->get_port(sk, 0)) { >                             release_sock(sk); >                             return -EAGAIN; >                    } >   Thanks for the report, I will look into that. But I fear your solution just papers over the bug and will leave the port in a half initialized state.  Bye, Hannes   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      