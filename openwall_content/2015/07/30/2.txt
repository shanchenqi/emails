  oss-security - Re: Linux NMI security issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 30 Jul From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: Linux NMI security issues  On Wed, Jul 22, at Andy Lutomirski wrote: > +++++ +++++ [...] > Mitigations: Use seccomp to disable perf_event_open or modify_ldt or > run with only a single CPU.  To my knowledge, this cannot be exploited > on single-processor systems or in single-threaded applications. [...] > +++++ +++++ >  > High impact NMI bug on systems and newer, embargoed.  Also fixed by: >  > >  > The other fix (synchronous modify_ldt) does *not* fix >  > You can mitigate by blocking modify_ldt or > perf_event_open using seccomp.  A fully-functional, portable, reliable > exploit is privately available and will be published in a week or two. > *Patch your systems*  I understand how seccomp is usable for sandboxing in a program, but how would a sysadmin block syscalls with it?  Perhaps we still need a new interface that would enable a sysadmin to easily block individual syscalls?  The idea of blocking modify_ldt for the entire system was brought up before:   even though there are valid reasons for having it available to all, e.g.:   Past issues with and thoughts on the ability for user processes to modify the LDT, dating back to   BTW, Red Hat now has a statement here:   "This issue does not affect the Linux kernel packages as shipped with Red Hat Enterprise Linux 5 and 6 since they did not backport the nested NMI handler and espfix64 functionalities.  This issue does not affect the Linux kernel packages as shipped with Red Hat Enterprise Linux 7 and Red Hat Enterprise MRG 2 since they did not backport the espfix64 functionality and also did not backport upstream commit that allowed an unprivileged local user to re-enable NMIs from the NMI handler."  The mentioned commit is:   Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      