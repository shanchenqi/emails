  oss-security - How serious is undefined behavior?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 6 Jul From: Hanno Bรถck <hanno@...eck.de> To: oss-security@...ts.openwall.com Subject: How serious is undefined behavior?  Hi,  As most probably know clang and gcc have a feature called "undefined behavior sanitizer" which checks for stuff that according to the C standard is not defined.  When you run this on real world software you'll find a lot of things. Most of it are signed integer overflows and invalid shift operations (shift exponent larger than type bit size, negative value, negative exponent).  From a theoretic point of view the matter is clear: When something is undefined the compiler is allowed to create any kind of optimization that will cause all kinds of behavior and the programmer can't expect anything reliable to happen.  However I wonder how practically relevant these issues are and also how much focus should be given to them. Do people have good examples where e.g. an invalid shift operation caused a real, severe security issue? Would people think it's a wise idea to put a lot of effort into testing applications with ubsan enabled and reporting all the bugs that pop up? (that would mean a lot of bugreports) Or would this be perceived as an annoying "that's a theoretical C language nitpick issue and not a real bug".  (Just to give you an idea: This affects the very basic libraries, e.g. I recently reported a shiftleft issue in zlib [1] and openssl still exposes several issues just by running the testsuite with ubsan)  Some practical notes: ubsan can be enabled with -fsanitize=undefined in CFLAGS and it's best to use a reasonably new version of it, e.g. clang 3.6 or gcc 5.1, they have a couple of new checks.   [1]   --  Hanno Bรถck http://hboeck.de/  mail/jabber: hanno@...eck.de GPG:  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      