  oss-security - TR : CVE request for dash  local buffer overflow             Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 6 Jul From: "jean-marie.bourbon@...aturetech.com" 	<jean-marie.bourbon@...aturetech.com> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: TR : CVE request for dash  local buffer overflow    Date d'envoi : mardi 30 juin À : cve-assign@...re.org Objet : CVE request for dash  local buffer overflow  Context:  - GLIBC:   - DASH:   - Kernel: amd64    Tested on Debian based distribution.  Bug explanation:  Hi,  I request a CVE id number for the following vulnerability : dash local buffer overflow.  I discover it using bash who sent me a SIGKILL (no real crash) and closed my shell in certain circumstances:  kmkz@...z:/tmp$  `perl -e '$i=0;while($i<= bash: xrealloc : : impossible d'allouer octets octets alloués)  So I wanted to try using my /bin/dash and... I had a local crash !  In fact, it comsume all the memory before to freeze the computer.  Thereafter I also  tested it with VALGRIND and GDB to investigate as shown here and with a non privilegied user:   # su kmkz              // my user $ /bin/bash            // to have completion ... :-/ kmkz@...z:/home$ id kmkz@...z:/home$ valgrind --tool=memcheck --leak-check=yes /bin/dash                   // launch vlagrind in debbug mode on /bin/dash Memcheck, a memory error detector Copyright (C) and GNU GPL'd, by Julian Seward et al. Using and LibVEX; rerun with -h for copyright info Command: /bin/dash $ `perl -e '$i=0;while($i<= REDIR: (strcmp) redirected to (_vgnU_ifunc_wrapper) REDIR: (__strcmp_sse42) redirected to (strcmp) REDIR: (realloc) redirected to (realloc) REDIR: (strpbrk) redirected to (_vgnU_ifunc_wrapper) REDIR: (__strpbrk_sse42) redirected to (strpbrk) REDIR: (bcmp) redirected to (_vgnU_ifunc_wrapper) REDIR: (__memcmp_sse4_1) redirected to (bcmp)  Warning: set address range perms: large range (undefined) Warning: set address range perms: large range (noaccess) Warning: set address range perms: large range (undefined) Warning: set address range perms: large range (noaccess) Warning: set address range perms: large range (undefined) Warning: set address range perms: large range (noaccess) Warning: set address range perms: large range (undefined) Warning: set address range perms: large range (noaccess)                                  /* The real problem */ Stack overflow in thread 1: can't grow stack to Process terminating with default action of signal 11 (SIGSEGV): dumping core    Access not within mapped region at address    at vfprintf (printf-parse.h:99)  If you believe this happened as a result of a stack  overflow in your program's main thread (unlikely but  possible), you can try to increase the size of the  main thread stack using the --main-stacksize= flag.  The main thread stack size used in this run was Stack overflow in thread 1: can't grow stack to Process terminating with default action of signal 11 (SIGSEGV)  Access not within mapped region at address    at _vgnU_freeres (vg_preloaded.c:58)  If you believe this happened as a result of a stack  overflow in your program's main thread (unlikely but  possible), you can try to increase the size of the  main thread stack using the --main-stacksize= flag.  The main thread stack size used in this run was HEAP SUMMARY:     in use at exit: bytes in 43 blocks   total heap usage: 72 allocs, 29 frees, bytes allocated Searching for pointers to 43 not-freed blocks Checked bytes LEAK SUMMARY:    definitely lost: 0 bytes in 0 blocks    indirectly lost: 0 bytes in 0 blocks      possibly lost: 0 bytes in 0 blocks    still reachable: bytes in 43 blocks         suppressed: 0 bytes in 0 blocks Reachable blocks (those to which a pointer was found) are not shown. To see them, rerun with: --leak-check=full --show-reachable=yes ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from 4) used_suppression:      4 dl-hack3-cond-1 ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from 4)  /* SEGFAULT */ Erreur de segmentation  kmkz@...z:/home$ ls  30M -rw-------  1 kmkz       kmkz        36M juin  30             // my cheer core dump    Once this core dump generated, I made a quick research with GDB-PEDA ( as a root user now):   root@...z:/tmp# gdb -q -c [New LWP Core was generated by `'. Program terminated with signal 11, Segmentation fault. #0  in ?? () gdb-peda$ i s #0  in ?? () Cannot access memory at address    root@...z:/tmp# gdb -q /bin/dash  [New LWP Core was generated by `'. Program terminated with signal 11, Segmentation fault. #0  __find_specmb (format=<optimized out>) at printf-parse.h:99 99      printf-parse.h: Aucun fichier ou dossier de ce type.  gdb-peda$ checksec CANARY     : disabled FORTIFY     : disabled NX             : ENABLED PIE            : disabled RELRO       : disabled  gdb-peda$ x/i $rip =>       call   <strchrnul>  gdb-peda$ start warning: no loadable sections found in added symbol-file system-supplied DSO at [----------------------------------registers-----------------------------------] RAX: 0x1c RBX: 0x0 RCX: (mov    QWORD PTR RDX: --> ("/bin/dash") RSI: 0x1 RDI: (push   rbx) RBP: 0x0 RSP: --> (hlt    ) RIP: (<__libc_start_main@plt>: jmp    QWORD PTR        # <__libc_start_main@....plt>) R8 : (repz ret ) R9 : (push   rbp) R10: 0xd ('\r') R11: 0x4 R12: (xor    ebp,ebp) R13: --> 0x1 R14: 0x0 R15: 0x0 EFLAGS: (carry parity adjust zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------]    <read@plt>: jmp    QWORD PTR        # <read@....plt>    <read@...+6>:       push   0x2c    <read@...+11>:      jmp    => <__libc_start_main@plt>:    jmp    QWORD PTR        # <__libc_start_main@....plt>  | <__libc_start_main@...+6>:  push   0x2d  | <__libc_start_main@...+11>: jmp     | <memcmp@plt>:       jmp    QWORD PTR        # <memcmp@....plt>  | <memcmp@...+6>:     push   0x2e  |->   <__libc_start_main@...+6>:      push   0x2d        <__libc_start_main@...+11>:     jmp           <memcmp@plt>:   jmp    QWORD PTR        # <memcmp@....plt>        <memcmp@...+6>: push   0x2e                                                                   JUMP is taken [------------------------------------stack-------------------------------------] --> (hlt    ) --> --> 0x1c --> 0x1c --> 0x1 --> ("/bin/dash") --> 0x0 --> ("ORBIT_SOCKETDIR=/tmp/orbit-root") --> [------------------------------------------------------------------------------] Legend: code, data, rodata, value  Temporary breakpoint 1, in __libc_start_main@plt () gdb-peda$ vmmap Start              End                Perm      Name                 r-xp      /bin/dash                 rw-p      /bin/dash                 rw-p      [heap] r-xp      ---p      r--p      rw-p      rw-p      mapped r-xp      rw-p      mapped rw-p      mapped r--p      [vvar] r-xp      [vdso] r--p      rw-p      rw-p      mapped rw-p      [stack] r-xp      [vsyscall]   gdb-peda$ bt #0  in __libc_start_main@plt () #1  in ?? () #2  in ?? () #3  in ?? () #4  in ?? () #5  in ?? () #6  in ?? ()  It appear that the binary has only the NoeXecutable protection (and ASLR) with an interesting buffer overflow... that's why I'd like to know how to make my small contribution on this subject.  Finaly, you can reproduce this bug easily whit a (so basic) Perl line in your dash shell :  `perl -e '$i=0;while($i<=  Hoping to read you soon,  Best regards,  Mr BOURBON Jean-marie (kmkz)   BOURBON Jean-marie  ARMATURE Technologies Fixe : +33 1 44 51 92 61 Fax : +33 9 85 69 68 85 www.armaturetech.com 55 rue de la Boétie, Paris  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      