  oss-security - CVE-Request -- openEMR v. -- Multiple stored/reflecting XSS-  and SQLi vulns            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sun, 22 Mar From: Steffen Rรถsemann To: oss-security@...ts.openwall.com Subject: CVE-Request -- openEMR v. -- Multiple stored/reflecting XSS-  and SQLi vulns  Hi Steve, Josh, vendors, list.  I found multiple reflecting/stored XSS- and SQLi-vulns in electronic health records and medical practice application openEMR v.  ================== Technical Details: ==================  All below described vulnerabilities can only be exploited by an already authenticated user.  ===================== SQL injection vulnerabilities =====================  An SQL injection vulnerability can be found in the facility_admin.php file and can be abused by an attacker via the fid-parameter.  Exploit-Example:  http://    Another (blind) SQL injection vulnerability resides in the appt_encounter_report.php an can be abused by an attacker by modifying a the form_facility-parameter in a POST-request.  Exploit-Example:  POST HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (X11; Linux Accept: Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: Cookie: Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length:    The last (blind) SQL injection vulnerability resides in the appointments_report.php-file and can be as well abused by an attacker via crafting own SQL statements in the form_facility-parameter in a POST request.   Exploit-Example:  POST HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 (X11; Linux Accept: Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: Cookie: Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length:    ============== XSS vulnerabilities ==============  A reflecting XSS-vulnerability can be found in user_admin.php via the id-parameter.  Exploit-Example:  http://    A stored XSS vulnerability resides in add_edit_event.php via the input-field "form_comments" and is executed in appointments_report.php.   Exploit-Example:  <script>alert(document.cookie)</script>   Can I get a CVE-ID / CVE-IDs for my findings?  Thank you very much.  Greetings from Germany.  Steffen Rรถsemann   References:  [1] http://www.open-emr.org [2] [3] http://www.open-emr.org/wiki/index.php/OpenEMR_Patches [4]   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      