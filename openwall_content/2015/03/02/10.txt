  oss-security - Re: CVE request: Maven downloads JARs via HTTP            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 02 Mar From: Simon McVittie <smcv@...ian.org> To: oss-security@...ts.openwall.com Subject: Re: CVE request: Maven downloads JARs via HTTP  On gremlin@...mlin.ru wrote: > On Martin Prpic wrote: >  >  >>> "Maven Central can now be accessed via HTTPS. I think the >  >>> default configuration should be switched to use that, rather >  >>> than the current unsecured HTTP transport." >  >  >> Does it use any sort of package signing and signature >  >> verification? >  >  > Seeing as the patch only does s/http/https/, >  > Obviously, that doesn't really help.  It's a start, at least... it tells you that this was a reply to your request, made by someone controlling the corresponding private key for a "valid" certificate for Maven Central's hostname. Whether that's enough depends on your threat model.  If the attacker capabilities assumed by your threat model include "can obtain arbitrary certs from a widely-trusted CA" or "has obtained Maven Central's private key" then no, it doesn't help. Similarly, if the attacker's capabilities include "can upload arbitrary packages to Maven Central" (I assume there's some sort of access control so the author of log4j can upload new log4j versions but not new Eclipse versions, or whatever?) then it doesn't help.  However, if the attacker is assumed to be able to do neither of these things (think "man-in-the-middle on the same coffee shop wifi as you" rather than "the NSA") then this is enough.  An end-to-end integrity check from the original publisher to the consumer would prevent more attacks, but would also be harder to deploy (it requires action from each publisher, verification at each consumer, and a way to determine whether publisher X is authorized to publish package Y); protecting against trivial attacks is not as good as protecting against sophisticated attacks, but seems considerably better than not protecting against anything at all.      S   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      