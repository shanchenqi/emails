  oss-security - Re: validation on update            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 03 Mar From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: validation on update  On AM, gremlin@...mlin.ru wrote: > On Simon McVittie wrote: >  > An end-to-end integrity check from the original publisher to >  > the consumer would prevent more attacks, but would also be >  > harder to deploy (it requires action from each publisher, >  > Running `gpg --detach-sign < package.tar.gz > package.tar.gz.sig` > (or, better, `gpg -ba ...`) on each release isn't a big deal... >  >  > verification at each consumer, >  > Running `gpg --verify package.tar.gz.sig package.tar.gz` will do > that just perfectly. And, when talking about automatic updates, > that should be included into the update procedure. >  >  > and a way to determine whether publisher X is authorized to >  > publish package Y); >  > `gpg --no-default-keyring --keyring /path/authors.pub --verify ...`  No but key distribution and management is a real problem. How does upstream sign all these things securely but also conveniently on their end? How do they store the key (Hardware Security Module?). How does upstream distribute the key (just HTTPS website? in the maven source? hope nobody spoofs them.  There's a simple reason most projects don't sign software, key management is such a pain (how do you security backup something that should only exist in one spot? Encrypt it? Ok how do you secure that key... Not saying it shouldn't be done, but just pointing out it's a little more work than running "gpg --sigh".  Does anyone have any good guidelines/procedure docs on this stuff? E.g. which HSM devices support GPG, etc?  --  Kurt Seifried -- Red Hat -- Product Security -- Cloud PGP A90B 66BF   Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      