  oss-security - Re: Linux kernel handling of IPv6 temporary addresses            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 04 Dec From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Greg KH <gregkh@...uxfoundation.org>, kargig@...d.gr Subject: Re: Linux kernel handling of IPv6 temporary addresses  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, Greg KH wrote: > On Wed, Nov 14, at George Kargiotakis > wrote: >> Hello all, >>  >> Due to the way the Linux kernel handles the creation of IPv6 >> temporary addresses a malicious LAN user can remotely disable >> them altogether which may lead to privacy violations and >> information disclosure. >>  >> By default the Linux kernel uses the 'ipv6.max_addresses' option >> to specify how many IPv6 addresses an interface may have. The  >> 'ipv6.regen_max_retry' option specifies how many times the kernel >> will try to create a new address. >>  >> Currently, in net/ipv6/addrconf.c,lines there is no  >> distinction between the events of reaching max_addresses for an  >> interface and failing to generate a new address. Upon reaching >> any of the above conditions the following error is emitted by the >> kernel times 'regen_max_retry' (default value 3): >>  >> ipv6_create_tempaddr(): retry temporary address  >> regeneration ipv6_create_tempaddr(): retry >> temporary address regeneration >> ipv6_create_tempaddr(): retry temporary address regeneration >>  >> After 'regen_max_retry' is reached the kernel completely >> disables temporary address generation for that interface. >>  >> ipv6_create_tempaddr(): regeneration time exceeded >> - disabled temporary address support >>  >> specifies that disabling temp_addresses MUST happen >> upon failure to create non-unique addresses which is not the >> above case. Addresses would have been created if the kernel had a >> higher 'ipv6.max_addresses' limit. >>  >> A malicious LAN user can send a limited amount of RA prefixes and >> thus disable IPv6 temporary address creation for any Linux host. >> Recent distributions which enable the IPv6 Privacy extensions by >> default, like Ubuntu and are vulnerable to such >> attacks. >>  >> Due to the kernel's default values for valid and >> preferred lifetimes, this scenario may even occur under >> normal usage when a Router sends both a public and a ULA prefix, >> which is not an uncommon scenario for IPv6. 16 addresses are not >> enough with the current default timers when more than 1 prefix is >> advertised. >>  >> The kernel should at least differentiate between the two cases >> of reaching max_addresses and being unable to create new >> addresses, due to DAD conflicts for example. >  > Have you discussed this with the upstream Linux kernel networking  > developers? >  > thanks, >  > greg k-h   Sounds like this needs a CVE, is it correct that: an attacker can create a bunch of RA prefixes thus filling up the # of allowed IPv6 addresses for an interface, preventing any more IPv6 addresses from being assigned to that interface? In other words an attack over the local network resulting in a DoS condition.  - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  =JrA2 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      