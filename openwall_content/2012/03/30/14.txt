  oss-security - Re: glibc crypt(3), crypt_r(3), PHP crypt() may use alloca()            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 30 Mar From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: Jeff Law <law@...hat.com> Subject: Re: glibc crypt(3), crypt_r(3), PHP crypt() may use alloca()  Tomas - thank you for notifying oss-security of this. Jeff - thank you for working on a fix.  On Fri, Mar 30, at Tomas Hoger wrote: > FYI, a fix just got committed upstream,  Wow.  I thought we'd need to notify glibc developers more specifically for this to happen, which I did not do yet for lack of decision on what to do with the return value.  > which makes glibc use malloc > instead of alloca for long inputs and hence possibly make crypt() return > NULL on errors: >  > >  > Upstream discussion: >  > >  I think the NULL returns are a bad idea, and this aspect doesn't appear to have been discussed.  We may want to check if there were other cases where glibc's crypt() could return NULL, then propose a separate patch on libc-alpha.  So far, the "*0" / "*1" approach appears to be best:   Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      