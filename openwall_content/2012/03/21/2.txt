  oss-security -  / Incorrect loop construct and numeric  overflow in libzip            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 21 Mar From: Timo Warns <Warns@...-Sense.DE> To: oss-security@...ts.openwall.com Subject:  / Incorrect loop construct and numeric  overflow in libzip  The following two issues in libzip have been handled via distros@...openwall.org. Distros and the libzip developers were informed on An update of libzip has become available on the appointed coordinated release date. The PHP and zipruby developers have been informed before but have not released updates yet.  libzip (version <= has two vulnerabilities that may lead to a heap overflow or an information leak via corrupted zip files. PHP (versions and <= and the Ruby binding zipruby (version <= are also affected as they include copies of affected libzip versions.  *      libzip (version <= uses an incorrect loop construct, which can     result in a heap overflow on corrupted zip files.          On opening a zip file with zip_open, libzip reads in the number of     directory entries in the function _zip_readcdir in zip_open.c:         /* number of cdir-entries */        nentry = _zip_read2(&cdp);      Subsequently, memory for directory entries is allocated via     _zip_cdir_new (in zip_dirent.c) based on the number of directory     entries:         if ((cd->entry=(struct zip_dirent *)malloc(sizeof(*(cd->entry))*nentry))      If the number of directories in the zip file is set to 0, 0 bytes of     memory are allocated.      _zip_readcdir finishes with reading in the directory entries in     a posttest do-while loop:         do {            if ((_zip_dirent_read(cd->entry+i, fp, bufp, &left, 0, error)) < 0) {              ...        } while (i<cd->nentry && left > 0);      If cd->entry points to 0 bytes of allocated memory, _zip_dirent     writes beyond the allocated memory.  *      libzip (version <= has a numeric overflow condition, which,     for example, results in improper restrictions of operations within     the bounds of a memory buffer (e.g., allowing information leaks).      On opening a zip file with zip_open, libzip reads in the size and the     offset of the central directory structure in the function _zip_readcdir     in zip_open.c:         cd->size = _zip_read4(&cdp);        cd->offset = _zip_read4(&cdp);      libzip performs a consistency check on these values, but does not     anticipate an integer overflow:         if (cd->offset+cd->size > buf_offset + (eocd-buf)) {      On an integer overflow, libzip continues to handle the zip file, which,     for example, can result in improper restriction of operations within the     bounds of a memory buffer.  Cheers, Timo  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      