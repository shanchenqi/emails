  oss-security - Re: CVE request: kernel: proc: clean up and fix /proc/<pid>/mem handling            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 23 Jan From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: CVE request: kernel: proc: clean up and fix /proc/<pid>/mem handling  On Sun, Jan 22, at Solar Designer wrote: > On Wed, Jan 18, at Eugene Teo wrote: > > This changes it to do the permission checks at open time, and instead of > > tracking the process, it tracks the VM at the time of the open.  That > > simplifies the code a lot, but does mean that if you hold the file > > descriptor open over an execve(), you'll continue to read from the _old_ VM. >  > I see it in the revised code, but I don't get it.  What does "the old > VM" mean after an execve()?  The code stores the mm pointer in > file->private_data, but is this stored pointer even valid after an > execve()?  (The code blindly assumes so, only checking for non-NULL.)  OK, here's my current understanding: the old VM is preserved (refcounted) precisely because someone holds /proc/<pid>/mem open. The new mem_open() calls mm_access(), which calls get_task_mm(). So at the time of mem_read() / mem_write() the pointer is valid even if the process passed an execve().  However, I think this opens up a new security problem (albeit a relatively minor one): RLIMIT_NPROC * RLIMIT_AS bypass.  Previously, a user with RLIMIT_NPROC set was sort of limited to consuming this much memory (plus shm and plus various in-kernel data structures related to the user's processes).  Now the user's memory consumption via processes' address space is not limited by RLIMIT_NPROC anymore.  Am I missing something?  If not, I think we need to patch that.  Maybe have RLIMIT_NPROC apply even to such "zombie VMs" (confusing and tricky).  Maybe re-consider the entire approach to fixing the original issue addressed with commit That is, revert this commit and fix the issue differently (likely by adding full privilege checks at time of read and write - in addition to re-introducing the self_exec_id checks, which are also needed even along with full checks of the caller's privileges).  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      