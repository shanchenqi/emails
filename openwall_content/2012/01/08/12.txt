  oss-security - Re: Malicious devices & vulnerabilties            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 8 Jan From: Alistair Crooks <agc@...bsd.org> To: oss-security@...ts.openwall.com Cc: Florian Weimer <fw@...eb.enyo.de> Subject: Re: Malicious devices & vulnerabilties  On Mon, Jan 09, at Eugene Teo wrote: > On PM, Florian Weimer wrote: > > * Xi Wang: > >  > >> I am wondering where to draw the line.  Should such device drivers > >> be considered vulnerable or not?  Thanks. > >  > > I think they should be considered vulnerable.  Some applications need > > some robustness to attacks even from the local console (e.g., student > > computer rooms). > >  > > USB is also a popular transport in many air-gapped environments. >  > I would consider them vulnerable with low security impacts. If you are > fixing such issues, do post them to the list.  One very interesting datapoint here is Antti Kantee's rump subsystem in NetBSD  	http://www.netbsd.org/docs/rump/ 	http://blog.netbsd.org/tnf/entry/runnable_userspace_meta_programs_in  which allows for userspace-mounting of devices and filesystems thereon.  Unknown provenance USB sticks are one of the use cases mentioned.  	+ rump_msdos:  USB sticks with FAT file systems are a common 	sight.  Mounting an untrusted image from removable media with 	the file system driver running in the kernel is risky in many 	ways:  inopportune unplugging of the media or a corrupted file 	system may have adverse effects such as system crashes or 	worse.  By using the rump_msdos command instead of 	mount_msdos, the file system service runs in userspace and is 	accessed via puffs.  This isolates the main kernel from any 	resulting problems such as buffer overflows.  	The usage of mount_msdos and rump_msdos are equivalent...  If USB is a transport in air-gapped environments, I personally have a concern with that. A good thing airgaps aren't used for anything in RL, right? ;-)  Regards, Alistair  PS. Obvious disclaimer - I am biased. PPS. Just reading REAMDE right now -- Alistair Crooks {agc,security-officer}@...BSD.org  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      