  oss-security - Re: weird crypt-sha* in DragonFly BSD            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 16 Jan From: Solar Designer <solar@...nwall.com> To: dillon@...llo.backplane.com, Nolan Lum Cc: oss-security@...ts.openwall.com, magnum <john.magnum@...hmail.com> Subject: Re: weird crypt-sha* in DragonFly BSD  Matt -  magnum proceeded to implement support for DragonFly's SHA-2 based hashes in John the Ripper - to hopefully make you reconsider sooner rather than later.  While doing so, he ended up finding a nasty bug that I previously did not notice: the code uses sizeof(magic) instead of strlen(magic), where "magic" is a pointer.  Thus, the resulting hashes are non-portable between 32-bit and 64-bit systems, and additionally they may be non-portable between different 64-bit versions/builds of DragonFly (let alone to/from other systems).  While this lack of portability might make some attacks on stolen/leaked hashes more difficult (it certainly is an issue that we have to consider when adding support for these hashes to JtR), I doubt that this is what you want.  I strongly recommend that you revert to FreeBSD's MD5-crypt ASAP.  More detail here:   For now, we'll support only the 32-bit flavor of these hashes in JtR. If you keep them in DragonFly for much longer, we'll likely do something about supporting the 64-bit flavors as well.  The speeds on one CPU core (in a  Reference (heavily optimized and parallelized FreeBSD MD5-crypt, 12 hashes computed in parallel):  Benchmarking: FreeBSD MD5 [SSE2i 12x]... DONE Raw:    c/s real, c/s virtual  DragonFly's alternatives:  Benchmarking: DragonFly BSD w/ bug (32-bit) [OpenSSL  DONE Many salts:     c/s real, c/s virtual Only one salt:  c/s real, c/s virtual  Benchmarking: DragonFly BSD w/ bugs (32-bit) [OpenSSL  DONE Many salts:     c/s real, c/s virtual Only one salt:  c/s real, c/s virtual  That's 65 times faster cracking - before we even started optimizing.  8-way OpenMP on (8 cores), reference:  Benchmarking: FreeBSD MD5 [SSE2i 12x]... (8xOMP) DONE Raw:    c/s real, c/s virtual  c/s is possible with Intel's compiler, but I did not bother here.)  DragonFly's alternatives:  Benchmarking: DragonFly BSD w/ bug (32-bit) [OpenSSL (8xOMP) DONE Many salts:     c/s real, c/s virtual Only one salt:  c/s real, c/s virtual  Benchmarking: DragonFly BSD w/ bugs (32-bit) [OpenSSL (8xOMP) DONE Many salts:     c/s real, c/s virtual Only one salt:  c/s real, c/s virtual  That's roughly a 50x speedup - again, for unoptimized DragonFly hashing vs. optimized FreeBSD hashing.  With full optimizations, the difference will be more like for the flavor.  Please let us know if you're going to do anything about these issues.  Thanks,  Alexander  On Tue, Nov 15, at Solar Designer wrote: > Hi, >  > Matthew - when I read that DragonFly moved to using for > passwords by default, I thought this was referring to the based > flavor of Ulrich Drepper's SHA-crypt.  This would not be the best choice > to make, in my opinion, but it would not be that bad.  However, I just > found this: >  > http://gitweb.dragonflybsd.org/dragonfly.git/tree/HEAD:/lib/libcrypt >  > Are these and/or files actually in use? > I hope not...  They do not include any password stretching, resulting in > password hashes that are much quicker to crack than MD5-crypt's. >  > There's also minor weirdness in the code - such as two local pointer > variables being declared static seemingly for no reason, and only > "final" but not "ctx" being zeroized in the end.  But even this lack of > proper cleanup is very minor compared to the lack of stretching. >  > Oh, also the "$3$" prefix was apparently previously used for NTLM: >  > http://en.wikipedia.org/wiki/Crypt_(Unix)#NT_Hash_Scheme >  > "FreeBSD used the $3$ prefix for this." >  > http://search.cpan.org/~zefram/Authen-Passphrase/lib/Authen/Passphrase/NTHash.pm >  > "... crypt string must consist of "$3$$" (note the extra "$") followed > by the hash in lowercase hexadecimal." >  > BTW, I looked at DragonFly's code while analyzing a more subtle issue > with Ulrich's SHA-crypt: >  > >  > I thought that maybe you reimplemented it in a better fashion avoiding > that issue, but I found this... %-) >  > Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      