  oss-security - Re: *BSD's DES-based crypt(3) treats all invalid salt chars as '.'            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 2 Jan From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: Christos Zoulas <christos@...las.com> Subject: Re: *BSD's DES-based crypt(3) treats all invalid salt chars as '.'  Christos Zoulas fixed the out of bounds read below in NetBSD (for NetBSD 6).  On Tue, Nov 15, at Solar Designer wrote: > Speaking of NetBSD, it also appears to have out of bounds array reads on > salt characters with the 8th bit set: >  > static unsigned char ascii-64 => */ > [...] > 		/* get iteration count */ > 		num_iter = 0; > 		for (i = 4; --i >= 0; ) { > 			if ((t = (unsigned char)setting[i]) == '\0') > 				t = '.'; > 			encp[i] = t; > 			num_iter = (num_iter<<6) | a64toi[t]; > 		} > [...] > 	salt = 0; > 	for (i = salt_size; --i >= 0; ) { > 		if ((t = (unsigned char)setting[i]) == '\0') > 			t = '.'; > 		encp[i] = t; > 		salt = (salt<<6) | a64toi[t]; > 	} >  > This has no security impact that I can see, though.  Perhaps with PHP > safe_mode and the like it could be used to read data beyond array > bounds, but unless the order of variables in .bss is heavily changed by > the compiler or linker there's nothing interesting to read in the > bytes following a64toi[], and it would not result in a crash either. >  > Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      