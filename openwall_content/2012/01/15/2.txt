  oss-security - Re: CVE affected for PHP ?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 14 Jan From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Nicolas GrĂŠgoire <nicolas.gregoire@...rri.fr> Subject: Re: CVE affected for PHP ?  On PM, Nicolas GrĂŠgoire wrote: >> Right but the script has to have the line >> <sax:output href="0wn3d.php" method="text"> > Wrong. > > The PHP code only has to call transformToXML() after having loaded the > malicious XSLT code via importStylesheet(). The XML data itself is > irrelevant for this bug and the "sax:output" tag isn't in the PHP script > but in the XSLT stylesheet provided by the attacker. > > # LOAD XML FILE  > $XML = new DOMDocument();  > $XML->loadXML( $sXml );  > > # LOAD XSLT FILE  > $XSL = new DOMDocument();  > $XSL->loadXML( $sXsl ); // Content of $xXsl may be untrusted ! > > # START XSLT  > $xslt = new XSLTProcessor();  > $xslt->importStylesheet( $XSL ); > > # TRASNFORM & PRINT  > print $xslt->transformToXML( $XML ); // File creation ! > > Nicolas > So the attacker can control the output file name/location via a malformed input from the attacker only? This would have been good to have in your original info (we could have avoided this back and forth). Can you provide a reproducer (vuln script and a malicious input) that shows this in action (e.g. creates a local php file).  --   -- Kurt Seifried / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      