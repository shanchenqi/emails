  oss-security - Re: weird crypt-sha* in DragonFly BSD            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 20 Jan From: Solar Designer <solar@...nwall.com> To: "Samuel J. Greear" <sjg@...sjg.com>, dillon@...llo.backplane.com, 	Nolan Lum security@...gonflybsd.org Cc: oss-security@...ts.openwall.com, magnum <john.magnum@...hmail.com> Subject: Re: weird crypt-sha* in DragonFly BSD  Hi Samuel,  Thank you for taking care of this issue!  I just took a look at:  crypt(3) - Switch to the Linux implementation  This mostly looks good to me, but I got a few comments:  1. You will want to be aware of this issue:  glibc crypt(3), crypt_r(3), PHP crypt() may use alloca()  There's no agreed upon fix yet (use "thread-next" to see some ideas), but I think all distros/projects using Ulrich's SHA-crypt will need to deal with this issue eventually.  I'll try to remember to inform you once we choose to do anything specific.  2. Instead of:  + * The deprecated functions are somehow sensitive to the + * order of this crypt_types array as well as their respective "name" members. + * + * In order to ensure that both existing passwords will continue to work and + * that new passwords will be more secure by using the new algorithms even + * without updating the existing login.conf, this array is now scanned + * backwards. This could be reverted in the future when the deprecated SHA + * functionality is removed.  how about using the more reliable approach proposed by magnum here? -   As you can see, he has even spent time to identify the specific 64-bit magic values.  Of course, you'll need to double-check them (such as by applying the patch and testing logins to existing accounts with both and on a 64-bit DragonFly system.)  3. It would be nice for upgraded systems to automatically switch from to in login.conf - perhaps there's some on-upgrade hook that you can use for this?  no longer means the same thing anyway; there's no good reason for a percentage of DragonFly systems to temporarily switch from one based algorithm to another just for them to hopefully switch to a little bit later (when the admin does that).  And, what's worse, many systems will end up stuck in this intermediary state.  Thanks again,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      