  oss-security - Re: memory allocator upstream patches            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 07 Jun From: Jan Lieskovsky <jlieskov@...hat.com> To: Xi Wang <xi.wang@...il.com>, Kurt Seifried <kseifried@...hat.com> CC: oss-security@...ts.openwall.com Subject: Re: memory allocator upstream patches   Hello Xi, Kurt,     thank you for your report and notification.  It doesn't look that the issues below have got CVE identifiers assigned yet. Thus assuming your report was also a simultaneous request for the identifiers, not just notification, correct? Can you confirm that?  Kurt,     once confirmed, could you please allocate CVE ids for these flaws? (me not sure if the 'bionic' one case below being open-source, but for the rest the request(s) look valid).  Thank you && Regards, Jan. -- Jan iankko Lieskovsky / Red Hat Security Response Team  On AM, Xi Wang wrote: > Hi, > > I would like to share some upstream patches of two specific types > of memory allocator vulnerabilities. > > * malloc(n) size overflow. > > Consider the following code pattern. > > 	n = read_from_input(); > 	p = malloc(n); > 	if (p) > 		memcpy(p, input_buffer, n); > > Some malloc() implementations internally perform alignment/padding > for a large n, and the allocation size wraps around to a small > integer.  That means they would allocate a smaller buffer than > expected, leading to buffer overflow. > > * calloc(n, size) size overflow. > > Some calloc() implementations don't check for n * size multiplication > overflow, and would allocate a smaller buffer than expected, > leading to buffer overflow. > > The two types of vulnerabilities can be easily reproduced using > malloc(-1) and calloc(BIG-VALUE, BIG-VALUE).  If the return values > are non-null, the implementations are likely to be problematic. > > See a more complete list at: > > > > Below are some recent upstream fixes. > > > Boehm-Demers-Weiser GC (libgc) > ============================== > > malloc() size overflow, upstream patch (revised by the developers): > > > > The bug in mallocx.c was found by Ivan Maidanski. > > calloc() size overflow, upstream patch (revised by the developers): > > > > > > > bionic (Android libc) > ===================== > > malloc() size overflow, upstream patch (revised by the developers): > > > > NB: this vulnerability could only be triggered in debug mode, the > same as calloc() size overflow. > > > nedmalloc > ========= > > malloc() size overflow, upstream patch: > > > > calloc() size overflow, upstream patch: > > > > > Hoard > ===== > > http://www.hoard.org/ > > malloc() size overflow, confirmed by the developers via email in > this March, no upstream patch available (since 3.8). > > calloc() size overflow, which should only happen on non-glibc > platforms (e.g., Mac OS X).  It has not been confirmed by the > developers, but one can easily reproduce it. > > > boost::pool > =========== > > ordered_malloc() (similar to calloc()) size overflow, upstream patch: > > > > > - xi   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      