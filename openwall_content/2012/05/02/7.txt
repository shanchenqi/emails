  oss-security - Re: weak use of crypto in python-elixir can lead to  information disclosure (CVE and peer review request)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 2 May From: Vincent Danen <vdanen@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: weak use of crypto in python-elixir can lead to  information disclosure (CVE and peer review request)  * Florian Weimer wrote:  >* Florian Weimer: > >> * Vincent Danen: >> >>>>And you can group by encrypted column values in the database.  That's >>>>why I'm not sure if it's actually possible to address this issue in a >>>>satisfying manner. >>> >>> So the encryption can be more fine-grained than just per-table?  You can >>> also do it per-column?  If that's the case, this does sound a lot uglier >>> to deal with. >> >> This test case suggests to me that you have to specify the list of >> encrypted columns explicitly: >> >> <http://elixir.ematia.de/trac/browser/elixir/trunk/tests/test_encryption.py> >> >> Based on this example, it's not clear to me if the current >> implementation supports get_by with an encrypted column.  If this is a >> feature which needs preserving, there is no apparent way around >> convergent encryption. > >So it turns out that this passes the assert: > >        p = >        assert p.name == 'Jonathan LaCour' > >But this fails because p is None: > >        p = >        assert p.name == 'Jonathan LaCour' > >This suggests to me that get_by on an encrypted column is not actually >supported. > >The documentation doesn't describe which queries are supported: ><http://elixir.ematia.de/apidocs/elixir.ext.encrypted.html>  Thanks, Florian.  Seems like this thing is a bit messy.  I did post your questions to the Red Hat bug, and there were some developer responses there.  The long and short of it is that, despite what you've brought up, they feel the fix is still appropriate.  (for this interested in the details).  --  Vincent Danen / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      