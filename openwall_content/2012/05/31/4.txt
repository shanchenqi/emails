  oss-security - SQL Injection Vulnerability in Ruby on Rails            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 31 May From: Aaron Patterson <tenderlove@...y-lang.org> To: oss-security@...ts.openwall.com Subject: SQL Injection Vulnerability in Ruby on Rails  SQL Injection Vulnerability in Ruby on Rails  There is a SQL injection vulnerability in Active Record, version 3.0 and later. This vulnerability has been assigned the CVE identifier  Versions Affected:  and ALL later versions Not affected:       Fixed Versions:      Impact  ------  Due to the way Active Record handles nested query parameters, an attacker can use a specially crafted request to inject some forms of SQL into your application's SQL queries.  All users running an affected release should upgrade immediately.  Impacted code directly passes request params to the `where` method of an ActiveRecord class like this:      Post.where(:id => params[:id]).all  An attacker can make a request that causes `params[:id]` to return a specially crafted hash that will cause the WHERE clause of the SQL statement to query an arbitrary table with some value.  Releases  --------  The FIXED releases are available at the normal locations.   Workarounds  -----------  This issue can be mitigated by casting the parameter to an expected value.  For example, change this:      Post.where(:id => params[:id]).all  to this:      Post.where(:id => params[:id].to_s).all  Patches  -------  To aid users who aren't able to upgrade immediately we have provided patches for the two supported release series.  They are in git-am format and consist of a single changeset.  We have also provided a patch for the 3.0 series despite the fact it is unmaintained.  * 3-0-params_sql_injection.patch - Patch for 3.0 series  * 3-1-params_sql_injection.patch - Patch for 3.1 series  * 3-2-params_sql_injection.patch - Patch for 3.2 series   Please note that only the  3.1.x and 3.2.x series are supported at present.  Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases.  Credits  -------   Thanks to Ben Murphy for reporting the vulnerability to us, and to Chad Pyne of thoughtbot for helping us verify the fix.  --  Aaron Patterson http://tenderlovemaking.com/  View attachment "3-0-params_sql_injection.patch" of type "text/plain" bytes)  View attachment "3-1-params_sql_injection.patch" of type "text/plain" bytes)  View attachment "3-2-params_sql_injection.patch" of type "text/plain" bytes)  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      