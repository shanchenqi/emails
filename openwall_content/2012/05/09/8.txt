  oss-security - Re: CVE Request -- kernel: futex: clear robust_list  on execve            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 9 May From: Petr Matousek <pmatouse@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: CVE Request -- kernel: futex: clear robust_list  on execve  On Tue, May 08, at Solar Designer wrote: > On Tue, May 08, at Solar Designer wrote: > > Indeed, execve() may make the new process relatively privileged (SUID, > > SGID, fscaps), and thus being able to write into its memory is a > > security issue.  However, it appears that robust_list (and its compat > > counterpart) is only used for such writes when the process itself is > > exiting (with the aim being to notify other threads sharing the same > > mm).  If so, the question is whether and how writes into an exiting > > process' memory may be exploited.  We're already in do_exit() at this > > point, and it's just a few lines before we detach from and likely > > destroy the mm.  Well, if that process itself is multi-threaded (and > > other threads are not exiting yet), it possibly can be exploited > > (through affecting those other threads). >  > describes that the > bug was inadvertently triggered in normal usage of certain programs, and > how it was rather difficult to figure out.  My question is: was exit of > a multi-threaded program involved and relevant?  If not, then there must > be something wrong with my reasoning, because I don't currently see how > the bug may otherwise have visible consequences.  In this case single-threaded (privileged) Xorg was run with a stale robust list pointer that accidentally fell into MMIO area (see how ioperm() is implemnted on IA64). Because of the way ill-sized MMIO requests (exit_robust_list()) were handled in qemu-dm, the result was guest crash (all of this happened in Xen guest).  --  Petr Matousek / Red Hat Security Response Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      