  oss-security - Re: PHP-CGI query string parameter vulnerability  / CERT            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 9 May From: Vincent Danen <vdanen@...hat.com> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org, thoger@...hat.com, security@....net Subject: Re: PHP-CGI query string parameter vulnerability  / CERT  Would probably be useful to have cc'd s@....net so they're aware of the CVE assignments and the rationale behind them.  * Kurt Seifried wrote:  >-----BEGIN PGP SIGNED MESSAGE----- >Hash: SHA1 > >On PM, cve-assign@...re.org wrote: >>> The incomplete fix part seems to have got bit messy, at least >>> with respect to CVE assignment. >> >> The total number of CVE IDs should be 4. Comments below: >> >>> 1) Incorrect detection of = in query string, that made it >>> possible to bypass the fix using %3D.  This was addressed by: >> >>> -       if(*decoded_query_string == '-' && >>> strchr(decoded_query_string, '=') == NULL) { + >>> if(*decoded_query_string == '-' && strchr(query_string, '=') == >>> NULL) { >> >>> which is noted as Mitigation option 3 in De Eindbazen's blog. >>> Following the timeline / updates there, this should be what >>> triggered assignment. >> >> is for only this specific %3D fix listed as "1)" >> above. >> >> >>> 2) The fix from 1) did not address the problem for use cases >>> where "unsafe" wrapper script, similar to the one pointed out in >>> De Eindbazen's blog, is used.  It seems that was first mentioned >>> in Christopher Kunz's (php-security.net) blog mentioning that the >>> PHP re-fix is still incomplete, though it's questionable if this >>> is to be considered a PHP flaw.  Upstream warned about this >>> insecure wrapper script problem: >> >>> >> >>> and even added a fix / work around for it to PHP: >> >>> >> >>> >> This needs a separate CVE ID (different from both >> and MITRE is considering the "insecure wrapper >> script" to be a distributable product because the code has been >> available for some time on a public web site, and the (admittedly >> tiny) script codebase has apparently sometimes been copied and >> adapted for use at multiple web-hosting providers. >> >> The script codebase is, of course, open source. >> >> In many cases, MITRE would not bother to assign a CVE ID for a >> vulnerability in a "product" of this type (i.e., a product that is >> arguably not even packaged for distribution and does not even have >> a product name). However, in this case, the product and its >> vulnerability have become commonly recognized and discussed because >> of the connection to the other PHP-CGI issues. Therefore, a CVE >> name is useful. >> >> This can be temporarily called > >Please use for these wrapper script issues > > >>> 3) The fix from 1) only made PHP skip one php_getopt() call out >>> of two that are reachable in the CGI mode (the third php_getopt() >>> call is in the if (!cgi && !fastcgi) block).  As the consequence, >>> PHP was still parsing following arguments: >> >>> - -h / -? - this seems harmless, as makes PHP output usage info, >>> which triggers Internal Server Error in httpd - -T - this was >>> mentioned as DoS vector: >> >>> >>> >> >>>  The impact of this is rather limited as clients needs to consume >>> all generated output too keep this running.  May offer some >>> advantage of simple many requests DoS e.g. Keep-Alive is disabled >>> and there's per-IP connection limit. >> >> >>> This is upstream commit that was used in / >> >>> >> >>>  and this is correction from / >> >>> >> >>>  (both links are for PHP-5.3 branch commits). >> >> This one also needs a separate CVE ID (different from both >> and Compared to it >> apparently has the same "affected versions" relative to official >> upstream release numbers. However, the affected versions are >> different in PHP packages from multiple Linux distributions. In >> this situation, it seems best to have two separate CVE names >> and a new one) for the two different issues with >> php_getopt - in other words: >> >>   the vulnerability that exists when the php_getopt >> for cases 'c' 'n' 'd' 'b' and 's' is not skipped >> >>  the vulnerability that exists when the php_getopt >> for cases 'T' and 'h' is not skipped > >Please use for the cases 'T' and 'h' > >> If this is agreeable, we would like Red Hat to make the specific >> CVE assignments for the and >> labels referenced above. If, for any reason, Red Hat doesn't want >> to make these two CVE assignments, please let us know. >> > >- -- >Kurt Seifried Red Hat Security Response Team (SRT) >PGP: A90B 66BF > >-----BEGIN PGP SIGNATURE----- >Version: GnuPG (GNU/Linux) >Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/ > >XZQV6nn7rDjmtCxySaiy >=GhGj >-----END PGP SIGNATURE-----  --  Vincent Danen / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      