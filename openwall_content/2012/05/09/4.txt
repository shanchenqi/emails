  oss-security - Re: PHP-CGI query string parameter vulnerability  / CERT            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 9 May From: Tomas Hoger <thoger@...hat.com> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: Re: PHP-CGI query string parameter vulnerability  / CERT  On Sat, 5 May Solar Designer wrote:  > I guess most of you have heard of this one already, yet it should be > in here as well.  The original issue was tracked as CERT >  PHP and were released with an incomplete > fix, and apparently refers to that incomplete fix issue. >  > > > > http://www.reddit.com/r/PHP/comments/t3pr8/how_serious_is_this/ > http://www.reddit.com/r/netsec/comments/t4lxw/phpcgi_query_string_parameter_vulnerability_leads/ > > (in Russian)  The incomplete fix part seems to have got bit messy, at least with respect to CVE assignment.  Following issues were fixed in / that were not covered by / fixes.  1) Incorrect detection of = in query string, that made it possible to bypass the fix using %3D.  This was addressed by:  -       if(*decoded_query_string == '-' && strchr(decoded_query_string, '=') == NULL) { +       if(*decoded_query_string == '-' && strchr(query_string, '=') == NULL) {  which is noted as Mitigation option 3 in De Eindbazen's blog. Following the timeline / updates there, this should be what triggered assignment.  2) The fix from 1) did not address the problem for use cases where "unsafe" wrapper script, similar to the one pointed out in De Eindbazen's blog, is used.  It seems that was first mentioned in Christopher Kunz's (php-security.net) blog mentioning that the PHP re-fix is still incomplete, though it's questionable if this is to be considered a PHP flaw.  Upstream warned about this insecure wrapper script problem:   and even added a fix / work around for it to PHP:   3) The fix from 1) only made PHP skip one php_getopt() call out of two that are reachable in the CGI mode (the third php_getopt() call is in the if (!cgi && !fastcgi) block).  As the consequence, PHP was still parsing following arguments:  - -h / -? - this seems harmless, as makes PHP output usage info, which   triggers Internal Server Error in httpd - -T - this was mentioned as DoS vector:   The impact of this is rather limited as clients needs to consume all generated output too keep this running.  May offer some advantage of simple many requests DoS e.g. Keep-Alive is disabled and there's per-IP connection limit.   This is upstream commit that was used in /   and this is correction from /   (both links are for PHP-5.3 branch commits).   I'm not sure if there is any standard approach to using "incomplete fix" CVE(s) in cases like this.  Should only be used for 1), or for all changes upstream did in /  It should be noted that vendors updates released so far (Ubuntu, SUSE, RHEL) only have 1) fixed, and some (Ubuntu, SUSE) even mention  If is expected to be used for all fixes 1) - 3), there's probably a need for new non-upstream CVE to cover 3) and possibly 2) (as mentioned above, it's not really PHP flaw :).  CCing cve-assign@...re for a guidance.  --  Tomas Hoger / Red Hat Security Response Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      