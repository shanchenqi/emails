  oss-security - Re: CVE id request for links2            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Sat, 05 May From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: CVE id request for links2  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On PM, Nico Golde wrote: > Hi, * Kurt Seifried <kseifried@...hat.com> >> On PM, Nico Golde wrote: > [...] >>> I discovered some out of memory accesses in links2 graphics >>> mode that could be potentially used to run exploits. I fixed >>> them in links-2.6. For Debian Squeeze, I am sending this patch >>> that backports the fixes to Apply the patch and  >>> distribute patched packages links and links2 through  >>> security.debian.org. >>>  >>>  >>> [...] This patch fixes: >>>  >>> Buffer overflow when pasting too long text from clipboard to >>> dialog boxes (not remotely exploitable) >>  >> Can this result in code execution? >  > I am not sure about this one. For out of memory write in dip.c, my > guess is yes, it is basically possible to write past an allocated > buffer. Even though I can't tell you what data would reside in that > area.  Is it exploitable for anything beyond a crash?  > For the xbm decoder, the problem has basically been that > xbm_decode() did not indicate an error when decoding xbm images and > thus the callers would continue to operate on the parsed structures > even though the image is faulty.  Is it exploitable for anything beyond a crash?  > Cheers Nico   - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/  =+gp8 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      