  oss-security - Re: CVE id request: xlockmore vulnerability: local  access            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 17 Oct From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Ignatios Souvatzis <is@...bsd.org> Subject: Re: CVE id request: xlockmore vulnerability: local  access  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, Ignatios Souvatzis wrote: > Hello, >  > i'd like to request an CVE identifier for the following > vulnerability of xlockmore: >  > software:	xlockmore 5.0 to access:		terminal-local access to > user account OS/hardware:	all where sizeof(time_t) > sizeof(long > int) (e.g. NetBSD-6 on 32bit platforms) >  > Details: >  > "xlockmore -mode dclock" grew additional code in version 5.0  > depending on timestamps in 'time_t' format, unfortunately > partially expressed as 'long' variables. This works if function  > prototypes/definitions or type casts are used and the values are  > passed by value, but fails in a few cases in the code where the  > pointer is passed to localtime(3)). >  > localtime accesses a (in the discovered case) 64bit value, which is > likely not to be valid, and returns a null pointer as an error  > indication. The code in dclock.c does not check for this but,  > depending on additional command-line options, either dereferences  > the pointer or passes it to strftime() unconditionally, which in  > turn triggers a segmentation fault, terminating the program and  > leaving the terminal unlocked. >  > While this is unexpected, the dangerous case is where "xlockmore > -mode random" calls the mode "dclock" after a while, when the user > has left the terminal, not noticing that it will (eventually) be > unlocked. >  > Accessing the terminal needs physical access to it; however, the  > terminal can be on a different machine than the one running xlock. >  > The maintainer of xlockmore has been notified and is working on a  > fixed version. In the meantime, the appended patch file will fix  > this problem. While it was developed for it should apply to  > other 5.x versions, too. >  > The packages xlockmore and xlockmore-lite from pkgsrc.org are  > vulnerable for 32bit machines with 64bit time_t up to and > including and but updated > packages are available from pkgsrc-current and will shortly be > available from >  > pkgsrc on NetBSD-6.0 or NetBSD-current on 64bit architectures, and  > pkgsrc on NetBSD-5.1.x and earlier, are not vulnerable. >  > xlockmore is not shipped with the base system of NetBSD. >  > The patch is of course subject to the same licensing as the > original file. >  > $NetBSD: patch-modes_dclock.c,v 1.2 is Exp $ >  > --- +++ > modes/dclock.c @@ @@ static dclockstruct *dclocks = > (dclockst extern char *message; >  > static unsigned long -timeAtLastNewYear(long timeNow)  > +timeAtLastNewYear(time_t timeNow) { struct tm *t; >  > -	t = localtime((const time_t *) &timeNow); +	t = > localtime(&timeNow); return (unsigned long)(t->tm_year); } >  > @@ @@ convert(double x, char *string) } >  > static void -dayhrminsec(long timeCount, int tzoffset, char > *string) +dayhrminsec(time_t timeCount, int tzoffset, char > *string) { int days, hours, minutes, secs; int bufsize, i; @@ > @@ drawDclock(ModeInfo * mi) "%a %b %d %Y", > localtime(&(dp->timeold))); } } else { -		long timeNow, timeLocal;  > +		time_t timeNow, timeLocal; timeNow = seconds(); timeLocal = > timeNow + dp->tzoffset; >  > @@ @@ init_dclock(ModeInfo * mi) { Display *display = > MI_DISPLAY(mi); dclockstruct *dp; -	long timeNow, timeLocal; + > time_t timeNow, timeLocal; int i, j; >  > if (dclocks == NULL) { @@ @@ > defined(MODE_dclock_mayan) dayhrminsec(MAYAN_TIME_START - > timeLocal, dp->tzoffset, dp->strnew[1]); dp->strpta[1] = > dp->strnew[1]; } else { -			struct tm *t = localtime((const time_t > *) &timeLocal); +			struct tm *t = localtime(&timeLocal); >  > if (dp->time24) (void) strftime(dp->strnew[0], STRSIZE, "%H:%M:%S", > t); >  >  > Regards, Ignatios Souvatzis >   Please use for this issue.  - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with Mozilla - http://www.enigmail.net/  =r0bl -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      