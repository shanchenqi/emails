  oss-security - Re: CVE request: ruby file creation due in insertion  of illegal NUL character            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 17 Oct From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Matthias Weckbecker <mweckbecker@...e.de> Subject: Re: CVE request: ruby file creation due in insertion  of illegal NUL character  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, Matthias Weckbecker wrote: > On Wednesday 17 October Fabian Keil wrote: >> Daniel Kahn Gillmor <dkg@...thhorseman.net> wrote: >>> On AM, Matthias Weckbecker wrote: >>>> Technically, this would also apply to Perl (at least with >>>> >>>  >>> It's also the case with perl (just tested). :/ >>  >> At least for Perl I consider this a feature. >>  >  > I agree. I also think that an application which lets such things > happen (ie allow arbitrary content to be passed to open()) is > rather to blame than the language (/interpreter) itself. But the > same applies to Ruby, IMO.  One thought is if you're interfacing to things like file systems which generally don't handle NUL bytes in file names[filesystems] I would hope the programming language does the smart thing and spit out an error. Avtually looking at that page it appears that no modern file systems allows NUL in a file name (and in general I suspect it's a bad idea/leads to some nasty edge case issues).  [filesystems] http://en.wikipedia.org/wiki/Comparison_of_file_systems  Plus I'm looking for documentation on this, in ruby for example:   =============== Create a Pathname object from the given String (or String-like object). If path contains a NUL character (\0), an ArgumentError is raised. ===============  and I would have generally assumed that to be the case across all related functions.  As for Perl:  http://perldoc.perl.org/perlopentut.html  =============== If magic open is a bit too magical for you, you don't have to turn to sysopen. To open a file with arbitrary weird characters in it, it's necessary to protect any leading and trailing whitespace. Leading whitespace is protected by inserting a "./" in front of a filename that starts with whitespace. Trailing whitespace is protected by appending an ASCII NUL byte ("\0" ) at the end of the string.  This assumes, of course, that your system considers dot the current working directory, slash the directory separator, and disallows ASCII NULs within a valid filename. ===============  So as we can see from the file system comparison table this is almost always the case.  I think it's disingenuous to blame every app that uses something as common as "open" for doing something dangerous when it's pretty clear that this behaviour is not expected, I think solving it in open/etc makes a lot more sense than trying to fix every app that uses open (which is.. probably all of them).  Personally I think the perlopentut case makes sense, using NUL as an end of string marker. What happens if stuff comes after it though?  - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with Mozilla - http://www.enigmail.net/  =7EkV -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      