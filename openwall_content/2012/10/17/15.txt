  oss-security - Re: CVE request: ruby file creation due in insertion  of illegal NUL character            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 17 Oct From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Simon McVittie <smcv@...ian.org> Subject: Re: CVE request: ruby file creation due in insertion  of illegal NUL character  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On PM, Simon McVittie wrote: > On Kurt Seifried wrote: >> Avtually looking at that page it appears that no modern file  >> systems allows NUL in a file name (and in general I suspect it's >> a bad idea/leads to some nasty edge case issues). >  > Anything that, directly or indirectly, uses Unix-style APIs to > access files can't possibly support NUL in a filename anyway, since > those APIs receive the filename as a NUL-terminated string. >  >> Personally I think the perlopentut case makes sense, using NUL >> as an end of string marker. What happens if stuff comes after it  >> though? >  > For Perl, one possibility would be to continue to treat an input > of "foo\0" as equivalent to "foo" (so that you can use "./ foo \0" > to mean " foo ", as documented), but disallow NULs anywhere except > the last position. >  > S >   Wow so this goes back a ways:   - -------[  Phrack Magazine --- Vol. 9 | Issue 55 --- --- 07 of 19  ]  - ----------------[  The Beef  - ----[  Poison NULL byte  Note:  The name `Poison NULL byte` was originally used by Olaf Kirch in a Bugtraq post. I liked it, and it fit...  So I used.  Greetings to Olaf.  When does "root" != "root", but at the same time, "root" == "root" (Confused yet)?  When you co-mingle programming languages.  One night I got to wondering, exactly what would Perl allow, and could I get anything to blow up in unexpected ways.  So I started piping very weird data out to various system calls and functions.  Nothing spectacular, except for one that was quite notable...  You see, I wanted to open a particular file, "rfp.db".  I used a fake web scenario to get an incoming value "rfp", tacked on a ".db", and then opened the file.  In Perl, the functional part of the script was something like:  	# parse $user_input 	$database="$user_input.db"; 	open(FILE "<$database");  Great.  I pass 'user_input=rfp', and the script tries to open "rfp.db". Pretty simple (let's ignore the obvious /../ stuff right now).  Then it got interesting when I passed 'user_input=rfp%00'.  Perl made $database="rfp\0.db", and then tried to open $database.  The results?  It  opened "rfp" (or would have, had it existed).  What happened to the ".db"?   This is the interesting part.  You see, Perl allows NUL characters in its variables as data.  Unlike C, NUL is not a string delimiter.  So, "root" != "root\0".  But, the underlying system/kernel calls are programmed in C, which DOES recognize NUL as a delimiter.  So the end result?  Perl passes "rfp\0.db", but the underlying libs stop processing when they hit the first (our) NUL.  ......... and so on.  - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with Mozilla - http://www.enigmail.net/  =b9SL -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      