  oss-security - Linux kernel: proc: fix Oops on invalid /proc/<pid>/maps access            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 6 Feb From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Linux kernel: proc: fix Oops on invalid /proc/<pid>/maps access  Hi,  I just analyzed this issue a little bit and thought I'd post a followup to the thread on oss-security, but to my surprise I could not find the issue mentioned in here, even though "nearby" ones (e.g. fixed in RHEL at about the same time) were brought to this list.  I guess this has to do with differences in CVE assignment - when an issue already has a CVE ID, it is less likely to be brought up in here - which I find wrong. This shouldn't be just a CVE ID assignment list, but a general Open Source security list.  Anyway, to the specific issue:  says "A missing validation flaw was found in the Linux kernel's m_stop() implementation. A local, unprivileged user could use this flaw to trigger a denial of service. Moderate)"  So I wanted to verify whether the impact is in fact limited to a DoS.  More links:   The fix, which I confirmed that it's included in at least OpenVZ's which is what I happen to care about at this time:   -	vma_stop(priv, vma); +	if (!IS_ERR(vma)) +		vma_stop(priv, vma);  Linus' commit message:  "When m_start returns an error, the seq_file logic will still call m_stop with that error entry, so we'd better make sure that we check it before using it as a vma.  Introduced by commit ("report errors in /proc/*/*map* sanely"), which replaced NULL with various ERR_PTR() cases.  (On ia64, you happen to get a unaligned fault instead of a page fault, since the address used is generally some random error code like -EPERM)"  The commit referenced above as one that introduced the bug:   Thus, _assuming_ that the bug was in fact introduced by that commit alone, it does appear to me that we have a mere DoS here - the pointer being referenced has to be some -Exxx access code and nothing more arbitrary.  Good.  (Additionally, the current fix only catches possible values, so if the problem were worse, it would be insufficient.)  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      