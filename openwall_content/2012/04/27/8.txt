  oss-security - weak use of crypto in python-elixir can lead to information  disclosure (CVE and peer review request)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 27 Apr From: Vincent Danen <vdanen@...hat.com> To: oss-security@...ts.openwall.com Subject: weak use of crypto in python-elixir can lead to information  disclosure (CVE and peer review request)  Could a CVE be assigned for the following issue?  It was reported that python-elixir, a library for ORM mapping on top of SQLAlchemy with support for encrypting data stored in a database, suffers from weak use of cryptography.  It uses Blowfish in CFB mode, which has an additional parameter (IV), which is not specified and thus defaults to zero.  CFB mode is only secure if the the IV is unpredictable and different for every message.  Because of this, and because the encryption key is shared for each database table (fields and rows), the same plaintext prefix is always encrypted to an identical and corresponding ciphertext prefix.  As a result, an attacker with access to the database could figure out the plaintext values of encrypted text.   References:    So far there has been no response from upstream, and we have what I think is a suitable proposal to fix the flaw and a possible migration script to ease migrating from an insecure encrypted db to a secure one (noted in the google groups message).  Not sure if anyone else is shipping python-elixir at all, but if you are, input on the proposed fix and migration script (in the absence of an upstream response) would be fantastic.  --  Vincent Danen / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      