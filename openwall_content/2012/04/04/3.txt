  oss-security - Re: fix to            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 4 Apr From: Xi Wang <xi.wang@...il.com> To: oss-security@...ts.openwall.com Cc: Kurt Seifried <kseifried@...hat.com>,  akuster <akuster@...sta.com>,  "Steven M. Christey" <coley@...us.mitre.org> Subject: Re: fix to  On Apr 3, at PM, Kurt Seifried wrote: > For #2 I'm not sure how we handle something like a compiler possibly > mangling code so that an issue is introduced (is that a compiler > problem? a code problem? the intersection of both? Steve: can I get a > comment/referees decision here =)  Thanks for bringing this up.  I think the compiler is all right in this case.  The code is not.  says that an attacker could trigger a division by zero by crafting a large s_log_groups_per_flex.  The first commit fixes the division by zero.  The fix is not perfect because:  1) Theoretically, a standard-conforming C compiler could generate code that is still vulnerable to division by zero, but I was not aware of any compilers doing that.  2) Logically, we should have groups_per_flex = 2^s_log_groups_per_flex, and the fix doesn't really ensure that.  This is obviously not good, but not sure how bad the consequence would be.  BTW, the second commit might still allow a buffer overflow later.  See another patch (though it was rejected).  In ext4_resize_fs():     flexbg_size = 1 << es->s_log_groups_per_flex;    ...    flex_gd = alloc_flex_gd(flexbg_size);  and in alloc_flex_gd():     flex_gd->count = flexbg_size;    flex_gd->groups = kmalloc(sizeof(...) * flexbg_size, ...);  Note that the kmalloc size could be smaller than expected due to multiplication overflow (flexbg_size = 1 << s_log_groups_per_flex could be very large since s_log_groups_per_flex could be as large as 31).  Array access flex_gd groups[i] could be out of bounds in that case.  - xi   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      