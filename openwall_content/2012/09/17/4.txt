  oss-security - Re: Randomness Attacks Against PHP Applications            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 17 Sep From: Vladimir Vorontsov <vladimir.vorontsov@...ec.ru> To: Solar Designer <solar@...nwall.com> CC: oss-security@...ts.openwall.com, argyros.george@...il.com,   Aggelos Kiayias <aggelos@...yias.com>,  gifts <gifts.antichat@...il.com> Subject: Re: Randomness Attacks Against PHP Applications  Hi all,  Main problem is code architecture. Do not use many calls of various rand() for random generating.  i.e. vulnerable code: function generateRandomString($len){ 	$chars = 	for($i=0;$i<$len;$i++){ 		$rstr.=$chars[mt_rand(0,strlen($chars))]; 	} 	return $rstr; }  it is relevant for all pseudo-random generator, not only PHP.  p.s. slides  Solar Designer пишет: > On Wed, Aug 22, at Solar Designer wrote: >> On Thu, Aug 09, at Yves-Alexis Perez wrote: >>> Paper authors tried to port this to PHP security team, but it seems the >>> answer was that it was an application problem. >> >> Here's a vulnerability in and attack on session IDs of PHP proper: >> >> >> >> This is not exactly the same topic (PHP apps vs. PHP itself), yet it's >> closely related and the timing of it was provoked by the same research. >  > FWIW, here's a PHP mt_rand() seed cracker that I wrote: >  > http://download.openwall.net/pub/projects/php_mt_seed/ >  > It finds possible seeds given the very first mt_rand() output after > being seeded with mt_srand(). >  > Here's a sample run.  First, generate a sample "random" number (using > PHP 5.3.x in this case): >  > $ php5 -r echo mt_rand(), "\n";' > >  > Now build and run the cracker: >  > $ make > gcc -Wall -O2 -fomit-frame-pointer -fopenmp php_mt_seed.c -o php_mt_seed > $ time ./php_mt_seed > Found 0, trying - speed seeds per second > seed = > Found 1, trying - speed seeds per second > seed = > Found 2, trying - speed seeds per second > Found 2 >  > real    > user    > sys     >  > In 5 minutes of real time (on an CPU), it found the original > seed, another seed that also produces the same mt_rand() output, and it > searched the rest of the 32-bit seed space (not finding other matches). >  > Note that this is a lot slower than crackers for LCG PRNG seeds, which > were crackable in way under 1 second even in (IIRC, some IDS > products did that for potential Back Orifice backdoor traffic, to detect > it regardless of password used).  There's a iterations loop per seed > tested here.  Of course, a rainbow table would be quick. >  > Here's an OpenCL implementation by Gifts: >  > https://github.com/Gifts/pyphp_rand_ocl >  > According to Gifts, this one tests million seeds per second on a GTX > Ti, for a total running time of 22 seconds. >  > Maybe these PoCs will help convince someone. >  > Alexander >  >     Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      