  oss-security - Re: php header() header injection detection bypass            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 5 Sep (EDT) From: cve-assign@...re.org To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: Re: php header() header injection detection bypass  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  >To me, this is what each of the ids represent: describes the protection bypass describes the failure to fully fix the protection bypass  >(hence the "incomplete fix for  OK, what seems best at this point is the following:  [revised description]    The sapi_header_op function in main/SAPI.c in PHP before and   5.4.x before does not check for %0D sequences (aka carriage   return characters), which allows remote attackers to bypass an HTTP   response-splitting protection mechanism via a crafted URL, related   to improper interaction between the PHP header function and certain   browsers, as demonstrated by Internet Explorer and Google Chrome.  [new description]    The sapi_header_op function in main/SAPI.c in PHP through   does not properly determine a pointer during checks for %0D   sequences (aka carriage return characters), which allows remote   attackers to bypass an HTTP response-splitting protection mechanism   via a crafted URL, related to improper interaction between the PHP   header function and certain browsers, as demonstrated by Internet   Explorer and Google Chrome. NOTE: this vulnerability exists because   of an incorrect fix for   Note 1: We originally thought that there was interest in separate CVE IDs for "the header function is unsafe when a URL contains any recognized end-of-line character" and "the header function is unsafe when a URL contains a %0D sequence." If this were the case, the second CVE description would mention an "incomplete fix" for the first CVE. But, we now understand that the first CVE is not wanted at all, which seems reasonable.  In the actual situation, the patch had a logic flaw related to the "((p = memchr(s, '\n', (e - s))) || (p = memchr(s, '\r', (e - s))))" expression. MITRE prefers to categorize this type of situation as an "incorrect fix" not an "incomplete fix." Admittedly, for many CVE users it doesn't matter.  The mapping of the two CVEs to a vendor changelog is currently problematic because http://www.php.net/ChangeLog-5.php has two very similar references to "Fixed bug but one of the listed versions has the code change with the above-mentioned logic flaw, whereas the other has a different code change without this logic flaw.  Note 2: We probably haven't found the exact affected versions, but this doesn't matter much because those versions aren't widely used. Specifically, we don't know whether there's a supported download location for every pre-release version that ever existed, but we happened to find the http://php.marvel.strk.jp/archive/ directory. Here, (August does not check for '\r' at all, whereas (December can check for '\r' but has the above-mentioned logic flaw. This is consistent with the SVN date listed in bug  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG (SunOS)  iQEcBAEBAgAGBQJQR4VAAAoJEGvefgSNfHMdT2cIAKLrbO/VRVzYstBpTXdDWe/i =cX+c -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      