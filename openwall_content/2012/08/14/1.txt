  oss-security - Re: Tunnel Blick: Multiple Vulnerabilities to Local  Root and DoS (OS X)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 14 Aug From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: "Jason A. Donenfeld" <Jason@...c4.com> Subject: Re: Tunnel Blick: Multiple Vulnerabilities to Local  Root and DoS (OS X)  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, Jason A. Donenfeld wrote: > Hi Kurt, >  > Sure, I'll trace each one, and include line numbers with the code.  > This code comes from:  >  Thanks, >  without the details this would have been impossible, as it is I'm going to break one CVE editorial rule, but I think it's for a good reason (but I could also be wrong). So in summary:  ================== 1. A race condition in file permissions checking can lead to local root. - TOCTOU  Please use for this issue  ================== 2. Insufficient checking of merely 0:0 can lead to local root on systems with particular configurations.  Please use for this issue  ================== 3. Insufficient validation of path names can allow for arbitrary kernel module loading, which can lead to local root. 4. Insufficient validation of path names can allow execution of arbitrary scripts as root, leading to local root. 5. Insufficient path validation in errorExitIfAttackViaString can lead to deletion of files as root, leading to DoS.  Please use for these issues  ================== 6. Allowing OpenVPN to run with user given configurations can lead to local root.  Please use for this issue  ================== 7. Race condition in process killing. - TOCTOU  Please use for this issue    although #1 and #7 are both TOCTOU race conditions (and thus should be merged) one is a classic file perms check/use, the other is quite different, process listing/killing, so I split the CVE (they are sufficiently different to warrant it I think).   >  > 1. A race condition in file permissions checking can lead to local > root. PoC: > http://git.zx2c4.com/Pwnnel-Blicker/tree/pwnnel-blicker.c >  > runScript(NSString * scriptName,               int > argc,               char     * cfgName, > char     * cfgLoc) *                if ( > checkOwnerAndPermissions(scriptPath, 0, 0,  ) { > fprintf(stderr, "'%s' executing...\n", [scriptName UTF8String]); * >                    returnValue = runAsRoot(scriptPath, > [NSArray array]);                    fprintf(stderr, "'%s' > returned with status %d\n", [scriptName UTF8String], returnValue);  >                } >  > Here, there's a race condition between the two stared lines. >  >  > 2. Insufficient checking of merely 0:0 can lead to local root > on systems with particular configurations. >  >                if (  checkOwnerAndPermissions(scriptPath, 0,  > 0,  ) { and            if (  ! > checkOwnerAndPermissions(preConnectPath, 0, 0,  ) { and > if (  ! checkOwnerAndPermissions(postTunTapPath, 0, 0,  ) > { and                if (  ! > checkOwnerAndPermissions(filePath, 0, 0,  ) {       // > shell scripts are >  > Testing a file for whether or not it's and owned by root:root > is not sufficient for deciding whether a unprivileged should be > able to run it as root. This not only makes every root:root > file on the file system a potential vector, but destroys the nosuid > mount flag OS X uses for all user mountable images and network > shares. >  >  > 3. Insufficient validation of path names can allow for arbitrary  > kernel module loading, which can lead to local root. >  > 86	    execPath = [[NSString stringWithUTF8String:argv[0]]  > stringByDeletingLastPathComponent]; loadKexts(unsigned > int bitMask)    if (  ( bitMask & > (OPENVPNSTART_OUR_TAP_KEXT | OPENVPNSTART_OUR_TUN_KEXT) ) == 0  ) > {        return;    }    NSMutableArray* > arguments = [NSMutableArray arrayWithCapacity: 2];    if ( > (bitMask & OPENVPNSTART_OUR_TAP_KEXT) != 0  ) { > NSString * tapkext = [@"tap" stringByAppendingString:  > TunTapSuffixToUse([execPath stringByAppendingPathComponent: > @"tap"])];        [arguments addObject: [execPath  > stringByAppendingPathComponent: tapkext]]; > fprintf(stderr, "Loading %s\n", [tapkext UTF8String]);    }  >    if (  (bitMask & OPENVPNSTART_OUR_TUN_KEXT) != 0  ) { > NSString * tunkext = [@"tun" stringByAppendingString:  > TunTapSuffixToUse([execPath stringByAppendingPathComponent: > @"tun"])];        [arguments addObject: [execPath  > stringByAppendingPathComponent: tunkext]]; > fprintf(stderr, "Loading %s\n", [tunkext UTF8String]);    }  >    becomeRoot(); >  >    int status;    int i;    for (i=0; i < 5; i++) > {        NSTask * task = [[[NSTask alloc] init] > autorelease];        [task > setLaunchPath:@"/sbin/kextload"];        [task > setArguments:arguments];        [task launch]; >  > As you can see, the file name of the kernel extension being loaded > is derived from argv[0], which can be trivially bypassed ( > execl(..., "/attacker/controlled/argv/zero", ...) ). >  >  > 4. Insufficient validation of path names can allow execution of  > arbitrary scripts as root, leading to local root. PoC: > http://git.zx2c4.com/Pwnnel-Blicker/tree/pwnnel-blicker-for-kids.sh > >  86	    execPath = [[NSString stringWithUTF8String:argv[0]]  > stringByDeletingLastPathComponent]; > runOpenVpnToGetVersion(NSString * openvpnVersion) > NSString * openvpnPath = openvpnToUsePath([execPath  > stringByAppendingPathComponent: @"openvpn"], openvpnVersion); > runAsRoot(openvpnPath, [NSArray arrayWithObject: @"--version"]);  > >  > This basically amounts to this being run as root:  $(dirname  > argv[0])/openvpn --version. >  >  >  > 5. Insufficient path validation in errorExitIfAttackViaString can > lead to deletion of files as root, leading to DoS.        } > else if( strcmp(command, "deleteLogs") == 0 ) { (argc == > 4) { configFile = [NSString > stringWithUTF8String:argv[2]]; > errorExitIfAttackViaString(configFile); > unsigned cfgLocCode = atoi(argv[3]); > deleteLogFiles(configFile, cfgLocCode); > syntaxError = FALSE;            } > errorExitIfAttackViaString(NSString * string)    BOOL > startsWithDot = [string hasPrefix: @"."];    NSRange r = > [string rangeOfString: @"/.."];    if (   startsWithDot > || (r.length != 0)  ) {        fprintf(stderr, "Tunnelblick > openvpnstart: Apparent attack detected; string being tested is > %s\n", [string UTF8String]);        [pool drain]; > exit(EXIT_FAILURE);    } >  > The "exit if attack string" function doesn't check for links of > any kind, symbolic or hard, so this validation is not sufficient. >  >  > 6. Allowing OpenVPN to run with user given configurations can lead > to local root.        if (  [configFile hasSuffix: @"tblk"]  ) > {            unsigned  cfgLocCode = atoi(cfgLoc); > switch (cfgLocCode) {                case 0: > configPrefix = [NSHomeDirectory()  > stringByAppendingPathComponent:@"/Library/Application  > Support/Tunnelblick/Configurations"]; > break;                case 1: > configPrefix = [NSString stringWithFormat:@"/Library/Application > Support/Tunnelblick/Users/%@", NSUserName()]; > break;                case 2: > configPrefix = [execPath stringByAppendingPathComponent: > @"Deploy"];                    break;                case > 3:                    configPrefix = [NSString > stringWithString: @"/Library/Application > Support/Tunnelblick/Shared"];                    break; > default:                    break;            } > } The purpose of this SUID helper is so that users can run OpenVPN > with their own provided configuration files as root. OpenVPN > configuration files can run scripts based on various OpenVPN > events. >  >  > 7. Race condition in process killing. isOpenvpn(pid_t > pid) FALSE; > = 0, 0; kinfo_proc*	info		= NULL;  > &count);    for (i = 0; i < count; > i++) {        char* process_name = info[i].kp_proc.p_comm;  >        pid_t thisPid = info[i].kp_proc.p_pid;        if > (pid == thisPid) { (strcmp(process_name, "openvpn")==0) > { = TRUE; else { > = FALSE;    } > free(info); is_openvpn; >  > { = > kill(pid, SIGTERM); and "openvpn") > == 0) { = kill(pid, > SIGTERM); >  > There's a race between checking the name of the process and > killing that PID. Since PIDs are cycled, eventually that PID could > point to a different process the user shouldn't have permission to > kill. >  >  > Hope this clarifies things. Let me know if you have more > questions. >  > Jason >    - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/  zN+hCjbnDxxU+5/2jZUr =amtN -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      