  oss-security - Remote DoS in Linux sfc driver through TCP MSS option             Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 3 Aug From: Ben Hutchings <bhutchings@...arflare.com> To: <oss-security@...ts.openwall.com> CC: linux-net-drivers <linux-net-drivers@...arflare.com> Subject: Remote DoS in Linux sfc driver through TCP MSS option   Issue -----  On Linux, a peer (or local user) may cause TCP to use a nominal MSS of as little as 88 (actual MSS of 76 with timestamps).  Given that we have a sufficiently prodigious local sender and the peer ACKs quickly enough, it is nevertheless possible to grow the window for such a connection to the point that we will try to send just under 64K at once.  This results in a single skb that expands to segments.  In the sfc driver, such an skb will require hundreds of DMA descriptors; a substantial fraction of a TX ring or even more than a full ring.  The TX queue selected for the skb may stall and trigger the TX watchdog repeatedly (since the problem skb will be retried after the TX reset).  Fix ---  This issue is fixed in David Miller's net.git repository by the following commits:  net: Allow driver to limit number of GSO segments per skb sfc: Fix maximum number of TSO segments and minimum TX queue size tcp: Apply device TSO segment limit earlier  The out-of-tree sfc driver, available from <https://support.solarflare.com>, was fixed in a different way (not dependent on kernel changes) in version  The OpenOnload package, available from <http://www.openonload.org/download.html>, was updated to include the fixed sfc driver in version  The fixed sfc driver will be included in a new EnterpriseOnload release shortly.  Mitigation ----------  If all processes that may send on the sfc interface use Onload, or do not use TCP, the vulnerability does not exist.  The vulnerability can otherwise be avoided by making a temporary configuration change.  For an sfc interface named eth0, either:  a. Increase the TX queue size:        ethtool -G eth0 tx    This can increase TX latency and memory usage.  or:  b. Disable TSO:        ethtool -K eth0 tso off    This can reduce TX throughput and/or increase CPU usage.  --  Ben Hutchings, Staff Engineer, Solarflare Not speaking for my employer; that's the marketing department's job. They asked us to note that Solarflare product names are trademarked.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      