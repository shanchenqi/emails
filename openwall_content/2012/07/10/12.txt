  oss-security - Re: libdbus hardening            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 10 Jul From: Sebastian Krahmer <krahmer@...e.de> To: oss-security@...ts.openwall.com Subject: Re: libdbus hardening  On Tue, Jul 10, at Solar Designer wrote: > On Tue, Jul 10, at Florian Weimer wrote: > > On PM, Solar Designer wrote: > > >We already have __secure_getenv() in glibc, which I think is what > > >libraries like this should be using on systems with glibc. > >  > > Sebastian's patches also include a check on prctl(PR_GET_DUMPABLE).  I'm  > > not sure if the libc approach (compare effective and real UIDs/GIDs on  > > process start and base process environment trust decisions on that) is  > > equivalent. >  > glibc also uses AT_SECURE. >  > PR_GET_DUMPABLE catches the extra case of a process that started e.g. as > root and has since switched creds, but do we actually want to restrict > processing of env vars in that case?  Perhaps not, and so AT_SECURE is > more appropriate.  It is indeed, if you are inside libc. :) But I dont want to parse /proc/self/auxv from libdbus and do not know any other portable way (I dont want to walk the stack base either to find auxv). Maybe my patch is even breaking dbus daemon itself, if it dropped to dbus user?  Thats someting upstream could tell us :)  Sebastian  --   ~ perl self.pl ~ ~ krahmer@...e.de - SuSE Security Team  --- SUSE LINUX Products GmbH, GF: Jeff Hawn, Jennifer Guild, Felix Imendörffer, HRB (AG Nürnberg) Maxfeldstraße 5 Nürnberg Germany   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      