  oss-security - Re: CVE requests for three Linux kernel issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 20 Nov (IST) From: P J P <ppandit@...hat.com> To: oss security list <oss-security@...ts.openwall.com> cc: Moritz Muehlenhoff <jmm@...ian.org> Subject: Re: CVE requests for three Linux kernel issues    Hello Moritz,  +-- On Tue, 19 Nov Petr Matousek wrote --+ | non-issues. Prasad (CC'ed) can provide reasons why. | > Linux Kernel <= sk_attach_filter Kernel Heap Corruption | >       Here, integer overflow does not occur because 'fprog->len' is of type  'unsigned short' and sizeof(struct sock_filter) = 8 bytes.     unsigned int fsize = sizeof(struct sock_filter) * fprog->len;                       = 8 *                       = =>  ===     // XXX Integer overflow (+ sizeof(*fp)) and causing a little allocation.     fp = sock_kmalloc(sk, fsize+sizeof(*fp), GFP_KERNEL); ===  Adding few more bytes 'sizeof(*fp)' to 'fsize' above is unlikely to overflow  an unsigned int.   | > Linux Kernel bt8xx Video Driver IOCTL Heap Overflow | >      Here, 'win->clipcount' is of type 'unsigned int' OR '__u32', which is  checked for > in verify_window(). It returns an error if it is greater  than If we set win->clipcount to '-3', it'll be seen as  which is way greater than Thus avoiding the said heap overflow.    ->> Linux Kernel fbdev Driver arcfb_write() Overflow | >      Here, the call - write(/dev/fb, buf, count=0xffffffff) - passes through  various VFS routines before reaching arcfb_write(). Enroute to 'arcfb_write',  the routine vfs_write()->rw_verify_area() limits the 'count' argument to  MAX_RW_COUNT via:    #define MAX_RW_COUNT (INT_MAX & PAGE_CACHE_MASK) /* */    return count > MAX_RW_COUNT ? MAX_RW_COUNT : count;  If count=MAX_RW_COUNT, the position parameter 'p' in arcfb_write() would have  to be at least >= for 'count + position' to  overflow an unsigned int fbmemlength at:    if ((count + p) > fbmemlength)  But, that large a position value would not fall through an earlier check at    fbmemlength = (xres * info->var.yres) / 8;   if (p > bmemlength)      return -ENOSPC;   Hope this helps. Thank you. -- Prasad J Pandit / Red Hat Security Response Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      