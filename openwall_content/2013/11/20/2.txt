  oss-security - Re: CVE requests for three Linux kernel issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 20 Nov From: Daniel Borkmann <dborkman@...hat.com> To: oss-security@...ts.openwall.com CC: P J P <ppandit@...hat.com>, Moritz Muehlenhoff <jmm@...ian.org> Subject: Re: CVE requests for three Linux kernel issues  On AM, P J P wrote: >    Hello Moritz, > > +-- On Tue, 19 Nov Petr Matousek wrote --+ > | non-issues. Prasad (CC'ed) can provide reasons why. > | > Linux Kernel <= sk_attach_filter Kernel Heap Corruption > | >   > >     Here, integer overflow does not occur because 'fprog->len' is of type > 'unsigned short' and sizeof(struct sock_filter) = 8 bytes. > >     unsigned int fsize = sizeof(struct sock_filter) * fprog->len; >                        = 8 * >                        = => > > === >      // XXX Integer overflow (+ sizeof(*fp)) and causing a little allocation. >      fp = sock_kmalloc(sk, fsize+sizeof(*fp), GFP_KERNEL); > === > > Adding few more bytes 'sizeof(*fp)' to 'fsize' above is unlikely to overflow > an unsigned int.  Agreed, it's somewhat stupid though that we only check for that later on after allocation in sk_chk_filter():  if (flen == 0 || flen > BPF_MAXINSNS) 	return -EINVAL;  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      