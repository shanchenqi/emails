  oss-security - Re: PoC: Function Pointer Protection in C Programs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 22 Aug From: "Stephen Röttger" <stephen.roettger@...il.com> To: Ondřej Bílka <neleai@...nam.cz> CC: oss-security@...ts.openwall.com, gcc@....gnu.org Subject: Re: PoC: Function Pointer Protection in C Programs  > After bit of thought a loops with callback can be optimized by gcc. >  > It could be possible to teach CSE to rewrite >  > while(foo){ >  check(p); >  (*p)(x,y,z); > } >  > into  >  > check(p); > while(foo){ >  (*p)(x,y,z); > } >   This might introduce security issues, if an attacker is able to overwrite p during the execution of the loop. For example if p is part of a dynamically allocated struct that has already been freed and an attacker can reallocate the memory after the first execution of the loop body, he would be able to bypass the check. On the other hand, if p is stored on the stack, vulnerabilities allowing to overwrite it, would likely also allow to overwrite saved return addresses.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      