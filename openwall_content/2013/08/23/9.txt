  oss-security - Re: [PATCH] implement privmode support in dash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 23 Aug From: jca+dash@...vbn.org (Jérémie Courrèges-Anglas) To: Tavis Ormandy <taviso@...gle.com> Cc: Jilles Tjoelker <jilles@...ck.nl>, Harald van Dijk <harald@...awatt.nl>,         dash@...r.kernel.org, oss-security@...ts.openwall.com Subject: Re: [PATCH] implement privmode support in dash   Also,  Tavis Ormandy <taviso@...gle.com> writes:  [...]  >> Apart from that, it is better to check the return value from setuid() >> and similar functions. In particular, some versions of Linux may fail >> setuid() for [EAGAIN], leaving the process running with the same >> privileges. > > I don't think this is true anymore, but I have no strong objection to > adding it, so long as it's noted that bash and pdksh do not do this.  Just for reference, from mksh:  [...]  #ifdef SETUID_CAN_FAIL_WITH_EAGAIN /* we don't need to check for other codes, EPERM won't happen */ #define DO_SETUID(func, argvec) do {					\ 	if ((func argvec) && errno == EAGAIN)				\ 		errorf("%s failed with EAGAIN, probably due to a"	\ 		    " too low process limit; aborting", #func);		\ } while (/* CONSTCOND */ 0) #else #define DO_SETUID(func, argvec) func argvec #endif  [...]  	  if (f == FPRIVILEGED && oldval && !newval) { 		/* Turning off -p? */  		/*XXX this can probably be optimised */ 		kshegid = kshgid = getgid(); #if HAVE_SETRESUGID 		DO_SETUID(setresgid, (kshegid, kshegid, kshegid)); #if HAVE_SETGROUPS 		/* setgroups doesn't EAGAIN on Linux */ 		setgroups(1, &kshegid); #endif 		DO_SETUID(setresuid, (ksheuid, ksheuid, ksheuid)); #else 		/* seteuid, setegid, setgid don't EAGAIN on Linux */ 		ksheuid = kshuid = getuid(); #ifndef MKSH__NO_SETEUGID 		seteuid(ksheuid); #endif 		DO_SETUID(setuid, (ksheuid)); #ifndef MKSH__NO_SETEUGID 		setegid(kshegid); #endif 		setgid(kshegid); #endif 	} [...]   > Tavis.  --  jca | PGP: / 61DB D9A0 67CF  8FBF  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      