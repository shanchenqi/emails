  oss-security - Re: [PATCH] implement privmode support in dash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 23 Aug From: jca+dash@...vbn.org (Jérémie Courrèges-Anglas) To: Tavis Ormandy <taviso@...gle.com> Cc: Jilles Tjoelker <jilles@...ck.nl>, Harald van Dijk <harald@...awatt.nl>,         dash@...r.kernel.org, oss-security@...ts.openwall.com Subject: Re: [PATCH] implement privmode support in dash  Tavis Ormandy <taviso@...gle.com> writes:  > On Thu, Aug 22, at PM, Jilles Tjoelker <jilles@...ck.nl> wrote: >> I think there is no reason to deviate from other shells here. Therefore, >> please call it "privileged". >> > > Agreed. > >>> In bash and FBSD, after starting with -p, set +p can be used to drop >>> privileges. With your patch, dash accepts set +p, but silently ignores it. >> >>> How does something like the attached, to be applied on top of your >>> patch, look? >> >>> [snip] >>> +     if (!on && (uid != geteuid() || gid != getegid())) { >>> +             setuid(uid); >>> +             setgid(gid); >>> +             /* PS1 might need to be changed accordingly. */ >>> +             choose_ps1(); >>> +     } >>> +} >> >> This code tries to use setuid() and setgid() to drop all privilege, >> which is only correct if the privilege to be dropped is UID 0, or on BSD >> systems. It would be better to use setresuid() or setreuid(), and change >> the GID before changing the UID. > > This is logic duplicated from pdksh and bash, I'm slightly reluctant > to do things differently, unless it's not going to get committed > otherwise.  pdksh is only maintained by OpenBSD, afaik (mksh syncs regularly). The current code rather looks like this:  	if (f == FPRIVILEGED && oldval && !newval) { 		gid_t gid = getgid();  		setresgid(gid, gid, gid); 		setgroups(1, &gid); 		setresuid(ksheuid, ksheuid, ksheuid); 	} ...  > You can see some code snippets here: > > >> Apart from that, it is better to check the return value from setuid() >> and similar functions. In particular, some versions of Linux may fail >> setuid() for [EAGAIN], leaving the process running with the same >> privileges. > > I don't think this is true anymore, but I have no strong objection to > adding it, so long as it's noted that bash and pdksh do not do this. > > Tavis.  --  jca | PGP: / 61DB D9A0 67CF  8FBF  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      