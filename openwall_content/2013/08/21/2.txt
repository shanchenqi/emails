  oss-security - Re: Linux kernel: vfs_read()/vfs_write(): potential missing checks (or not?)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 21 Aug From: Hannes Frederic Sowa <hannes@...essinduktion.org> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel: vfs_read()/vfs_write(): potential missing checks (or not?)  On Tue, Aug 20, at vladz wrote: > > [...] > > Looking at the kernel sources, the vfs_read(), vfs_write(), vfs_readv() > and vfs_writev() functions checks the permissions of the file object > (file->f_mode) before operating on file descriptor: >  >     $ cat -n >     [...] >     ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos) >     { >             ssize_t ret; >     >             if (!(file->f_mode & FMODE_READ)) >                     return -EBADF; >  > I believe this is insufficient, the inode object should be checked too. > So that if the file's permissions allow read/write operations, so we can > perform reading/writing from/to the file descriptor.  I've patched the > concerned function to do so (cf. patch [3]).  This behavior is deliberatly chosen. If the inode is checked again, you could just mmap the filedescriptor to memory and get away with that, too. There are plans to implement a revoke-syscall. Maybe it will be implemented for files, too (other operating systems only provide revoke-Support for terminals, block or char devices).  This shoud then handle the teardown of memory mappings with some specified semantic, too.  Greetings,    Hannes   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      