  oss-security - Re-evaluating expat/libxml2 CVE assignments            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 12 Apr (EDT) From: "Steven M. Christey" <coley@...re.org> To: oss-security@...ts.openwall.com Subject: Re-evaluating expat/libxml2 CVE assignments   Various CVEs were assigned to XML-related issues in expat and libxml2 at:   - libxml2 internal entity expansion  - libxml2 external entities expansion  - expat internal entity expansion  - expat external entities expansion  As I noted in for  novel situations such as these, sometimes we might change directions after  we learn more.  After some investigation, the MITRE CNA team believes we should probably  REJECT and shift responsibility to application developers.  For and there are "workarounds" available for  application developers, although such workarounds may be very expensive to  develop, and this might place "too much" responsibility to the developers  - so, these assignments may still be OK.  It is still worth discussion.  still seems OK as is.   - expat external entities expansion -------------------------------------------------  In Kurt says "I think it's common enough to warrant [assignment]," but Florian Weimer points out that expat doesn't resolve external entities directly. Instead - as described (or quoted?) in detail by Kurt - "Expat does not read or parse external entities directly."  The developer using expat has to explicitly set ExternalEntityRefHandler, then create "a subsidiary parser with XML_ExternalEntityParserCreate".  Since the programmer using expat has to do the work to define and set up their ExternalEntityRefHandler, we believe that means that individual applications are using expat unsafely, so there should be separate CVEs for the applications, not expat.   - expat internal entity expansion -----------------------------------------------  This probably qualifies for a CVE, but note that the issue came up in (expat as used in Apache APR-util).  The implemented solution was to change the application, not expat. See   Apparently, if an application wishes to address this issue, it has to call the XML_SetEntityDeclHandler function with the name of an alternative function that can handle entities more safely. The opportunity to write your own code to process entities is probably outside the general intention of our "the library provides an API mechanism through which safe operation can be achieved" condition as presented in the post.    - libxml2 external entities expansion ---------------------------------------------------  This also probably qualifies for a CVE. This may be another situation where the library provides the opportunity to write your own code to process entities safely. The libxml2 documentation for xmlSAX2ResolveEntity says "The entity loader, to control the loading of external entities, the application can either: ... override this xmlSAX2ResolveEntity() callback in the SAX block ... or better use the xmlSetExternalEntityLoader() function to set up it's own entity resolution routine." If so, then like it again would arguably be outside the bounds of the "the library provides an API mechanism through which safe operation can be achieved" condition.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      