  oss-security - Re: looks like an OpenSSL bug            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 12 Apr From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: looks like an OpenSSL bug  On Fri, Apr 12, at Florian Weimer wrote: > I believe it is wrong to fix this in PostgreSQL.  Rather, this is a > bug in the OpenSSL fork protection code.  Yes, I suggested this as a possibility here:   > It should either install a fork hook,  What is a fork hook, and how would it install one?  > or reseed the PRNG from /dev/urandom if a PID change is detected.  Yes, or the PID may simply be mixed in on each and every request for a pseudo-random number.  (Isn't this already the case?  Need to check.) If such mixing, including of that of the rest of the entropy sources, is cryptographically strong, then one sibling process' pseudo-random number stream would not reveal another sibling's, unless there's also a memory contents leak.  The fact that the PID itself is low-entropy is OK as long as sufficient entropy is obtained from other sources (before the fork() is OK) and its mixing is cryptographically strong (and was such on any pre-fork() requests for random numbers as well), again assuming no memory contents leak from any of the processes.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      