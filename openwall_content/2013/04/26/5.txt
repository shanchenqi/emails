  oss-security - Re: upstream source code authenticity checking            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 26 Apr From: Alistair Crooks <agc@...src.org> To: Kurt Seifried <kseifried@...hat.com> Cc: oss-security@...ts.openwall.com, Josh Bressers <bressers@...hat.com> Subject: Re: upstream source code authenticity checking  On Thu, Apr 25, at Kurt Seifried wrote: > -----BEGIN PGP SIGNED MESSAGE----- > Hash: SHA1 >  > On PM, Alistair Crooks wrote: > > I'm not sure what using PGP gains us? > >  > > Regards, Alistair >  > So some possible outcomes are: >  > 1) They do PGP/GPG and don't get compromised. Long term outcome: we > come out way ahead. >  > 2) They do PGP/GPG and do get compromised. Long term outcome: we trust > bad things and lose, hopefully this gets spotted quickly and dealt with.  Sure.  I actually agree with you.  But I'd also like it if we could bear in mind that, with PGP, trust is earned, trust signatures are snapshots in time, and trust levels are private, best guessses by people.  All people can see from a key listing is who trusted them and when, not how much, or whether the trust was warranted.   > At a minimum this raises the bar for attackers when trying to insert a > fake release/whatever. The real problem however is the cost of doing > this. Key creation/storage/management/backup/etc is all non trivial > and not free. Is the cost of this worth it? >  > I think if we are going to push this we need to come up with a pretty > good set of guidelines that are easy to follow and implement. Things > like creation of keys, usage, storage, how to handle key roll overs, > lost keys, etc. Maybe even have a trusted party signs packages sent to > them, confirms the package with the project through some other trusted > channel like secure email or because they know the guy in real life/etc.  I do like this idea, although think there should be more than one "trusted" party. But the tools we have don't do that kind of third-party verification; it would be good to get that in there.  Regards, Alistair  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      