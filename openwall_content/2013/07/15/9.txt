  oss-security - Re: - Eglibc PTR MANGLE bug            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 16 Jul From: Hector Marco <hecmargi@....es> To: bugtraq@...urityfocus.com, full-disclosure@...ts.grok.org.uk,         oss-security@...ts.openwall.com Subject: Re: - Eglibc PTR MANGLE bug   -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1    Due to I signed the mail without care with the line length the mail is not very readable.  In my personal website you can find a better format.    Hector Marco.   On Hector Marco wrote: > > Hi guys, > > The following is a bug that we found while we were working around > stack smashing protection techniques. > > > Title: - Eglibc PTR MANGLE bug > > > 0.- Description > > This bug was discovered in March while we were developing the RAF SSP > technique. The glibc bug makes it easy to take advantage of common > errors such > as buffer overflows allows in these cases redirect the execution flow and > potentially execute arbitrary code. > > > 1.- Impact > > All statically linked applications compiled with glibc and eglibc are > affected, > independent of the operating system distribution. Note that this problem > is not > solved by only patching the eglibc, but it is also necessary to > recompile all > static executables.  As far I know there are a lot of routers, embedded > systems > etc., which use static linked applications. Since the bug is from the > beginning > of the PTR_MANGLE implementations (years there are a ton of > vulnerable devices. > > > 2.- Vulnerable packages > > The bug has been propagated to all the static code compiled with all > versions, > on all architectures, of glibc from 2.4 to (Current > version). > > > 3.- Vulnerability > > The vulnerability is caused due to the non initialization to a random > value (it > is always zero) of the "pointer guard" by the glibc only when generating > static > compiled executables. Dynamic executables are not affected. Pointer guard is > used to mangle the content of sensible pointers (longjmp, signal handlers, > etc.), if the pointer guard value is zero (non-initialized) then it is not > effective.   An example:  Library functions like "setjmp()" or > "longjmp()" use > PTR_MANGLE and PTR_DEMANGLE. These macros are used to protect structures > like > jmp_buf. Basically consist on XOR-ing the pointer value with a random > > value. Since the pointer guard (random value) is 0x0 the attacker can easily > calculate off-line the value of a target address. By overwriting the "env" > structure with the pre-computed address the vulnerability is triggered when > longjmp() is called and the execution flow is redirected to attacker > address. > > 4.- Exploit > > The bug was tested with Debian 7.1 and Ubunu LTS and I already > created a proof of concept to exploit this vulnerability for both 32 and 64 > bits x86 architectures.   The proof of concept poc-bug-mangle.c redirect the > execution flow to a function which prompt a shell. This exploit can be > compiled > for both and architectures. More architectures can be added > easily > by adding the correspondent defines.  > > Compilation for >    gcc poc-bug-mangle.c -o poc-bug-mangle -static > > Compilation for >    gcc poc-bug-mangle.c -o poc-bug-mangle_32 -static -m32 >    gcc poc-bug-mangle.c -o poc-bug-mangle_64 -static -m64 > > Execution output: >    box@....upv.es:~$ ./poc-bug-mangle >    [+] Exploiting ... >    [+] hacked !! >    $ > > > > 5.- FIX > > Note that the bug is not solved by only patching the eglibc, but it is also > necessary to recompile all static executables. I have created a non official > patch for the  > > Patching >    wget >    cd >    patch -p1 < > > > 6.- Discussion > > Although this bug is not exploitable by itself, the truth is that the PTR > Mangle encryption is useless. The goal of the protection technique is not > achieved.  This can be seen as the canary stack is set to 0x0, although > is not > exploitable by itself is clearly an issue. What about whether the canary has > been set to zero from to today ? This is what happened with the > pointers > protected with this mechanism.   According to Ulrich_Drepper to use > "encryption > pointers (instead of canaries) to protect structures like jmp_buf is at > least > as secure and in addition faster". Following the above and since the > protection > mechanism is useless from the first implementation, the number of > potentially > affected systems could be huge. > > Patch and exploit source code: > > >  -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux) Comment: Using GnuPG with undefined - http://www.enigmail.net/  Ju8aueJxxsX4knpdCIiQ =degQ -----END PGP SIGNATURE-----    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      