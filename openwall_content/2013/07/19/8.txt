  oss-security - RE: Re: SWFUpload <= (Object Injection/CSRF)  Vulnerabilities Multiple flaws            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 19 Jul From: "Christey, Steven M." <coley@...re.org> To: "kseifried@...hat.com" <kseifried@...hat.com>, 	"oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> CC: Andrew Nacin <nacin@...dpress.org>, Jay Turla <shipcodez@...il.com> Subject: RE: Re: SWFUpload <= (Object Injection/CSRF)  Vulnerabilities Multiple flaws  Kurt said:  >So to confirm: > swfupload KedAns-Dz object injection duplicate of >  swfupload KedAns-Dz CSRF  That is how we're handling it for CVE right now, although since people aren't sure whether there's really a CSRF, I'm waiting to update until we get more clarity.  I'm also not sure what the real problem is with the "object injection" in this case.  This appears to be an example of "content spoofing" as defined by OWASP/WASC, but using images instead of rendering attacker-controlled text.  It looks like a URL can be used to change the image that's displayed for a Flash button through the upload object itself.   This is not technically XSS because there is no script being used, but apparently it affects how the upload interface is presented to the victim.  It's not immediately clear to me whether there are phishing-style or clickjacking-style attacks that can be performed against SWFUpload by using a malicious button image.  Just printing out an unexpected image onto the form wouldn't cross privilege boundaries by itself I don't think, because the attacker already got the victim's browser to render the SWFUpload dialog that shows the button in the first place, and the SWFUpload functionality appears to be intended to allow remotely-specified images based on the buttonImageURL parameter and documentation for the .  If the button can be used to submit a file without interaction or trick the user in some other way, that might be sufficient for a CVE.  - Steve   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      