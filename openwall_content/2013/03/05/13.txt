  oss-security - CVE Requests (maybe): Linux kernel: various info leaks, some NULL ptr derefs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 5 Mar From: Mathias Krause <minipli@...glemail.com> To: Kurt Seifried <kseifried@...hat.com>, oss-security@...ts.openwall.com Cc: Solar Designer <solar@...nwall.com> Subject: CVE Requests (maybe): Linux kernel: various info leaks, some NULL ptr derefs  Hi Kurt,  I don't care much about info leaks beyond merely fixing them. But Alexander asked me to request a CVE ID for the recent crypto fix of mine and as I did quite a few of such fixes in the recent past, I'll just list them all here. The information might be a bit scarce for a CVE ID request but as I don't expect any CVE IDs anyway, I didn't wanted to do too much unnecessary work. ;)  crypto: user - fix info leaks in report API  This is quite a big info leak of heap, stack and .text memory. No crypto material, though. Also, as the crypto user API is protected by capable(CAP_NET_ADMIN), it's not as critical as is might sound on the first sight. It affects all versions from the introduction of the crypto user API -- that is v3.2 - v3.8.   Older info leak fixes follow. All of them ended up in v3.6 and were backported to the stable/longterm kernels at the time:  xfrm_user: ensure user supplied esn replay window is valid What: Leaks up to ~3.5kb heap memory. Was protected by capable(CAP_NET_ADMIN) at the time.  xfrm_user: fix info leak in copy_to_user_tmpl() What: Minor leak of stack memory. Was protected by capable(CAP_NET_ADMIN) at the time.  xfrm_user: fix info leak in copy_to_user_policy() What: Minor leak of heap memory. Was protected by capable(CAP_NET_ADMIN) at the time.  xfrm_user: fix info leak in copy_to_user_state() What: Minor leak of heap memory. Was protected by capable(CAP_NET_ADMIN) at the time.  xfrm_user: fix info leak in copy_to_user_auth() What: Leak of heap memory. Was protected by capable(CAP_NET_ADMIN) at the time.  net: fix info leak in compat dev_ifconf() What: Minor leak of stack memory.  ipvs: fix info leak in getsockopt(IP_VS_SO_GET_TIMEOUT) What: Minor leak of stack memory.  dccp: fix info leak via getsockopt(DCCP_SOCKOPT_CCID_TX_INFO) What: Minor leak of stack memory.  llc: fix info leak via getsockname() What: Major leak of stack memory (up to bytes).  l2tp: fix info leak via getsockname() What: Minor leak of stack memory.  Bluetooth: L2CAP - Fix info leak via getsockname() What: Minor leak of stack memory.  Bluetooth: RFCOMM - Fix info leak via getsockname() What: Minor leak of stack memory.  Bluetooth: RFCOMM - Fix info leak in ioctl(RFCOMMGETDEVLIST) What: Minor leak of heap memory.  Bluetooth: RFCOMM - Fix info leak in getsockopt(BT_SECURITY) What: Minor leak of stack memory.  Bluetooth: HCI - Fix info leak via getsockname() What: Minor leak of stack memory.  Bluetooth: HCI - Fix info leak in getsockopt(HCI_FILTER) What: Minor leak of stack memory.  atm: fix info leak via getsockname() What: Minor leak of stack memory.  atm: fix info leak in getsockopt(SO_ATMPVC) What: Minor leak of stack memory.  net/tun: fix ioctl() based info leaks What: Leak of 36 bytes of stack memory.  udf: avoid info leak on export What: Minor leak of heap memory.  isofs: avoid info leak on export What: Minor leak of heap memory.   Now do follow a few NULL ptr derefs ending up in privilege escalation if a user is able to map page 0 or probably a DoS otherwise. Also those have all been fixed in v3.6 and backported to the corresponding stable/longterm kernels at the time:  xfrm_user: return error pointer instead of NULL What: Wrong return of NULL leads to wrong path in calling function leading to NULL pointer deref of skb.  dccp: check ccid before dereferencing What: Missing NULL pointer check leads to NULL function pointer.   That's all. Enough, I guess ;)   While we are at it: Do we care about getting CVE IDs for info leaks? If so, all of them or only for the ones with leaks above a certain threshold (>= 16 bytes, e.g.)?   Regards, Mathias  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      