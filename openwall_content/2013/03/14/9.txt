  oss-security - Re: Linux kernel + devtmpfs automount == insecure  /dev/{,u}random mode            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 14 Mar From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: gremlin@...mlin.ru Subject: Re: Linux kernel + devtmpfs automount == insecure  /dev/{,u}random mode  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, gremlin@...mlin.ru wrote: > On gremlin@...mlin.ru wrote: >  >>> > >>>  > Yes, I've found that while investigating the possible impact. > Also, >> the random.c doesn't use the data directly, but instead hashes >> it. >  > And that has some impact: the malicious (or just curious) > unprivileged user may run flood the devices with garbage, and the > kernel will spend resources hashing it. >  > Try this: `dd bs=1M if=/dev/zero of=/dev/urandom` >  > On a Core CPU, only 16 processes running for > several minutes result in all cores loaded at 99% and the load > average of 20. My workstation has survived the experiment, but > heavy-loaded servers may dislike that :-) >  >> But my opinion stays exactly the same: devices should be >> and only trusted random data sources should be used to add >> entropy to the pool via add_device_randomness(). So, I'll just >> restrict the access to /dev/{,u}random locally :-) >  > ... and recommend others do the same.  My test results with `dd bs=1M if=/dev/zero of=/dev/urandom` as a normal user:  On a stock Fedora 18 64 bit VM with 3 cpus I tried this with both one and three instances of the dd, load average shot up to like 3 but the system was responsive, nothing noticeable.  But when I set ulimit -t 10 and ran it, it got killed right away. So standard CPU limiting would appear to fix this, so as far as using this for a CPU DoS it doesn't appear to be a problem.  Now should it have less permissive permissions? Yes.  - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  =vNHc -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      