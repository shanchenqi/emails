  oss-security - CVE Request - Quassel IRC SQL injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 9 Oct From: Bas Pape <baspape@...il.com> To: oss-security@...ts.openwall.com Subject: CVE Request - Quassel IRC SQL injection  Hi all,  Please assign a CVE to the following issue: Quassel IRC is vulnerable to SQL injection on all current versions being the latest at the time of writing), if used with Qt (the vulnerability is caused by a change in its postgres driver[1,2]) and PostgreSQL 8.2 or later with standard_conforming_strings enabled (which is the default in those versions). The vulnerability allows anyone to trick the core into executing SQL queries, which includes cascade deleting the entire database. It is tracked upstream in bug [3]. It was firstly noticed by due to minor issues with migration to postgres and problems with certain messages, a simple test with an unmodified installation of postgres and quassel showed that it was indeed possible to drop tables.  No upstream fix is available at this time, although the below patch does fix the current issue.  Regards, Bas Pape (Tucos)  [1] [2] [3]  commit Author: Bas Pape <baspape@...il.com> Date:   Mon Oct 7      Detect the need for standard_conforming_strings.  diff --git a/src/core/postgresqlstorage.cpp b/src/core/postgresqlstorage.cpp index --- a/src/core/postgresqlstorage.cpp +++ b/src/core/postgresqlstorage.cpp @@ @@ void PostgreSqlStorage::initDbSession(QSqlDatabase &db)      // this blows... but unfortunately Qt's PG driver forces us to this...      db.exec("set standard_conforming_strings = off");      db.exec("set escape_string_warning = off"); + +    // Fortunately things can always blow more. Refer to the commit message for +    // the juicy details, tread lightly. +    // First standard_conforming_strings are turned off, because that's what used +    // to be necessary, here the actual behaviour is tested. +    QSqlQuery query = db.exec("SELECT '\\\\' x"); +    if (query.first()) +        if (query.value(0).toString() == "\\") +            db.exec("set standard_conforming_strings = on");  }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      