  oss-security - Re: A note on cookie based sessions            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 4 Oct From: Andri Möll <andri@....ee> To: oss-security@...ts.openwall.com,  kseifried@...hat.com Subject: Re: A note on cookie based sessions  A lot of these frameworks or libraries also offer password remembering features which are often implemented as separate long lived token cookies that can't be invalidated server-side or can't be invalidated per-machine.  Devise for Ruby on Rails does this too, for example, but because of a side-effect of the implementation it can be invalidated by changing the password — the token is a substring of the password hash.  Andri  On Oct 4, at AM, Kurt Seifried <kseifried@...hat.com> wrote:  > -----BEGIN PGP SIGNED MESSAGE----- > Hash: SHA1 >  > On PM, Donald Stufft wrote: >> I don't think this really is a vulnerability is it? I mean it's >> basically how the internet works. The only difference between a >> cooke backed session and a regular session is that there's no >> server side session to destroy. At least in Django's case, It's not >> a permanent session though, they are only good for a limited amount >> of time before the signature on the cookie expires. >>  >> If you have access to the session cookie you've already won the >> game, you've gotten an XSS or MITM and can do much worse then a >> session cookie. >>  >  > Apologies I should have been more explicit. The difference is that > with a stateful backend when the user  hits log out they are logged > out in the back end, so the cookie can't be used any more. With these > stateless solutions there is no way to prevent cookie reply other than > encoding a time out in the cookie (so I guess you could encode like a > short time out and keep rotating the cookie to close the window of > opportunity). >  > The concern is people using public terminals, cookie stealing attacks, > XSS in the website you're using, etc allowing an attacker to snag your > cookie and use it post "log out". >  >  > - --  > Kurt Seifried Red Hat Security Response Team (SRT) > PGP: A90B 66BF > -----BEGIN PGP SIGNATURE----- > Version: GnuPG (GNU/Linux) >  > > > > > > > > > > > > > =Tqge > -----END PGP SIGNATURE-----  Content of type "text/html" skipped  Download attachment "smime.p7s" of type "application/pkcs7-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      