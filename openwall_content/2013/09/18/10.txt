  oss-security - Re: Algorithmic complexity vulnerability  in RubyGems and older            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 19 Sep From: Alexander Cherepanov <cherepan@...me.ru> To: oss-security@...ts.openwall.com CC: Eric Hodel <drbrain@...ment7.net>, kseifried@...hat.com,   "dammer2k@...il.com Sharipov" <dammer2k@...il.com>,  "security@...y-lang.org" <security@...y-lang.org> Subject: Re: Algorithmic complexity vulnerability  in RubyGems and older  On Eric Hodel wrote: > On Sep 16, at Kurt Seifried <kseifried@...hat.com> wrote: >> On PM, Alexander Cherepanov wrote: >>> On Eric Hodel wrote: >>>> The vulnerability can be fixed by changing the first grouping to >>>> an atomic grouping in Gem::Version::VERSION_PATTERN in >>>> lib/rubygems/version.rb.  For RubyGems 2.0.x: >>>> >>>> -  VERSION_PATTERN = >>>> # >>>> :nodoc: +  VERSION_PATTERN = >>>> # >>>> :nodoc: >>>> >>>> For RubyGems 1.8.x: >>>> >>>> -  VERSION_PATTERN = # :nodoc: + >>>> VERSION_PATTERN = # :nodoc: >>> >>> This is not enough. The following script: >>> >>> # Regexes are from  >>> >>> >>> >> VERSION_PATTERN = >>> # >>> :nodoc: ANCHORED_VERSION_PATTERN = >>> /\A\s*(#{VERSION_PATTERN})*\s*\z/ # :nodoc:  >>> =~ ANCHORED_VERSION_PATTERN >>> >>> takes ~1m on my machine. The problem is not in VERSION_PATTERN but >>> in its possible repetition inside ANCHORED_VERSION_PATTERN. >>> >> >> Great, I guess we're going to need a new CVE. Before I assign one can >> we make sure we fix this so more fiddly expressions don't cause >> problems? Thanks. >  > Here's a new patch to go with the new (unassigned) CVE.  This new patch replaces regular expression matches that are susceptible to backtracking with a parser-like approach.  According to your patch 'versions have only one "-" (per semver)'. This means that "*" after "(#{VERSION_PATTERN})" in ANCHORED_VERSION_PATTERN is a bug. It should be "?". If you fix it then there should be no problem with VERSION_PATTERN at all. AFAICT VERSION_PATTERN gives you a linear complexity. Hence there is no need to suppress backtracking...  > This patch applies to RubyGems 2.1.x releases.  I will create patches for RubyGems and if it there is no obvious flaw seen in it. >  > I would like to release this fix by Monday, 23 September as I will be traveling mid-week. >  > The vulnerable regular expression constants are still present, but I can't think of a way to construct them that does not allow backtracking.  ...but if you really want to suppress backtracking (say, for optimization) it is easy: either atomic grouping for every repetition (exactly the way you have already done but for other repetitions also) or add extra "+" after each "+" and "*". That's according to .  --  Alexander Cherepanov  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      