  oss-security - Re: CVE request: proftpd: mod_sftp/mod_sftp_pam invalid  pool allocation during kbdint authentication            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 16 Sep From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Agostino Sarubbo <ago@...too.org> Subject: Re: CVE request: proftpd: mod_sftp/mod_sftp_pam invalid  pool allocation during kbdint authentication  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, Agostino Sarubbo wrote: > Hello, >  > From: > > >  ProFTPd installs with mod_sftp and mod_sftp_pam activated contain > the vulnerability described in this post. >  > The current stable release of ProFTPd is and the current > release candidate is >  > First I have to note that this vulnerability is unlikely to be > exploited. There is a way to control $rip instruction pointer >  > on 64 bit systems, for example on the Ubuntu 64Bit platform but I > believe that it is not possible to get full code execution with > this bug. >  > The bug is useful to trigger a large heap allocation and exhaust > all available system memory of the underlying operating system. >  > Inside the file located at > ProFTPd handles the SSH > keyboard interactive authentication procedure, in this case it will > use pam as an authentication library therefore mod_sftp_pam has to > be active for an installation to be vulnerable. >  > Source code file and line reads: >  > [1] resp_count = sftp_msg_read_int(pkt->pool, &buf, &buflen); >  > [2] list = make_array(p, resp_count, sizeof(char *)); for (i = 0; i > < resp_count; i++) { char *resp; >  > resp = sftp_msg_read_string(pkt->pool, &buf, &buflen); *((char **) > push_array(list)) = pstrdup(p, sftp_utf8_decode_str(p, resp)); } >  > Line 1 will read the kbdint response count which is an unsigned > integer with a size of 32 bits from the client during an SSH kbdint > userauth info response client request. >  > This value is used to allocate a buffer with the size  > user_supplied_uint32_value multiplied by the size of a char pointer > being 32bits or 64bits depending on the platform. >  > There is no size check before the request is sent to the pool > allocator that is called by make_array at Line 2. >  > The pool allocator can be tricked to handle negative allocation > sizes if resp_count is large enough. >  > There is a size check of the response count value but itâ€™s done > after this function returns. >  > The DoS condition can be triggered by sending an int32 value for > resp_count that is slightly below the available memory of the > target system and repeating the request. >  > Noteably OpenSSH vulnerability is very similar to > this ProFTPd vulnerability. It has the very same code path. >  > Here is a reference to the OpenSSH Challenge-Response > Authentication bug that was exploited by GOBBLES Security in their > year sshutuptheo.tgz exploit: >  > Usage of keyboard interactive authentication in ProFTPd mod_sftp is > rare as it is not activated by default.  Please use for this issue.   - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  G7cBhRLIcp+ePR3Pii/R =kR+r -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      