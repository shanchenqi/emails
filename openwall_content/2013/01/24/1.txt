  oss-security - Re: CVE Request coreutils            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 23 Jan From: Vincent Danen <vdanen@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: CVE Request coreutils  * Sebastian Krahmer wrote:  >On Tue, Jan 22, at Vincent Danen wrote: >> * Sebastian Krahmer wrote: >> >>> Generally, I see your point. However sometimes services running as >>> root 'sort' or 'uniq' user input e.g. via grepping logfiles etc, >>> so there is indeed a real chance to indirectly trigger a privilege >>> escalation. The past shows that segfaults can be turned into a >>> code exec often. Its a stack overflow after all. >> >> Do you believe this would be the case with modern GCC/Glibc hardening >> though?  Wouldn't this just be rendered a crash? > >Are you serious? And since when will CVE's not be assigned because >some mitigation could possibly prevent a stack overflow being turned >into code exec?  Sorry, I should have perhaps clarified that a bit more.  That wasn't so much to say "don't assign a CVE" as much as a "is this mitigation sufficient".  I can see, however, how it might have been construed the other way.  >> But even then, if we're talking about logfiles (which is a reasonable >> case) you'd have to be allowing user-controlled input to your logs, >> which would mean you'd have another problem. > >You mean like 'logger -t sshd failed login attempt' ?  Yes, indeed, exactly like that.  =)  Although one would hope that logger has a decent input limit where you couldn't inject a ~10MB long line into syslog.  Regardless, what logger does or doesn't do isn't the issue either.  >> I'm also assuming, based on the comments in the first bug, that you need >> a really large line (not just an entire file, but one line).  How likely >> is it that you would be grepping a log file with ~10MB of data on one >> line? > >Not very common indeed, but I think its not the point (logfiles were >just _one_ example).  Yes, absolutely.  >Nevertheless, you seem to shift your arguments. For each reason/attack vector >I answer, you bring up two new reasons why this not an issue. > >At the end, I did not spot the bug; if the majority thinks its not worth >a CVE, I can live with it. It would just have made tracking easier.  You're right.  I'm inclined to think it isn't an issue (or at least not one really worth filing bugs over, however that is just my personal opinion).  I see that Kurt did indeed assign CVEs, so I'll be filing those bugs regardless.  >PS: Reminds me to the one-year dbus discussion where everyone told me that >this can never be a problem.  You, sir, have a very valid point here.  Thanks for that little reminder.  --  Vincent Danen / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      