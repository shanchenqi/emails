  oss-security - Re: CVE request: Digest::SHA double free when using load subroutine            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 17 Jan (UTC) From: Mark Shelor <mshelor@...n.org> To: oss-security@...ts.openwall.com Subject: Re: CVE request: Digest::SHA double free when using load subroutine  Kurt Seifried <kseifried@...> writes:  > On PM, Florian Weimer wrote: > > * Kurt Seifried: > >  > >> I'm not clear, how would an attacker exploit this? They'd need to > >> be able to specify the file that gets hashed, and the file would > >> have to be not present and would thus trigger the crash? Are > >> there any real world examples of an affected application? (web > >> based?) > >  > > My hunch is that this is just a bug, not a security issue. >  > I'll leave it for now, if anyone comes up with a security impact/etc. > let us know! (I bet this never happens, ah well =).   Digest::SHA is part of the Perl core, so there's a similarity between this case and double-free vulnerability in Perl allowing a DoS (memory corruption and crash).  Currently I see no way for an attacker to exploit this bug to allow arbitrary execution of code from user space.  Any vulnerability of that type would appear to require preexisting vulnerabilities in the Perl/glibc memory allocators.  Regards, Mark (Digest::SHA upstream)      Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      