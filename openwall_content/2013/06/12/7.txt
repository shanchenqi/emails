  oss-security - Re: CVE request: WordPress denial of service vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 13 Jun From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: john-users@...ts.openwall.com Subject: Re: CVE request: WordPress denial of service vulnerability  On Thu, Jun 13, at Alexander Cherepanov wrote: > On Solar Designer wrote: > >Arguably, library code should reject the most insane parameter values. > >For example, musl libc - http://www.musl-libc.org - version > >rejects bcrypt's log2(cost)>  19 and limits SHA-crypt's rounds count > >to<  10M for this reason (original SHA-crypt limits to<  1 billion). >  > On a related note: shouldn't John the Ripper also reject hashes with  > insane run-time or memory cost parameters?  I don't have strong feelings one way or the other, which is why I haven't implemented this so far.  Also, in JtR we did not support any hashes/ciphers with configurable memory cost until very recently, so that part of the issue did not arise.  As to processing time cost, in JtR it's at worst a DoS against a cracking run, which the user would notice and hopefully deal with.  Yes, having some warnings printed could help pinpoint the culprit hashes - we can add that.  As to the memory usage issue, maybe we need to have a configurable total memory limit (in john.conf) - not a per-hash limit.  We could use RLIMIT_AS (or the like) where supported.  It's more reliable than doing our own memory usage tracking, although then we'd need to ensure we're able to print a sensible error message when that limit is almost reached (this is not difficult, it's just something not to overlook).  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      