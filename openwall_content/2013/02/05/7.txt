  oss-security - Xen Security Advisory 36 - interrupt remap  entries shared and old ones not cleared on AMD IOMMUs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 05 Feb From: Xen.org security team <security@....org> To: xen-announce@...ts.xen.org, xen-devel@...ts.xen.org,  xen-users@...ts.xen.org, oss-security@...ts.openwall.com CC: Xen.org security team <security@....org> Subject: Xen Security Advisory 36 - interrupt remap  entries shared and old ones not cleared on AMD IOMMUs  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  	     Xen Security Advisory / XSA-36 			      version 3    interrupt remap entries shared and old ones not cleared on AMD IOMMUs  UPDATES IN VERSION 3 ====================  Public release.  ISSUE DESCRIPTION =================  To avoid an erratum in early hardware, the Xen AMD IOMMU code by default chooses to use a single interrupt remapping table for the whole system.  This sharing implies that any guest with a passed through PCI device that is bus mastering capable can inject interrupts into other guests, including domain 0.  Furthermore, regardless of whether a shared interrupt remapping table is in use, old entries are not always cleared, providing opportunities (which accumulate over time) for guests to inject interrupts into other guests, again including domain 0.  In a typical Xen system many devices are owned by domain 0 or driver domains, leaving them vulnerable to such an attack. Such a DoS is likely to have an impact on other guests running in the system.  IMPACT ======  A malicious domain which is given access to a physical PCI device can mount a denial of service attack affecting the whole system.  VULNERABLE SYSTEMS ==================  Xen versions 3.3 onwards are vulnerable.  Earlier Xen versions do not implement interrupt remapping, and hence do not support secure AMD-Vi PCI passthrough in any case.  Only systems using AMD-Vi for PCI passthrough are vulnerable.  Any domain which is given access to a PCI device can take advantage of this vulnerability.  MITIGATION ==========  This issue can be avoided by not assigning PCI devices to untrusted guests.  In Xen versions and above the sharing of the interrupt remapping table (and hence the more severe part of this problem) can be avoided by passing "iommu=amd-iommu-perdev-intremap" as a command line option to the hypervisor.  This option is not fully functional on earlier hypervisors.  RESOLUTION ==========  Applying the appropriate attached patch resolves this issue.  Note that on certain systems chipsets with erratum 28 present, or such with broken IVRS ACPI table) these patches will result in the IOMMU not being enabled anymore.  This should be dealt with by a BIOS update, if available.  Alternatively the check can be overridden by specifying "iommu=no-amd-iommu-perdev-intremap" on the Xen command line ("iommu=amd-iommu-global-intremap" on 4.1.x), at the price of re-opening the security hole addressed by these patches.  xsa36-unstable.patch              Xen unstable                   Xen 4.2.x                   Xen 4.1.x  $ xsa36*.patch    xsa36-unstable.patch $ -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  =5jP3 -----END PGP SIGNATURE-----  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment "xsa36-unstable.patch" of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      