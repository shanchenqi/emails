  oss-security - Re: CVE request - Linux kernel: VFAT slab-based buffer  overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 28 Feb (CET) From: Jiri Kosina <jikos@...os.cz> To: oss-security@...ts.openwall.com Subject: Re: CVE request - Linux kernel: VFAT slab-based buffer  overflow  On Wed, 27 Feb Greg KH wrote:  > > > If you know of any other ways that we can do this, please let us know. > >  > > - W^X >  > I thought we tried this, and had to revert it due to problems it caused > with some dyanmic code generators.  Or am I totally mistaken here?  Userspace is problematic in this respect, agreed (because of all the JIT  stuff, for example).  I am speaking more in terms of kernel now. I.e. having clear separation of  kernel RO-data and kernel code. Basically what grsecurity/PAX is doing  with their CONFIG_PAX_KERNEXEC, but with hardware support whenever  possible (i.e. minimizing runtime performance penalty).  > > - not letting kernel dereference userspace pointers (and PMAP is not  > >   available everywhere, unfortunately) >  > What do you mean by this?  If you trick kernel into derefereing pointer outside it's mapped space  (i.e. address lower than TASK_SIZE, thus fully controller by potentially  evil userspace), it'll happily do that (modulo incomplete  counter-measures, such as vm.mmap_min_addr sysctl).  Thanks,  --  Jiri Kosina  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      