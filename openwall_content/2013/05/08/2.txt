  oss-security - When does resource consumption become a security vulnerability?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 08 May From: Kurt Seifried <kseifried@...hat.com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: When does resource consumption become a security vulnerability?  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  When does resource consumption become a security vulnerability?  "It's not a tumour!"  Originally posted as  Ok so this is one of those lovely grey areas of information security, this is obviously a security related issue, but is this a security vulnerability (requiring CVE and full security treatment) or is this a security hardening issue (thus no CVE or full security treatment)?  So first let's look at trust boundaries. Now the end problem here is that the database gets filled up by spurious log entries. What level of access is needed to accomplish this? Luckily in this case it requires authenticated access, this cannot be done as a non authenticated user from what I am told (if this isn't true please let us know ASAP!). As such if an anonymous user was able to remotely flood the database that would be an obvious security problem, they could kill the system remotely which usually falls into the category of security vulnerability.  But in this case it requires authenticated access, and in general users are allowed to consume system resources, however typically we do not want to allow a single user, or even a group of users to consume resources in a way that renders the system unstable or unusable. In this case filling up the database has a very negative effect on the system.  So this issue falls into the grey area of "is it security or hardening?" and then further falls down the rabbit hole of "how much and how quickly do we allow a user to consume system resources before we call it a security vulnerability?" So clearly the amount of data logged has a significant impact on this. For example if each pause/unpause/etc action generated say a megabyte of logged data this would be extremely easy to use to fill up the database (even a large database would fill quickly at 1meg/entry). In this case it's approximately 1k per entry, which is enough to make it interesting, assuming a few gigabytes are available then it would take some time for the attacker to exploit this enough times to cause a problem. Additionally because it requires authenticated access it is easy to track down who did it and censor them (e.g. tell them not to do it, remove their account, whatever).  So with this in mind I am inclined to classify this as a security hardening issue, and not a security vulnerability. This may of course change if new information comes to light (e.g. unauthenticated access allows exploitation, or the amount of data logged per entry can be increased somehow).  Now a note on fixing this: there are several strategies used in logging systems to deal with attacks like this. The first one is a classic syslog "the last message was repeated X times", this allows multiple identical log entries to be consolidated quickly and easily, reducing the amount of logging space required and can work well with flooding attacks. The second strategy is to rotate and archive the logs once they hit a certain size (log files typically compress really well). Of course neither of these solutions will completely stop resources from being used, but they will reduce the amount of some of the resources used (e.g. disk space) at the cost of CPU time (to rotate/compress logs).  There are other solutions that will prevent resources from being abused, but will compromise the integrity of the data available, e.g. using a ring buffer per user (log the last events and then overwrite the oldest event once you get more than This would allow an attacker to attack the system in ways that are typically logged, and then cause the log of these activities to be overwritten by executing non malicious logged events for example. You can also trade off availability for logging data, for example by blocking actions that can't be logged because the logging is full or has failed. I suspect in almost every use case instance of OpenStack this is not an acceptable trade off.  TLDR: this is probably security hardening and not a security flaw. We should fix it by rotating the database entries out and compressing them, as configured by the user.   - --  Kurt Seifried Red Hat Security Response Team (SRT) PGP: A90B 66BF -----BEGIN PGP SIGNATURE----- Version: GnuPG (GNU/Linux)  =5Dy6 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      