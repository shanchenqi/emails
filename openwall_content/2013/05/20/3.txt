  oss-security - tty-hijacking & - redux            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 20 May From: "mancha" <mancha1@...h.com> To: oss-security@...ts.openwall.com Subject: tty-hijacking & - redux  Hello.  A recent use-case on Slackware made me re-visit in the context of "su -c". Particularly, shadow's implementation as of shadow  During the discussions of this CVE (see footer links), it was pointed out shadow's fix is partial given interactive su remains vulnerable to tty-hijacking. It was also mentioned this vector is less worrisome given use cases for interactive su are primarily privilege escalation.  The CVE was always a bit controversial with many believing using su and sudo to drop privileges is unsafe and more an administration issue than a design flaw.  All that said, at the very least would it be reasonable to apply the same threat-assessment criterion to the crippling of "su -c" and not drop the controlling tty for the case when the callee is root?  Slackware doesn't use PAM so the fix in shadow relies on a TIOCNOTTY ioctl() request and not a setsid() call. One result of this change is summarized in the table below:                                          shadow                                    1. As unpriv user user1: xterm -e su -c $COMM          SUCCESS    FAIL     SUCCESS xterm -e su user2 -c $COMM    SUCCESS    FAIL     FAIL  2. As root: xterm -e su user1 -c $COMM    SUCCESS    FAIL     FAIL  ----- * See attached  Cheers.  --mancha   ===  [1] [2] Download attachment of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      