  oss-security - Fwd: [ANNOUNCE] X.Org Security Advisory: Protocol handling issues  in X Window System client libraries            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 23 May From: Alan Coopersmith <alan.coopersmith@...cle.com> To: oss-security@...ts.openwall.com CC: Ilja Van Sprundel <ivansprundel@...ctive.com> Subject: Fwd: [ANNOUNCE] X.Org Security Advisory: Protocol handling issues  in X Window System client libraries     -------- Original Message -------- Subject: [ANNOUNCE] X.Org Security Advisory: Protocol handling issues in X  Window System client libraries Date: Thu, 23 May From: Alan Coopersmith <alan.coopersmith@...cle.com> To: xorg-announce@...ts.x.org CC: xorg@...ts.x.org, xorg-devel@...ts.x.org  X.Org Security Advisory:  May 23, Protocol handling issues in X Window System client libraries ============================================================  Description: ============  Ilja van Sprundel, a security researcher with IOActive, has discovered a large number of issues in the way various X client libraries handle the responses they receive from servers, and has worked with X.Org's security team to analyze, confirm, and fix these issues.  Most of these issues stem from the client libraries trusting the server to send correct protocol data, and not verifying that the values will not overflow or cause other damage.   Most of the time X clients & servers are run by the same user, with the server more privileged from the clients, so this is not a problem, but there are scenarios in which a privileged client can be connected to an unprivileged server, for instance, connecting a setuid X client (such as a screen lock program) to a virtual X server (such as Xvfb or Xephyr) which the user has modified to return invalid data, potentially allowing the user to escalate their privileges.  The X.Org security team would like to take this opportunity to remind X client authors that current best practices suggest separating code that requires privileges from the GUI, to reduce the attack surface of issues like this.  The vulnerabilities include:  - integer overflows calculating memory needs for replies       These calls do not check that their calculations for how much memory      is needed to handle the returned data have not overflowed, so can      result in allocating too little memory and then writing the returned      data past the end of the allocated buffer.       * libX11 (1.6 RC1) and earlier        Affected functions:  XQueryFont(), _XF86BigfontQueryFont(),            XListFontsWithInfo(), XGetMotionEvents(), XListHosts(),            XGetModifierMapping(), XGetPointerMapping(), XGetKeyboardMapping(),            XGetWindowProperty(), XGetImage()       * libXext and earlier        Affected functions:  XcupGetReservedColormapEntries(),            XcupStoreColors(), XdbeGetVisualInfo(), XeviGetVisualInfo(),            XShapeGetRectangles(), XSyncListSystemCounters()       * libXfixes 5.0 and earlier        Affected functions:  XFixesGetCursorImage()       * libXi and earlier        Affected functions:  XGetDeviceControl(), XGetFeedbackControl(),            XGetDeviceDontPropagateList(), XGetDeviceMotionEvents(),            XIGetProperty(), XIGetSelectedEvents(), XGetDeviceProperties(),            XListInputDevices()       * libXinerama and earlier        Affected functions:  XineramaQueryScreens()       * libXp and earlier        Affected functions:  XpGetAttributes(), XpGetOneAttribute(),            XpGetPrinterList(), XpQueryScreens()       * libXrandr and earlier        Affected functions:  XRRQueryOutputProperty(), XRRQueryProviderProperty()           [XRRQueryProviderProperty() was introduced in libXrandr and is            not found in and older releases.]       * libXrender and earlier        Affected functions:  XRenderQueryFilters(), XRenderQueryFormats(),            XRenderQueryPictIndexValues()       * libXRes and earlier        Affected functions:  XResQueryClients(), XResQueryClientResources()       * libXtst and earlier        Affected functions:  XRecordGetContext()       * libXv and earlier        Affected functions:  XvQueryPortAttributes(), XvListImageFormats(),            XvCreateImage()       * libXvMC and earlier        Affected functions:  XvMCListSurfaceTypes(), XvMCListSubpictureTypes()       * libXxf86dga and earlier        Affected functions:  XDGAQueryModes(), XDGASetMode()       * libdmx and earlier        Affected functions:  DMXGetScreenAttributes(), DMXGetWindowAttributes(),            DMXGetInputAttributes()       * libxcb 1.9 and earlier        Affected functions:  read_packet()       * libGLX in Mesa and earlier        Affected functions:  XF86DRIOpenConnection(), XF86DRIGetClientDriverName()       * libchromeXvMC & libchromeXvMCPro in openChrome        and earlier        Affected functions:  uniDRIOpenConnection(), uniDRIGetClientDriverName()  - sign extension issues calculating memory needs for replies       These calls do not check that their calculations for how much memory      is needed to handle the returned data have not had sign extension      issues when converting smaller integer types to larger ones, leading      to negative numbers being used in memory size calculations that can      result in allocating too little memory and then writing the returned      data past the end of the allocated buffer.       * libXi and earlier        Affected functions:  XListInputDevices()       * libFS and earlier        Affected functions:  FSOpenServer()  - buffer overflows due to not validating length or offset values in replies       These calls do not check that the lengths and/or indexes returned by the      server are within the bounds specified by the caller or the bounds of the      memory allocated by the function, so could write past the bounds of      allocated memory when storing the returned data.       * libX11 (1.6 RC1) and earlier        Affected functions:  XAllocColorCells(), _XkbReadGetDeviceInfoReply(),            _XkbReadGeomShapes(), _XkbReadGetGeometryReply(), _XkbReadKeySyms(),            _XkbReadKeyActions(), _XkbReadKeyBehaviors(), _XkbReadModifierMap(),            _XkbReadExplicitComponents(), _XkbReadVirtualModMap(),            _XkbReadGetNamesReply(), _XkbReadGetMapReply(), _XimXGetReadData(),            XListFonts(), XListExtensions(), XGetFontPath()       * libXi and earlier        Affected functions:  XGetDeviceButtonMapping(), _XIPassiveGrabDevice(),            XQueryDeviceState()       * libXv and earlier        Affected functions:  XvQueryPortAttributes()       * libXvMC and earlier        Affected functions:  XvMCGetDRInfo()       * libXxf86dga and earlier        Affected functions:  XDGAQueryModes(), XDGASetMode()       * libXxf86vm and earlier        Affected functions:  XF86VidModeGetGammaRamp()       * libXt and earlier        Affected functions:  _XtResourceConfigurationEH()  - integer overflows parsing user-specified files       These calls do not check that their calculations for how much memory      is needed to handle the data being read have not overflowed, so can      result in allocating too little memory and then writing the returned      data past the end of the allocated buffer.       * libX11 (1.6 RC1) and earlier        Affected functions:  LoadColornameDB(), XrmGetFileDatabase(),            _XimParseStringFile(), TransFileName()       * libXcursor and earlier        Affected functions:  _XcursorFileHeaderCreate()  - unbounded recursion parsing user-specified files       These calls read in files and handle C-style '#include' directives      to include other files, and have no limit for how many levels deep      they will go, including allowing files to #include themselves, until      the stack overflows from the recursive function calling patterns.       * libX11 (1.6 RC1) and earlier        Affected functions:  GetDatabase(), _XimParseStringFile()  - memory corruption due to unchecked return values       These calls assume that pointers are properly initialized by the      XGetWindowProperty() function and don't check for failure of the      function to return a valid window property, which can lead to      use of uninitialized pointers for reading, writing, or passing to      functions such as free().   XGetWindowProperty() in libX11      and earlier did not ensure returned pointers were initialized      to NULL when returning a failure (this is fixed in libX11      and later).       * libXt and earlier        Affected functions:  ReqCleanup(), HandleSelectionEvents(),            ReqTimedOut(), HandleNormal(), HandleSelectionReplies()  Affected Versions =================  X.Org believes all prior versions of these libraries contain these flaws, dating back to their introduction.  Versions of the X libraries built on top of the Xlib bridge to the XCB framework are vulnerable to fewer issues than those without, due to the added safety and consistency assertions in the XCB calls to read data from the network, but most of these vulnerabilities are not caught by those checks.  Fixes =====  Fixes are available in git commits and patches which will be listed on when this advisory is released.  Fixes will also be included in these module releases from X.Org:       libX11 (1.6 RC2)      libXcursor      libXext      libXfixes      libXi      libXinerama      libXp      libXrandr      libXrender      libXRes      libXv      libXvMC      libXxf86dga      libXxf86vm      libdmx      libxcb      libFS      libXt  or releases to be determined from our sister projects:      xf86-video-openchrome    OpenChrome project - http://www.openchrome.org/      Mesa                     Mesa3D project - http://www.mesa3d.org/  Thanks ======  X.Org thanks Ilja van Sprundel of IOActive for reporting these issues to our security team and assisting them in understanding them and evaluating our fixes, and Alan Coopersmith of Oracle for coordinating the X.Org response and developing the fixes for these issues.  --  	-Alan Coopersmith-              alan.coopersmith@...cle.com 	  X.Org Security Response Team - xorg-security@...ts.x.org     Download attachment "Attached Message Part" of type "application/pgp-signature" bytes)  View attachment "Attached Message Part" of type "text/plain" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      