  oss-security - Re: CVE request: kernel: gdth: integer overflow in  ioc_general()            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 9 Nov (EST) From: Petr Matousek <pmatouse@...hat.com> To: Dan Rosenberg <dan.j.rosenberg@...il.com> Cc: coley@...us.mitre.org, oss-security@...ts.openwall.com Subject: Re: CVE request: kernel: gdth: integer overflow in  ioc_general()  ----- "Dan Rosenberg" <dan.j.rosenberg@...il.com> wrote:  > This is not actually a security issue.  See the code: >  > ... > if (!(buf = gdth_ioctl_alloc(ha, gen.data_len + gen.sense_len, >                                      FALSE, &paddr))) >             return -EFAULT; > if (copy_from_user(buf, arg + sizeof(gdth_ioctl_general), >                            gen.data_len + gen.sense_len)) { > ... >  > If gen.data_len + gen.sense_len > UINT_MAX, then a small buffer will > be allocated.  But then the copy_from_user() will always fault before > copying any data over because the access_ok() check will fail on > sizes > > UINT_MAX.  It's definitely a bug, but not a vulnerability.  #define SIZE  ...     volatile unsigned long t = SIZE;  // volatile so that it does not get optimised (error)      printk("nada: %lx\n", current_thread_info()->addr_limit.seg);     printk("nada2: %lx\n", access_ok(VERIFY_READ, 0, t));     printk("nada3: %lx\n", t);     printk("nada4: %lx\n", t > UINT_MAX); ...  nada: nada2: 1 nada3: nada4: 1  >  > On Mon, Nov 8, at PM, Petr Matousek <pmatouse@...hat.com> > wrote: > > "gdth_ioctl_alloc() takes the size variable as an int. > > copy_from_user() takes the size variable as an unsigned long. > > gen.data_len and gen.sense_len are unsigned longs. > > On longs are 64 bit and ints are 32 bit. > > > > We could pass in a very large number and the allocation would > truncate > > the size to 32 bits and allocate a small buffer. Â Then when we do > the > > copy_from_user(), it would result in a memory corruption." > > > > Upstream commit: > > > > > > > Credit: James E.J. Bottomley > > > > Reference: > > > > > > > > Thanks, > > -- > > Petr Matousek / Red Hat Security Response Team > >  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      