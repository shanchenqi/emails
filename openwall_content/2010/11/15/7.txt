  oss-security - Re: econet iovec            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 15 Nov From: Dan Rosenberg <dan.j.rosenberg@...il.com> To: oss-security@...ts.openwall.com Subject: Re: econet iovec  This makes sense to me.  Just so everyone's on the same page:  (kernel heap overflow in TIPC) and (kernel panic and potentially heap corruption in L2TP) are both fixed by improved sanity checking on iovec input and new limits on network I/O size.  The above mentioned issue in Econet (kernel panic due to integer overflow in sk_buff allocation size on native Econet hardware) is no longer an issue due to the previously mentioned fixes.  This has not received a CVE, nor do I necessarily think it needs one.  There are likely other protocols that had issues resolved by these fixes.  I can dig some up if necessary, but I don't really see the point.  -Dan  On Mon, Nov 15, at PM, Steven M. Christey <coley@...us.mitre.org> wrote: > > On Sun, 14 Nov Dan Rosenberg wrote: > >> This also raises a question of whether it's worth assigning CVEs to every >> vulnerability that was fixed by a single change in the core code. I'm >> leaning towards "no". > > This is a big can of worms CVE-wise, since there can be multiple ways to fix > a single issue.  As a result, I've come to believe that you shouldn't try to > define a vulnerability exclusively in terms of its fix.  In practice within > CVE, if a single fix addresses an already-public CVE-xyz and a whole bunch > of other things, then we (generally) keep the already-public CVE as is, and > assign a new CVE(s) to the "bunch of other things" that are simultaneously > addressed. > > For example - in package XYZ, you might have both XSS and SQL injection, > where the XSS is fixed by input validation (say, by ensuring that a numeric > input is actually converted to a number).  This fix will inadvertently > address SQL injection, but a different XSS fix - say, proper encoding - > would not. > > This is one of those areas where we can't be completely consistent in CVE, > and the amount of available information directly affects how many CVEs get > assigned. > > - Steve >  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      