  oss-security - Re: Linux kernel proactive security hardening            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 10 Nov From: Kees Cook <kees@...ntu.com> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel proactive security hardening  On Mon, Nov 08, at Solar Designer wrote: > On a more relevant issue (to us), any ideas on dealing with kernel stack > infoleaks in a general manner (not just plugging the bugs one by one)? > I guess it could be addressed in gcc (an option to wipe stack frames) or > in the kernel (wipe even more of the stack, beyond the stack pointer, on > syscall entry).  Unfortunately, either has likely measurable performance > impact.  (BTW, has some of this been implemented somewhere already?) > Any other ideas?  I haven't seen this, but it seems like a good idea. I'd assume the most efficient solution would be a compiler modification that did the stack clearing after raising the stack pointer from a call. I can't imagine it would be too expensive since that area of the stack should already be in CPU memory cache.  > In the absence of cheap-enough general solution/workaround in the > kernel, I'm afraid we'll need to resort to improving and using automated > tools to detect bugs of this nature - which is apparently what you and > Vasiliy were doing lately?  What tools did you use?  Dan has been using grep. :) I and Vasiliy have been using coccinelle. I am planning on writing up my adventures soon; I have a giant ruleset for matching "good" uses of copy_from_user() so that I can manually audit the less-obviously-correct uses.  -Kees  --  Kees Cook Ubuntu Security Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      