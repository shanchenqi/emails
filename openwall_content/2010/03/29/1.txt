  oss-security - CVE request: kernel: ipv6: skb is unexpectedly freed (remote DoS)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 29 Mar From: Eugene Teo <eugeneteo@...nel.sg> To: oss-security@...ts.openwall.com CC: "Steven M. Christey" <coley@...us.mitre.org> Subject: CVE request: kernel: ipv6: skb is unexpectedly freed (remote DoS)  Upstream commit:  Description from the commit: "The server side sets IPV6_RECVPKTINFO on a listening socket, and the  client side just sends a message to the server.  Then the kernel panic  occurs on the server.  This problem happens because a skb is forcibly freed in tcp_rcv_state_process().  When a socket in listening state(TCP_LISTEN) receives a syn packet, then tcp_v6_conn_request() will be called from tcp_rcv_state_process().  If  the tcp_v6_conn_request() successfully returns, the skb would be  discarded by __kfree_skb().  However, in case of a listening socket which was already set  IPV6_RECVPKTINFO, an address of the skb will be stored in treq->pktopts  and a ref count of the skb will be incremented in tcp_v6_conn_request().    But, even if the skb is still in use, the skb will be freed.  Then  someone still using the freed skb will cause the kernel panic."  Triggering this could result in a general protection fault.  Reference:  Thanks, Eugene  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      