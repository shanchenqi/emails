  oss-security - Re: CVE Request: libesmtp does not check NULL bytes  in commonName            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 11 Mar From: Brian Stafford <brian@...fford.uklinux.net> To: Ludwig Nussel <ludwig.nussel@...e.de> Cc: oss-security@...ts.openwall.com, libesmtp@...fford.uklinux.net, 	security@...ntu.com Subject: Re: CVE Request: libesmtp does not check NULL bytes  in commonName  Ludwig Nussel wrote: > Brian Stafford wrote: >    >> Ludwig Nussel wrote: >>      >>> The attached patch includes the patch from Debian. However, the >>> match_domain() function probably should be rewritten anyways I >>> guess. It matches patters such as 'foo.bar.*' which is rather weird. >>>        >> [...] >> RFC does not constrain which domain name components may contain  >> wildcards. Names such as *.bar.com, foo.*.com and foo.bar.* are  >> therefore all valid despite the latter two cases appearing  >> unconventional.  The examples from RFC show wildcards only in the  >> leading domain name components. Examples are neither normative nor  >> exhaustive and may not therefore imply constraints or extensions of a  >> standard's normative text. Comparison bugs aside, I believe that  >> libESMTP's behaviour correctly implements RFC in this respect. >>      > > Hmm. Yes, RFC could be interpretet that way. RFCs (IMAP), > (NNTP) and (LDAP) restrict wildcards to the leftmost > component. The LDAP one doesn't allow wildcards in CN's though and > none of them explicitly disallows use of the CN if a subjAltname is > present. RFC (SMTP) doesn't tell how matching should be > performed. perl-IO-Socket therefore doesn't allow wildcards for > smtp. perl-IO-Socket has the most flexible implementation I've seen > so far but intentionally only supports one wildcard at the leftmost > side. What a mess. > > cu > Ludwig > >    Hmm, looking over RFC again, I'm wondering where I originally got  the inspiration to use RFC as the reference for checking domain  names in certificates.  One possibility is Eric Rescorla's SSL/TLS book  (he is also the author of RFC I'll have a look there again later.  RFC states     The decision of whether or not to believe the authenticity of the    other party in a TLS negotiation is a local matter.  which is not normative language (i.e. has not been phrased with MUST,  SHOULD, REQUIRED etc) but implies that *any* policy is suitable (as long  as both communicating parties implement that policy).  Worse, this means  there is no interoperable standard for validating certificates used to  secure SMTP over TLS, We cannot even make the decision that fully  flexible wildcards, leading wildcards only or no wildcards at all is the  way to go.  Furthermore, we cannot even decide which fields within the  certificate are to be used.  I find myself coming back to RFC being a reasonable choice since it  is flexible and (almost) clear, and since HTTPS, as a major user of TLS,  is, I assume, well analysed for security implications wrt certificate  validation.   Is it the case that for STARTTLS in SMTP what we are really interested  in is encrypting the data on the wire and authentication is only of  secondary importance?  Do we know what the best current practice is  among CAs when it comes to issuing certificates for STARTTLS?  Brian  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      