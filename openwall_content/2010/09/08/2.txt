  oss-security - [PATCH 1/3] setup_arg_pages: diagnose excessive argument size            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue,  7 Sep (PDT) From: Roland McGrath <roland@...hat.com> To: Linus Torvalds <torvalds@...ux-foundation.org>,         Andrew Morton <akpm@...ux-foundation.org> CC: linux-kernel@...r.kernel.org, oss-security@...ts.openwall.com,         Solar Designer <solar@...nwall.com>,         Kees Cook <kees.cook@...onical.com>, Al Viro <viro@...iv.linux.org.uk>,         Andrew Morton <akpm@...ux-foundation.org>,         Oleg Nesterov <oleg@...hat.com>,         KOSAKI Motohiro <kosaki.motohiro@...fujitsu.com>,         Neil Horman <nhorman@...driver.com>, linux-fsdevel@...r.kernel.org,         pageexec@...email.hu,         "Brad Spengler <spender@...ecurity.net>     Eugene Teo" <eugene@...hat.com> Subject: [PATCH 1/3] setup_arg_pages: diagnose excessive argument size  The CONFIG_STACK_GROWSDOWN variant of setup_arg_pages() does not check the size of the argument/environment area on the stack. When it is unworkably large, shift_arg_pages() hits its BUG_ON. This is exploitable with a very large RLIMIT_STACK limit, to create a crash pretty easily.  Check that the initial stack is not too large to make it possible to map in any executable.  We're not checking that the actual executable (or intepreter, for binfmt_elf) will fit.  So those mappings might clobber part of the initial stack mapping.  But that is just userland lossage that userland made happen, not a kernel problem.  Signed-off-by: Roland McGrath <roland@...hat.com> ---  fs/exec.c |    5 +++++  1 files changed, 5 insertions(+), 0 deletions(-)  diff --git a/fs/exec.c b/fs/exec.c index --- a/fs/exec.c +++ b/fs/exec.c @@ @@ int setup_arg_pages(struct linux_binprm *bprm,  #else  	stack_top = arch_align_stack(stack_top);  	stack_top = PAGE_ALIGN(stack_top); + +	if (unlikely(stack_top < mmap_min_addr) || +	    unlikely(vma->vm_end - vma->vm_start >= stack_top - mmap_min_addr)) +		return -ENOMEM; +  	stack_shift = vma->vm_end - stack_top;    	bprm->p -= stack_shift;  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      