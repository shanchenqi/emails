  oss-security - Re: CVE Request -- Python -- accept() implementation  in async core is broken => more subcases            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 24 Sep (EDT) From: "Steven M. Christey" <coley@...us.mitre.org> To: oss-security@...ts.openwall.com cc: David Malcolm <dmalcolm@...hat.com>,         "Steven M. Christey" <coley@...us.mitre.org> Subject: Re: CVE Request -- Python -- accept() implementation  in async core is broken => more subcases   On Wed, 22 Sep Josh Bressers wrote:  > Any update on this Steve?  This was a weird one to deal with.  There are a couple different  approaches.  We don't capture API "design limitations" in CVE (it would basically be  like assigning a CVE to "strcpy can be called with parameters that are  longer than the output buffer" or "setuid requires that the programmer  must check the return code to ensure that privileges were dropped.")  In this case, there is a "proper" way to handle the accept() behavior;  i.e. by catching the appropriate exceptions and accounting for an unusual  return value, the programmer can use the API safely.  That would argue for  treating it like strcpy/setuid/etc. design limitations, and holding  application programmers "responsible" for using it incorrectly.  However, there isn't some security-relevant documentation about these  specific API limitations.  So, a CVE could be assigned for the missing  documentation; alternately, we could treat it as "undocumented behavior"  in the API.  (This wouldn't be the first CVE related to documentation.)  Then, individual programs that happen to use the unpatched/older Pythons  can be held responsible for not accounting for this; similar to how we  "blame" applications for allowing XSS due to some non-standard  implementations within Internet Explorer, or Firefox, etc.  So:  - Python poor documentation of accept() behavior  - smtpd.py not catching errors generated by handle_accept  - pyftpdlib not catching errors generated by handle_accept  - ZODB not catching errors generated by handle_accept   - Steve  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      