  oss-security - Interesting kernel bug            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 24 Sep From: Dan Rosenberg <dan.j.rosenberg@...il.com> To: oss-security@...ts.openwall.com Subject: Interesting kernel bug  A bug I found was just fixed upstream:  Disregard the commit statement's mention of a reliable trigger, since none exists - a result of a combination of miscommunication and careless reporting on my part.  The bug was introduced in May and affects >= so no distros would appear to be affected.  In 32-bit compatibility mode, when invoking the readv() or writev() syscalls, if the provided user pointer and length result in an access_ok() check failing, then an uninitialized pointer on the stack will be kfree()'d.  This is likely to be an exploitable condition (for example, via pre-initializing the stack with other carefully chosen syscalls, allowing control of the pointer).  It came up during discussion that on the access_ok() will never fail, because there's no way for a user running in 32-bit mode to supply an address that's outside of userspace address range. However, it's possible that this may be triggerable on other architectures that I know less about.  was mentioned at one point.  Anyone who knows more about miscellaneous architectures and their address space segmentations?  Perhaps it affects someone after all. As of now, I don't think this could be considered a security issue since it appears to be completely not exploitable, but maybe someone more knowledgeable could shed more light on the issue.  -Dan  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      