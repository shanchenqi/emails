  oss-security - Re: CVE request: kernel: Heap corruption in ROSE            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 21 Sep From: Eugene Teo <eugene@...hat.com> To: oss-security@...ts.openwall.com CC: Dan Rosenberg <dan.j.rosenberg@...il.com>,         "Steven M. Christey" <coley@...us.mitre.org> Subject: Re: CVE request: kernel: Heap corruption in ROSE  On PM, Dan Rosenberg wrote: > When binding a ROSE socket, the "srose_ndigis" field of the > user-provided sockaddr_rose struct is intended to be restricted to > less than ROSE_MAX_DIGIS.  However, since this field is a signed > integer, this check will pass when provided with a negative value, > allowing the "source_ndigis" field of the rose_sock struct (which is > an unsigned char) to be set to arbitrary values.  Then, by calling a > function such as rose_getname(), heap corruption results, since this > field is used as a maximum index to read from and write into an array > of ROSE_MAX_DIGIS size.  This can only be triggered by unprivileged > users when a ROSE device (e.g. rose0) exists. > > Reference (and fix): >  Please use  Thanks, Eugene --  main(i) { >> (i-1) * && main(++i); }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      