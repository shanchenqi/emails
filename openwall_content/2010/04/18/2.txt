  oss-security - CVE request: fetchmail DoS in -v -v mode in multibyte  locales on invalid input            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sun, 18 Apr From: "Matthias Andree" <matthias.andree@....de> To: oss-security@...ts.openwall.com Subject: CVE request: fetchmail DoS in -v -v mode in multibyte  locales on invalid input  Please assign a CVE id for the issue described below. (Best viewed in   non-proportional font with 8 space tabs):   Draft announcement:  - DRAFT - XXX - DRAFT -  Denial of service in debug mode w/ multichar locales  Topics:		Denial of service in debug output.  Author:		Matthias Andree Version:	0.1 XXX Announced:	XXX Type:		malloc() Buffer overrun with printable characters Impact:		Denial of service. Danger:		low  CVE CVSSv2:		XXX Project URL:	http://www.fetchmail.info/  Affects:	fetchmail releases up to and including  Not affected:	fetchmail release and newer  Git (XXX)   0. Release history ==================  0.1	first draft (visible in SVN and through oss-security) XXX   1. Background =============  fetchmail is a software package to retrieve mail from remote POP2, POP3, IMAP, ETRN or ODMR servers and forward it to local SMTP, LMTP servers or message delivery agents. It supports SSL and TLS security layers through the OpenSSL library, if enabled at compile time and if also enabled at run time.   2. Problem description and Impact =================================  In debug mode (-v -v), fetchmail prints information that was obtained from   the upstream server (POP3 UIDL lists) or from message headers retrieved from   it.    If printing such information fails, for instance because there are   invalid multibyte character sequences in this information (message headers),   fetchmail will misinterpret this condition, and believe that the buffer was too   small, and reallocate a bigger one (with linearly increasing buffer size), and   repeat, until the allocation fails. At that point, fetchmail will abort.  Note that the "Affects:" line above may be inaccurate, and it may be that versions before are actually unaffected.  The author was unable to compile such old fetchmail versions to verify the existence of the bug.    Given that other security issues are present in such versions, those   should not be used, and the wider version range was listed as vulnerable to err towards the safe.   3. Solution ===========  There are two alternatives, either of them by itself is sufficient:  a. Apply the patch found in section B of this announcement to     fetchmail or newer, recompile and reinstall it.  b. Install fetchmail or newer after it will have become available.     The fetchmail source code is always available from       4. Workaround =============  Run fetchmail with at most one -v (--verbose) option.   A. Copyright, License and Warranty ==================================  (C) Copyright by Matthias Andree, <matthias.andree@....de>. Some rights reserved.  This work is licensed under the Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 Germany License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/de/ or send a letter to  Creative Commons Second Street Suite SAN FRANCISCO, CALIFORNIA USA   THIS WORK IS PROVIDED FREE OF CHARGE AND WITHOUT ANY WARRANTIES. Use the information herein at your own risk.   B. Patch to remedy the problem ==============================  Note that when taking this from a GnuPG clearsigned file, the lines starting with a "-" character are prefixed by another "- " (dash + blank) combination. Either feed this file through GnuPG to strip them, or strip them manually. You may want to use the "-p1" flag to patch.  Whitespace differences can usually be ignored by invoking "patch -l", so try this if the patch does not apply.  diff --git index --- +++ @@ @@ MIT license.  Compile with -DMAIN to build the   demonstrator.   #include  <stdlib.h>    #include "fetchmail.h" +#include "sdump.h"    #ifndef MAIN   #include "i18n.h" @@ @@ char *reply_hack(       }    #ifndef MAIN -    if (outlevel >= O_DEBUG) -	report_build(stdout, GT_("About to rewrite %.*s...\n"), -			(int)BEFORE_EOL(buf), buf); +    if (outlevel >= O_DEBUG) { +	report_build(stdout, GT_("About to rewrite %s...\n"), (cp = sdump(buf,   BEFORE_EOL(buf)))); +	xfree(cp); +    }        /* make room to hack the address; buf must be malloced */       for (cp = buf; *cp; cp++) @@ @@ char *reply_hack(       }    #ifndef MAIN -    if (outlevel >= O_DEBUG) -	report_complete(stdout, GT_("...rewritten version is %.*s.\n"), -			(int)BEFORE_EOL(buf), buf); +    if (outlevel >= O_DEBUG) { +	report_complete(stdout, GT_("...rewritten version is %s.\n"), +			(cp = sdump(buf, BEFORE_EOL(buf)))); +	xfree(cp) +    } +   #endif /* MAIN */       *length = strlen(buf);       return(buf); diff --git a/uid.c b/uid.c index --- a/uid.c +++ b/uid.c @@ @@    #include "fetchmail.h"   #include "i18n.h" +#include "sdump.h"    /*    * Machinery for handling UID lists live here.  This is mainly to support @@ @@ void initialize_saved_lists(struct query *hostlist,   const char *idfile)   	if (uidlcount)   	{   	    report_build(stdout, GT_("Scratch list of UIDs:")); -	    for (idp = scratchlist; idp; idp = idp->next) -		report_build(stdout, " %s", idp->id); +	    for (idp = scratchlist; idp; idp = idp->next) { +		char *t = sdump(idp->id, strlen(idp->id)); +		report_build(stdout, " %s", t); +		free(t); +	    }   	    if (!idp)   		report_build(stdout, GT_(" <empty>"));   	    report_complete(stdout, "\n"); @@ @@ void uid_swap_lists(struct query *ctl)   	    report_build(stdout, GT_("Merged UID list from %s:"),   ctl->server.pollname);   	else   	    report_build(stdout, GT_("New UID list from %s:"),   ctl->server.pollname); -	for (idp = dofastuidl ? ctl->oldsaved : ctl->newsaved; idp; idp =   idp->next) -	    report_build(stdout, " %s = %d", idp->id, idp->val.status.mark); +	for (idp = dofastuidl ? ctl->oldsaved : ctl->newsaved; idp; idp =   idp->next) { +	    char *t = sdump(idp->id, strlen(idp->id)); +	    report_build(stdout, " %s = %d", t, idp->val.status.mark); +	    free(t); +        }   	if (!idp)   	    report_build(stdout, GT_(" <empty>"));   	report_complete(stdout, "\n"); @@ @@ void uid_discard_new_list(struct query *ctl)   	/* this is now a merged list! the mails which were seen in this   	 * poll are marked here. */   	report_build(stdout, GT_("Merged UID list from %s:"),   ctl->server.pollname); -	for (idp = ctl->oldsaved; idp; idp = idp->next) -	    report_build(stdout, " %s = %d", idp->id, idp->val.status.mark); +	for (idp = ctl->oldsaved; idp; idp = idp->next) { +	    char *t = sdump(idp->id, strlen(idp->id)); +	    report_build(stdout, " %s = %d", t, idp->val.status.mark); +	    free(t); +	}   	if (!idp)   	    report_build(stdout, GT_(" <empty>"));   	report_complete(stdout, "\n");    --  Matthias Andree  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      