  oss-security - CVE request - fetchmail heap overflow in verbose  cert display (only printable chars)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 4 Feb From: Matthias Andree <matthias.andree@....de> To: oss-security@...ts.openwall.com Subject: CVE request - fetchmail heap overflow in verbose  cert display (only printable chars)  Please assign a CVE for the issue described below:  ---------------------------------------------------------------------  Heap overrun in verbose SSL cert' info display.  Topics:		Heap overrun in verbose SSL certificate information display.  Author:		Matthias Andree Version:	1.0 Announced: Type:		malloc() Buffer overrun with printable characters Impact:		Code injection (difficult). Danger:		low CVSSv2 vectors:  CVE Name: Project URL:	http://www.fetchmail.info/  Affects:	fetchmail releases and  Not affected:	fetchmail release and newer  fetchmail SVN  ...  1. Background =============  fetchmail is a software package to retrieve mail from remote POP2, POP3, IMAP, ETRN or ODMR servers and forward it to local SMTP, LMTP servers or message delivery agents. It supports SSL and TLS security layers through the OpenSSL library, if enabled at compile time and if also enabled at run time.   2. Problem description and Impact =================================  In verbose mode, fetchmail prints certificate subject and issuer information to the user, and counts and allocates a malloc() buffer for that purpose.  If the material to be displayed contains characters with high bit set and the platform treats the "char" type as signed, this can cause a heap buffer overrun because non-printing characters are escaped as \xFF..FFnn, where nn is 80..FF in hex.  This might be exploitable to inject code if - fetchmail is run in verbose mode AND - the host running fetchmail considers char unsigned AND - the server uses malicious certificates with non-printing characters   that have the high bit set AND - these certificates manage to inject shell-code that consists purely of   printable characters.  It is believed to be difficult to achieve all this.   3. Solution ===========  There are two alternatives, either of them by itself is sufficient:  a. Apply the patch found in section B of this announcement to    fetchmail recompile and reinstall it.  b. Install fetchmail or newer after it will have become available.    The fetchmail source code is always available from      4. Workaround =============  Run fetchmail without and verbose options.  ...  B. Patch to remedy the problem ==============================  Note that when taking this from a GnuPG clearsigned file, the lines starting with a "-" character are prefixed by another "- " (dash + blank) combination. Either feed this file through GnuPG to strip them, or strip them manually. You may want to use the "-p1" flag to patch.  Whitespace differences can usually be ignored by invoking "patch -l", so try this if the patch does not apply.  --- a/sdump.c +++ b/sdump.c @@ @@ char *sdump(const char *in, size_t len)  	if (isprint((unsigned char)in[i])) {  	    *(oi++) = in[i];  	} else { -	    oi += sprintf(oi, "\\x%02X", in[i]); +	    oi += sprintf(oi, "\\x%02X", (unsigned char)in[i]);  	}      }      *oi = '\0';  END OF  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      