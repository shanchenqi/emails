  oss-security - kernel: wireless: fix 64K kernel heap content leak  via ioctl            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 31 Aug From: Eugene Teo <eugene@...hat.com> To: Kees Cook <kees.cook@...onical.com> CC: oss-security@...ts.openwall.com, johannes.berg@...el.com Subject: kernel: wireless: fix 64K kernel heap content leak  via ioctl  On AM, Kees Cook wrote: > This problem was originally tracked down by Brad Spengler. > > When calling wireless ioctls, if a driver does not correctly > validate/shrink iwp->length, the resulting copy_to_user can leak up to > 64K of kernel heap contents. > > It seems that this is triggerable[1] in at least on ath5k, but > I was not able to track down how. The twisty maze of ioctl handlers > stumped me. :) Other drivers I checked did not appear to have any problems, > but the potential remains. I'm not sure if this patch is the right approach; > it was fixed differently[2] in grsecurity. > > [1] > [2] http://grsecurity.net/~spender/wireless-infoleak-fix2.patch   fix:  Please use  Eugene  > Reported-by: Brad Spengler<spender@...ecurity.net> > Signed-off-by: Kees Cook<kees.cook@...onical.com> > --- >   include/net/iw_handler.h |    1 - >   net/wireless/wext-core.c |   26 ++------------------------ >   2 files changed, 2 insertions(+), 25 deletions(-) > > diff --git a/include/net/iw_handler.h b/include/net/iw_handler.h > index > --- a/include/net/iw_handler.h > +++ b/include/net/iw_handler.h > @@ @@ >   #define Generate an event on SET */ >   #define GET : request is ROOT only */ >   				/* SET : Omit payload from generated iwevent */ > -#define GET : no limit on request size */ >   /* Driver level flags */ >   #define Wait for driver event */ > > diff --git a/net/wireless/wext-core.c b/net/wireless/wext-core.c > index > --- a/net/wireless/wext-core.c > +++ b/net/wireless/wext-core.c > @@ @@ static const struct iw_ioctl_description standard_ioctl[] = { >   		.header_type	= IW_HEADER_TYPE_POINT, >   		.token_size	= sizeof(struct iw_priv_args), >   		.max_tokens	= 16, > -		.flags		= IW_DESCR_FLAG_NOMAX, >   	}, >   	[IW_IOCTL_IDX(SIOCSIWSTATS)] = { >   		.header_type	= IW_HEADER_TYPE_NULL, > @@ @@ static const struct iw_ioctl_description standard_ioctl[] = { >   		.token_size	= sizeof(struct sockaddr) + >   				  sizeof(struct iw_quality), >   		.max_tokens	= IW_MAX_AP, > -		.flags		= IW_DESCR_FLAG_NOMAX, >   	}, >   	[IW_IOCTL_IDX(SIOCSIWSCAN)] = { >   		.header_type	= IW_HEADER_TYPE_POINT, > @@ @@ static const struct iw_ioctl_description standard_ioctl[] = { >   		.header_type	= IW_HEADER_TYPE_POINT, >   		.token_size	= 1, >   		.max_tokens	= IW_SCAN_MAX_DATA, > -		.flags		= IW_DESCR_FLAG_NOMAX, >   	}, >   	[IW_IOCTL_IDX(SIOCSIWESSID)] = { >   		.header_type	= IW_HEADER_TYPE_POINT, > @@ @@ static int ioctl_standard_iw_point(struct iw_point *iwp, unsigned int cmd, >   			return -EFAULT; >   		/* Save user space buffer size for checking */ >   		user_length = iwp->length; > - > -		/* Don't check if user_length>  max to allow forward > -		 * compatibility. The test user_length<  min is > -		 * implied by the test at the end. > -		 */ > - > -		/* Support for very large requests */ > -		if ((descr->flags&  IW_DESCR_FLAG_NOMAX)&& > -		    (user_length>  descr->max_tokens)) { > -			/* Allow userspace to GET more than max so > -			 * we can support any size GET requests. > -			 * There is still a limit : -ENOMEM. > -			 */ > -			extra_size = user_length * descr->token_size; > - > -			/* Note : user_length is originally a __u16, > -			 * and token_size is controlled by us, > -			 * so extra_size won't get negative and > -			 * won't overflow... > -			 */ > -		} >   	} > +	/* Support for very large requests */ > +	extra_size = max(extra_size, iwp->length * descr->token_size); > >   	/* kzalloc() ensures NULL-termination for essid_compat. */ >   	extra = kzalloc(extra_size, GFP_KERNEL);   --  main(i) { >> (i-1) * && main(++i); }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      