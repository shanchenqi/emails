  oss-security - Re: kernel: Dangerous interaction between clear_child_tid, set_fs(), and kernel oopses            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 8 Dec From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: kernel: Dangerous interaction between clear_child_tid, set_fs(), and kernel oopses  Nelson, Dan, Steve -  It's been a few days, so I'll over-quote a little bit.  Please see below:  On Thu, Dec 02, at Nelson Elhage wrote: > I've discovered an interesting interaction in the Linux kernel between the > clear_child_tid feature of clone(2), and the set_fs() function used internally > in the kernel to temporarily disable access_ok() checking of userspace pointers. >  > Under some (not totally uncommon) circumstances, it is possible for a user to > leverage this interaction to turn a kernel oops or BUG() into a write of an > integer 0 to a user-controlled address in kernel memory. >  > I'm not sure if this merits a CVE or not; It is (as far as I can tell) only a > problem in the presence of another security bug, but it potentially makes a > large class of bugs significantly more dangerous (DoS -> privesc). >  > Reference: >  To me, things like this are more important than individual NULL pointer dereference bugs or the like.  So if those get CVEs, this one definitely should as well.  Nelson - why are you proposing adding set_fs(USER_DS); not to the very beginning of do_exit(), but below a few calls/checks?  I don't think there's any performance improvement from that, and it feels "theoretically safer" to return to the sane/safe state as soon as possible.  I am currently looking at do_exit() in OpenVZ's RHEL5-based - it does a bit more work before reaching the place you patch.  So I am tempted to introduce set_fs(USER_DS); as the very first statement in do_exit() instead.  Did you check whether 2.4 kernels are affected as well?  Thanks,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      