  oss-security - Re: kernel: Dangerous interaction between clear_child_tid, set_fs(), and kernel oopses            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 9 Dec From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: kernel: Dangerous interaction between clear_child_tid, set_fs(), and kernel oopses  On Wed, Dec 08, at Nelson Elhage wrote: > ... rearrange things so that the flow > is "check interrupt -> set_fs() -> everything else".  This is what I did.  Works fine so far.  --- +++ @@ @@ fastcall NORET_TYPE void do_exit(long co  	int group_dead;  	unsigned int mycpu;   +	/* +	 * Check this first since set_fs() below depends on +	 * current_thread_info(), which we better not access when we're in +	 * interrupt context.  Other than that, we want to do the set_fs() +	 * as early as possible. +	 */ +	if (unlikely(in_interrupt())) +		panic("Aiee, killing interrupt handler!"); + +	/* +	 * If do_exit is called because this process Oops'ed, it's possible +	 * that get_fs() was left as KERNEL_DS, so reset it to USER_DS before +	 * continuing. Amongst other possible reasons, this is to prevent +	 * mm_release()->clear_child_tid() from writing to a user-controlled +	 * kernel address. +	 */ +	set_fs(USER_DS); +  	profile_task_exit(tsk);    	WARN_ON(atomic_read(&tsk->fs_excl));   -	if (unlikely(in_interrupt())) -		panic("Aiee, killing interrupt handler!");  	if (unlikely(!tsk->pid))  		panic("Attempted to kill the idle task!");  #ifdef CONFIG_VE  Thanks,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      