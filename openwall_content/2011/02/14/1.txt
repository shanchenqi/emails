  oss-security - PHP Exif 64bit Casting Vulnerability, CVE request            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 14 Feb From: Pierre Joye <pierre.php@...il.com> To: oss-security@...ts.openwall.com Subject: PHP Exif 64bit Casting Vulnerability, CVE request  hi,  Can someone assign a CVE for the following issue please?  Fix is already applied in our 5.3 and trunk branches:   Note for the distro maintainers, please hang on a bit before applying it, at least a couple of day to be sure that the fix covers all cases or do not break anything. Tests pass but we never know :)  Cheers,  ---------- Forwarded message ---------- From: Luca Carettoni <luca.carettoni@...isoft.com> Date: Fri, Jan 14, at PM Subject: PHP Exif 64bit Casting Vulnerability To: security@....net   Hi,    please find enclosed a security advisory of a discovered vulnerability in  Looking forward to receiving your follow-up.  Regards, Luca  ===================================================================== PHP Exif 64bit Casting Vulnerability =====================================================================  Affected Software : PHP <= (Exif extension for 64bit platforms) Severity          : Low Local/Remote      : Remote Author            : @_ikki, @paradoxengine (blog.nibblesec.org)  [Summary]  PHP Exif extension allows developers to work with image metadata within their PHP code. For instance, using exif functions it is possible to read metadata from digital camera pictures. For further details on this file format, please refer to: http://www.media.mit.edu/pia/Research/deepview/exif.html  PHP Exif extension for 64bit platforms is affected by a casting vulnerability that occurs during the image header parsing. According to our preliminary analysis, exploitation of this flaw results in Denial of Service.  This vulnerability affects PHP and likely all previous versions. During our analysis, we have successfully tested our PoC against PHP PHP and the latest PHP release  Using the following configuration, a system is most likely vulnerable:  (a) PHP 64bit version  (b) PHP compiled with --enable-exif  (c) memory_limit = -1  [Vulnerability Details]  In case of 64bit platforms, an improper conversion occurs within at line (php_ifd_get32s) and (php_ifd_get32u).  In detail, an image having properly crafted Image File Directory (IFD) can be used to trigger a segmentation fault caused by a memory access violation:  $ gdb ./sapi/cli/php GNU gdb 6.8-debian Copyright (C) Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  Type "show copying" and "show warranty" for details. This GDB was configured as (gdb) run  -c /etc/php5/cli/php.ini ../exif.php ../ihaterepeating2.jpeg Starting program: -c /etc/php5/cli/php.ini ../exif.php ../ihaterepeating2.jpeg [Thread debugging using libthread_db enabled]   --- start ../ihaterepeating2.jpeg ---  [New Thread (LWP  Program received signal SIGSEGV, Segmentation fault. [Switching to Thread (LWP in php_ifd_get32s motorola_intel=0) at                return  (((char  *)value)[3] << 24)  (gdb) backtrace #0 in php_ifd_get32s motorola_intel=0) at #1 in php_ifd_get32u motorola_intel=0) at #2 in exif_iif_add_value section_index=13, format=5,   motorola_intel=0) at       #3 in exif_iif_add_tag section_index=13, format=5,   at       #4 in exif_process_IFD_TAG "II*", displacement=12, section_index=13, ReadNextIFD=0, at [...]  Within the PoC image, bytes in position can be used to craft the value of the 'components' variable (int) which is later used within memory read operations.  Two cases appear to be interesting:  {Case A - Negative value} $hexdump -C ihaterepeating.jpeg | grep -i "03 00 00 A0" results in  {Case B - Positive value} $hexdump -C ihaterepeating2.jpeg | grep -i "01 00 00 20" results in Please note that = 32dec  As mentioned, the value of the 'components' variable is later computed in memory operations within another variable named 'length'. Such value is used in a for-loop instruction (line to read image metadata starting from a memory address.  Although it is possible to control the offset, the following instructions (line limit such value to positive integers only.   <-- cut here --> if (length < 0) {                return; }  <-- cut here -->  Consequently it seems possible to oversize the expected value only, which results in a memory access violation.  [Proof-Of-Concept]  Two images (case A and B) have been properly crafted: http://www.ikkisoft.com/stuff/ihaterepeating.jpeg http://www.ikkisoft.com/stuff/ihaterepeating2.jpeg (SegFault)  You may want to use this script to read exif data:   <-- cut here -->  <?php echo" --- start ---\n\n"; exif_read_data($argv[1]); echo" --- end ---\n\n";  ?>  <-- cut here -->  [Fix Information]  n/a      -- Luca Carettoni <luca.carettoni@...isoft.com>     --  Pierre  @pierrejoye | http://blog.thepimp.net | http://www.libgd.org  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      