  oss-security - Re: CVE Request: lighttpd/mod_auth out-of-bounds read  due to signedness error            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 29 Nov From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com CC: Stefan BĂźhler <stbuehler@...httpd.net>,         security@...httpd.net, Xi Wang <xi.wang@...il.com> Subject: Re: CVE Request: lighttpd/mod_auth out-of-bounds read  due to signedness error  On AM, Stefan BĂźhler wrote: > Hi, > > Xi Wang discovered the following issue in lighttpd: > > for http auth we need to base64-decode user input; the allowed > character range includes non ASCII characters above 0x7f. > > The function to decode this string takes a "const char *in"; and reads > each character into an "int ch", which is used as offset in the table. > > So characters above 0x7f lead to negative indices (as char is signed > on most platforms). > > Here the vulnerable code (src/http_auth.c:67) > > --- > static const short = ...; > static unsigned char * base64_decode(buffer *out, const char *in) { >     ... >     int ch, ...; >     size_t i; >     ... >      >         ch = in[i]; >         ... >         ch = base64_reverse_table[ch]; >     ... > } > --- > > It doesn't matter if "broken" data is read - it just may allow more > encodings of the correct login information. > > The only possible impact is a segfault, leading to DoS. > > I had a look at some debian and openSUSE binaryies, and it looks like > there is always enough data (>= bytes) in the .rodata section > before the base64_reverse_table table, so these binaries are not > vulnerable afaict. > > we plan to release soon, including the fix for this issue. > > regards, > stefan > > bug tracked as: >   > announcement (not complete yet): >   > > proposed patch > === > diff --git a/src/http_auth.c b/src/http_auth.c > index > --- a/src/http_auth.c > +++ b/src/http_auth.c > @@ @@ static unsigned char * base64_decode(buffer *out, > const char *in) { >      ch = in[0]; >      /* run through the whole string, converting as we go */ >      for (i = 0; i < in_len; i++) { > -        ch = in[i]; > +        ch = (unsigned char) in[i]; > >          if (ch == '\0') break; > > === Please use for this issue.  --   -Kurt Seifried / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      