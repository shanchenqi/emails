  oss-security - iputils ping6 -s buffer overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 27 Jul From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: iputils ping6 -s buffer overflow  Hi,  FWIW, I looked into this issue yesterday:   It turns out it's already been patched upstream sometime in so the fix is included in iputils and according to the RELNOTES file already had the fix as well:  ...       ping6: do not allow too large packet size by -s option.  ping_common.c:  	case 's':               /* size of packet to send */ 		datalen = atoi(optarg); 		if (datalen < 0) { 			fprintf(stderr, "ping: illegal negative packet size %d.\n", datalen); 			exit(2); 		} 		if (datalen > maxpacket - 8) { 			fprintf(stderr, "ping: packet size too large: %d\n", 				datalen); 			exit(2); 		} 		break;  I am unhappy that there's no (redundant) bounds checking near the actual array writes, though:  	if (!(options & F_PINGFILLED)) { 		int i; 		u_char *p = outpack+8;  		/* Do not forget about case of small datalen, 		 * fill timestamp area too! 		 */ 		for (i = 0; i < datalen; ++i) 			*p++ = i; 	}  When the bounds check is far from the actual write, the problem is too easy to inadvertently reintroduce in a revision of the code.  ...and I do find it somewhat ridiculous that an issue like this was still found in a ping program in  Well, at least both ping and ping6 are smart enough to drop root (if run SUID root and invoked by non-root) right after acquiring the raw socket, before parsing the command-line.  So even if the issue were exploitable and ping6 were installed SUID root, the impact would be limited.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      