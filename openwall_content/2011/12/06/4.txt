  oss-security - acpid - possible issue in socket handling            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 06 Dec From: Kurt Seifried <kseifried@...hat.com> To: oss-security@...ts.openwall.com Subject: acpid - possible issue in socket handling  While reading the acpid ChangeLog I noticed:  * Tue Nov 15  Ted Felix <http://www.tedfelix.com>   - release   - Fix for socket name buffer overflow.  (ud_socket.c)  (Ted Felix)  This doesn't appear to cross a security boundary without an admin doing something intentionally strange. But just in case someone knows a clever way to exploit this I thought I'd post to the list and ask (and if so I'll assign a CVE).  Code below:  ---    +++    @@ @@  #include <fcntl.h>    #include "acpid.h" +#include "log.h"  #include "ud_socket.h"    int @@ @@         int r;         struct sockaddr_un uds_addr;   -       /* JIC */ +    if (strnlen(name, sizeof(uds_addr.sun_path)) > +        sizeof(uds_addr.sun_path) - 1) { +        acpid_log(LOG_ERR, "ud_create_socket(): " +            "socket filename longer than %u characters: %s", +            sizeof(uds_addr.sun_path) - 1, name); +        errno = EINVAL; +        return -1; +    } + +    /* JIC */         unlink(name);           fd = socket(AF_UNIX, SOCK_STREAM, 0); @@ @@         /* setup address struct */         memset(&uds_addr, 0, sizeof(uds_addr));         uds_addr.sun_family = AF_UNIX; -       strcpy(uds_addr.sun_path, name); +    strncpy(uds_addr.sun_path, name, sizeof(uds_addr.sun_path) - 1);                 /* bind it to the socket */         r = bind(fd, (struct sockaddr *)&uds_addr, sizeof(uds_addr)); @@ @@         int r;         struct sockaddr_un addr;   +    if (strnlen(name, sizeof(addr.sun_path)) > sizeof(addr.sun_path) - 1) { +        acpid_log(LOG_ERR, "ud_connect(): " +            "socket filename longer than %u characters: %s", +            sizeof(addr.sun_path) - 1, name); +        errno = EINVAL; +        return -1; +    } +            fd = socket(AF_UNIX, SOCK_STREAM, 0);         if (fd < 0) {                 return fd; @@ @@         memset(&addr, 0, sizeof(addr));         addr.sun_family = AF_UNIX;         sprintf(addr.sun_path, "%s", name); +    /* safer: */ +    /*strncpy(addr.sun_path, name, sizeof(addr.sun_path) - 1);*/           r = connect(fd, (struct sockaddr *)&addr, sizeof(addr));         if (r < 0) {    --   -Kurt Seifried / Red Hat Security Response Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      