  oss-security - Re: CVE request: is_a() function may allow arbitrary code execution  in PHP            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 25 Sep From: Pierre Joye <pierre.php@...il.com> To: Zeev Suraski <zeev@...d.com> Cc: Vincent Danen <vdanen@...hat.com>,  	"oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com>, "security@....net" <security@....net>,  	Stas Malyshev <smalyshev@...arcrm.com> Subject: Re: CVE request: is_a() function may allow arbitrary code execution  in PHP  On Sun, Sep 25, at PM, Zeev Suraski <zeev@...d.com> wrote:  > There aren't any security issues in PHP in that context.  Assigning a CVE to PHP in that context would create the impression that there is indeed an issue in PHP here. > It's not a matter of who's 'guilty' in terms of positioning - but in terms of where the actual security issue resides.  And it does not reside in PHP. > > So I agree with Stas, it doesn't make sense to have a CVE here.  Otherwise, almost every change we make, including bug fixes, could somehow result in some faulty piece of code somewhere becoming vulnerable to something.  The whole point is that some code was not having any issue before this change. If the check was done earlier using is_a then this unexpected behavior will happen, and that actually causes a security issue in existing working code. The example in the blog post is very good one, it clearly shows that the impact on existing code is not only about wrongly implemented autoloader, or someone not disabling allow_url_fopen (I can imagine local file include being an issue as well under some circumstances).  All in all, there is no shame or bad image to get a new CVE for something like that, I even see it as a good thing as it will:  1. clearly explain the is_a issue and how it can impact existing code (with the hope that our users will review/fix their code) 2. bring to the light again some good practices  Cheers, --  Pierre  @pierrejoye | http://blog.thepimp.net | http://www.libgd.org  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      