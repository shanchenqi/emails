  oss-security - Re: CVE Request: OFED /proc/net/sdpstats reading local denial of service/crash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 7 Sep From: Marcus Meissner <meissner@...e.de> To: oss-security@...ts.openwall.com Subject: Re: CVE Request: OFED /proc/net/sdpstats reading local denial of service/crash  On Wed, Sep 07, at Petr Matousek wrote: > On Tue, Sep 06, at Marcus Meissner wrote: > > One of our customers reported an issue in the "ib_sdp" module in the > > ofa_kernel package of the Open Fabrics OFED Infiband driverstack, version > > (and potentially older, I did not check in detail, at least > > does not have it). > >  > > Module is drivers/infiniband/ulp/sdp/ib_sdp.ko > >  > > /proc/net/sdpstats is user readable (S_IRUGO | S_IWUGO), so it can be > > triggered by users on machines with infiniband stack. > >  > > While there is report of stack corruption and overflow on process (cat > > /proc/net/sdpstats) exit ("Thread overran stack, or stack corrupted"), > > I can't see where it actually comes from but perhaps the per_cpu vs > > single variable printing does something to the stack and not just reads > > over arrays. >  > #define __sdpstats_seq_hist_pcpu(seq, msg, hist) ({             \ >         u32 h[NR_CPUS];                                         \ >         unsigned int __i;                                       \ >         memset(h, 0, sizeof(h));                                \ >  > NR_CPUS can be big on and the array is located on > the stack. >   > > ofed has a different stat printing algorith according to our developer, > > so it no longer is affected. >  > The array ^^^ is no longer allocated from the stack but via vmalloc(). >  > > Patch below. Please assign a CVE. >  > Please use  Thanks!  So the issue is not actually the wrong array iterator, but that there is a implicit too huge stack usage caused by the helper.  Ciao, Marcus  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      