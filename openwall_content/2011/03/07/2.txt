  oss-security - CVE request - kernel: nfs4: Ensure that ACL pages sent over NFS were  not allocated from the slab            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 07 Mar From: Eugene Teo <eugene@...hat.com> To: oss-security@...ts.openwall.com CC: "Steven M. Christey" <coley@...us.mitre.org> Subject: CVE request - kernel: nfs4: Ensure that ACL pages sent over NFS were  not allocated from the slab   The "bad_page()" page allocator sanity check was reported recently (call chain as follows):                                                                           It occurs because an skb with a fraglist was freed from the tcp retransmit queue when it was acked, but a page on that fraglist had PG_Slab set (indicating it was allocated from the Slab allocator (which means the free path above can't safely free it via put_page.  We tracked this back to an nfsv4 setacl operation, in which the nfs code attempted to fill convert the passed in buffer to an array of pages in __nfs4_proc_set_acl, which gets used by the skb->frags list in xs_sendpages.  __nfs4_proc_set_acl just converts each page in the buffer to a page struct via virt_to_page, but the vfs allocates the buffer via kmalloc, meaning the PG_slab bit is set.  We can't create a buffer with kmalloc and free it later in the tcp ack path with put_page, so we need to either:  1) ensure that when we create the list of pages, no page struct has     PG_Slab set    or  2) not use a page list to send this data  Given that these buffers can be multiple pages and arbitrarily sized, I think (1) is the right way to go.  I've written the below patch to allocate a page from the buddy allocator directly and copy the data over to it.  This ensures that we have a put_page free-able page for every entry that winds up on an skb frag list, so it can be safely freed when the frame is acked.  We do a put page on each entry after the rpc_call_sync call so as to drop our own reference count to the page, leaving only the ref count taken by tcp_sendpages.  This way the data will be properly freed when the ack comes in  Successfully tested by [Neil Horman] to solve the above oops.  Note, as this is the result of a setacl operation that exceeded a page of data, I think this amounts to a local DOS trigger-able by an privileged user, so [Neil Horman] CCing security on this as well.  Thanks, Eugene --  Eugene Teo / Red Hat Security Response Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      