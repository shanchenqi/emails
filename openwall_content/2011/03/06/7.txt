  oss-security - Re: kernel: modules_disabled policy            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Sun, 6 Mar From: Steve Grubb <sgrubb@...hat.com> To: oss-security@...ts.openwall.com Cc: Vasiliy Kulikov <segoon@...nwall.com> Subject: Re: kernel: modules_disabled policy  On Saturday, March 05, am Vasiliy Kulikov wrote: > Is it possible to implement strict do-not-touch-the-kernel policy for > root via disabling LKM loading and _all_ other indirect places with write > access that allows root to do something, but being too relaxed and > allows to write to [almost] arbitrary kernel location?  This would make > root the Boss Of Userland, but as to the kernel it would be but just a > privileged client.  Or such policy would be incomplete and there is > almost always a way to by-pass it due to the system design?  There's been some discussion on this here:  As root, you could modify /etc/modprobe.d/  and add your root kit and issue a system  reboot. That might get attention, but its possible to load modules by rebooting. Along  the same lines, you could regenerate the initramfs with your module being loaded  there.  What was proposed was another kind of deployment module where the initramfs and kernel  is on readonly media so any kernel updates have no effect. The initramfs has all the  kernel modules that wil ever be loaded and anything that manages to live in  /lib/modules will not be used for anything. Since root is in control of user space, he  could change any program that the kernel calls out to load modules. So in the  initramfs we want to drop 2 capabilities so that all kernel helpers are not able to  run with CAP_SYS_MODULE or CAP_SYS_RAWIO.  There are lots of loose ends. I think you found another place where root in the  traditional sense was perfectly fine doing a snapshot. But if you want to allow anyone  to have root, but not be able to get arbitrary code running at ring0, there will be  quite a bit of looking for these uncontrolled places and getting them under some  capability check that can be excluded without diminishing roots abilities too much.  -Steve  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      