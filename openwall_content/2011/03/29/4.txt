  oss-security - Re: Linux kernel signal spoofing vulnerability (CVE request)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 29 Mar From: Julien Tinnes <jt@....org> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel signal spoofing vulnerability (CVE request)  If you have integrated this patch (which you should!), you should also integrate that one:   This relaxes the check, since it turns out that glibc does rely on changing the signal code for async IO.  Julien  On Tue, Mar 22, at PM, Julien Tinnes <jt@....org> wrote: > The libc' sigqueue() function allows to queue a signal, as well as some > accompanying data to a process. > > The kernel's interface that is used to implement this function is known > as rt_sigqueueinfo(). It has been added in Linux 2.2. > > This system call is interesting from a security perspective, because it > allows userland to compeletely specify the siginfo_t structure. This > structure is normally typically almost entirely written by the kernel > when a signal is delivered. > > Since at least Linux most abuses of the kernel interface have > been prevented with a simple check: > >        /* Not even root can pretend to send signals from the kernel. >           Nor can they impersonate a kill(), which adds source info.  */ >        if (info.si_code >= 0) >                return -EPERM; > > This check made sure that rt_sigqueueinfo() could not spoof a signal > whose SI_CODE would be SI_KERNEL or SI_USER. As the comment indicates, a > process receiving a signal should be able to trust its source pid or uid > if its si_code matches SI_USER. > > Unfortunately, a couple of years later, when tgkill() and tkill() were > added, this check was forgotten and was not updated to prevent the > spoofing of a TGKILL si_code.  Because of this, userland is unable to > trust the pid and uid information of a TKILL signal. > > This is bad, because it is a useful feature in a scenario where a > process which cannot ptrace you can send you signals. This includes at > least the startup code of setuid binaries. > > Meanwhile, userland and libc writers still assumed that they could trust > the origin of a SI_TKILL signal. Glibc authors too [1]. Worse: they > even silently patched SI_TKILL with SI_USER [2], [3]. So even a userland > application that (righfully so) only trusts SI_USER signals will be > vulnerable. > > A tentative patch for this vulnerability has been committed to Linus' > kernel tree [4]. > > In this patch, we prevent rt_sigqueueinfo() from specifying any si_code > != SI_QUEUE. While we believe it to be very unlikley, this could in > theory break userland in some older Linux distributions, so we may > have to revert to a more concervative patch and prevent ( (si_code == > SI_TKILL) || (si_code >= SI_QUEUE) ) instead. > > Please credit "Julien Tinnes, Google security team" in any related advisory. > > Julien > > [1]: > [2]: > [3]: > [4]: >  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      