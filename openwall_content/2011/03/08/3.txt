  oss-security - Re: ldd can execute an app unexpectedly            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 8 Mar From: Tim Brown <tmb@...35.com> To: oss-security@...ts.openwall.com Subject: Re: ldd can execute an app unexpectedly  On Tuesday 08 March Dmitry V. Levin wrote:  > In June of I suggested to change ldd to avoid invoking programs > directly, even when it seems like that would work, and invoke the dynamic > linker as a program instead. > This change was implemented at least in Owl and ALT Linux: > http://cvsweb.openwall.com/cgi/cvsweb.cgi/~checkout~/Owl/packages/glibc/gli > > >  A slight tangent to this but IIRC there was some suggestion that allowing files  to be mapped to memory with execute permissions when called in this manner was  something that should be considered a bug/feature to be fixed in order to bring  ld.so in to line with how execution happens more generally.  I think Tavis or  stealth mentioned it to me regarding the suggestion in my paper that an  attacker could execute binaries in this manner to bypass situations when the  binary didn't, for whatever reason have +x.  I guess it should be possible to  fix both cases but it's something that needs to be considered.  Tim --  Tim Brown <mailto:tmb@...35.com>  Download attachment "signature.asc " of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      