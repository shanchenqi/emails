  oss-security - Re:  Re: CVE id request: php5            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 27 Aug (EDT) From: "Steven M. Christey" <coley@...us.mitre.org> To: oss-security@...ts.openwall.com Subject: Re:  Re: CVE id request: php5   That was me.  This basically came through a separate effort to catch up on a backlog of CVEs from and I forgot about this discussion (that was literally CVEs ago).  There is a disclaimer in the CVE desc that says how limited the scope is.  It's definitely on the edge of inclusion CVE-wise.  - Steve   On Thu, 27 Aug Tomas Hoger wrote:  > On Thu, 29 Jan (EST) "Steven M. Christey" > <coley@...us.mitre.org> wrote: > > > On Thu, 29 Jan Joe Orton wrote: > > > > > If the script is taking untrusted input data and passing it > > > unsanitized as the "key" argument to a dba_replace() call, it can > > > override arbitrary keys in the ini file anyway.  Truncating the ini > > > file to zero length seems like a less severe problem than being > > > able to write (arbitrary?) data to arbitrary keys. > > > > We don't have any formal criteria for this kind of thing, but in > > general, we ask whether there are realistic scenarios under which an > > attack can succeed, and if any additional privileges are gained > > versus normal methods.  These questions are particularly applicable > > to language interpreters and compilers.  Given this scenario, it > > seems unrealistic that an app would perform a dba_replace() with > > user-controlled input - and if it does, then it's a vuln in the > > application, not PHP itself.  So it doesn't seem to require a CVE. > > Just for posterity, this got after all. > > -- > Tomas Hoger / Red Hat Security Response Team >  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      