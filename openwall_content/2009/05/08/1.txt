  oss-security - OpenSC released with security update            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 8 May From: Andreas Jellinghaus <aj@...geon.inka.de> To: oss-security@...ts.openwall.com Subject: OpenSC released with security update  OpenSC was released yesterday with a security update.  The security problem in short: you need a combination of 1.) a tool that startes a key generation with public exponent set to 1     (an invalid value that causes an insecure rsa key) 2.) a PKCS#11 module that accepts that this public exponent and forwards     it to the card 3.) a card that accepts the public exponent and generates the rsa key.  OpenSC is insecure because due to a code bug in pkcs11-tool it had the wrong public exponent. But OpenSC PKCS#11 module is secure, it ignores the public exponent. So only if you generate your keys with pkcs11-tool from OpenSC (which very few people do), and only if you used it with sone other vendors PKCS#11 module, and only if the card accepted the bogus value too, then your rsa key is unsecure.  you can easily verify keys by looking at the rsa public key or a certificate or certificate request, for example the openssl command line tools can print the content in plain text. public Exponent = 1 is bad (3 and higher are accepted values, or higher is suggested by the NIST).   Here is the full security advisory. No CVE included, as I was not able to get one from distributions, vendor-sec or mitre.  OpenSC Security Advisory ======================================  pkcs11-tool generates RSA keys with publicExponent 1 instead of  OpenSC includes a tool for testing its PKCS#11 module called pkcs11-tool. This command line tool includes the ability to ask the PKCS#11 module to generate an RSA key pair. The tool used to default to a key size of bits and a public exponent of 3. These values are considered small but ok. In december a change (SVN commit changed these values to more secure default values of bit key size and a public exponent of A bug in that code however caused the default public exponent to be 1. That value is invalid and insecure, a message encrypted with it will be unencrypted.  If pkcs11-tool is used with the PKCS#11 module included in OpenSC, there is no security issue, as OpenSC PKCS#11 module ignores any public exponent passed to it. Only when pkcs11-tool is used with other third party PKCS#11 Modules the problem comes up.  Thanks to Miquel Comas MartĂ­, who found and fixed this bug and contacted us on May 7th,  This bug only affects users of OpenSC SVN trunk or OpenSC release Older releases do not contain this problem, and the new OpenSC release fixes this problem. Only users of the command line tool "pkcs11-tool" are affected by this problem, and only the generate rsa key pair function is affected ("--keypairgen" or "-k"). There is no option to configure the public exponent using the command line tool, so all such uses are affected.  The command line tool "pkcs11-tool" can be used with the OpenSC PKCS#11 Module "opensc-pkcs11.so" or "opensc-pkcs11.dll" or with any other PKCS#11 module. Only when used with other PKCS#11 module the problem arrises, as the OpenSC PKCS#11 Module ignores the public exponent passed to it.  If you use a third party PKCS#11 Module with pkcs11-tool you can use openssl with engine_pkcs11 to create a certificate signing request and then use openssl to analyze that csr, for example   openssl req -in req.pem -noout -text   ...                 Exponent: 1 (0x1)   ...    Would show the problem.  The problem is fixed with the new OpenSC release available on http://www.opensc-project.org/ or here:  md5sum    sha1sum      If you prefer to patch your source code, please apply this patch: --- src/tools/pkcs11-tool.c	(Revision +++ src/tools/pkcs11-tool.c	(Revision @@ @@  {  	CK_MECHANISM mechanism = {CKM_RSA_PKCS_KEY_PAIR_GEN, NULL_PTR, 0};  	CK_ULONG modulusBits = -	CK_BYTE publicExponent[] = { }; +	CK_BYTE publicExponent[] = { }; /* in bytes */  	CK_BBOOL _true = TRUE;  	CK_OBJECT_CLASS pubkey_class = CKO_PUBLIC_KEY;  	CK_OBJECT_CLASS privkey_class = CKO_PRIVATE_KEY;  Contact and Feedback ====================  If you have questions or feedback, please do not hesitate to contact us on our  mailing lists "opensc-devel" or "opensc-user". You need to subscribe to these  lists before posting, as we are getting a lot of spam each day and do not have  the resource to sort out valid email.  Also our wiki and bug trackers are only working for old users. New users can't register at the moment, both wiki and the bug tracker was spammed too much. Please send an email to the mailing list and we can manually create a user for  you.  Regards, Andreas Jellinghaus aj at opensc-project.org   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      