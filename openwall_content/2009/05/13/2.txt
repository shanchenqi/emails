  oss-security - CVE request: kernel: problem with NFS v4 client handling of MAY_EXEC  in nfs_permission            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 13 May From: Eugene Teo <eugene@...hat.com> To: oss-security@...ts.openwall.com CC: "Steven M. Christey" <coley@...us.mitre.org> Subject: CVE request: kernel: problem with NFS v4 client handling of MAY_EXEC  in nfs_permission  Frank Filz reported: the problem is that permission checking is skipped if atomic open is possible, but when exec opens a file, it just opens it O_READONLY which means EXEC permission will not be checked at that time.  This problem is observed by the following sequence (executed as root):  mount -t nfs4 server:/ /mnt4 echo "ls" >/mnt4/foo chmod /mnt4/foo su guest -c "mnt4/foo"  int nfs_permission(struct inode *inode, int mask) { [...]         switch (inode->i_mode & S_IFMT) {                 case S_IFLNK:                         goto out;                 case S_IFREG:                         /* NFSv4 has atomic_open... */                         if (nfs_server_capable(inode, \                                       NFS_CAP_ATOMIC_OPEN)                                         && (mask & MAY_OPEN))  We need to make sure that if mask & MAY_EXEC, we force a permission check, otherwise the script can be executed even if guest has no +x permission.                                  goto out;                         break;   Thanks, Eugene  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      