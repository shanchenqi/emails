  oss-security - Re: Re: Some fun with tcp_wrappers            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 15 Apr (EDT) From: wietse@...cupine.org (Wietse Venema) To: Tomas Hoger <thoger@...hat.com> CC: wietse@...cupine.org, oss-security@...ts.openwall.com Subject: Re: Re: Some fun with tcp_wrappers  Tomas Hoger: > Hi Wietse! >  > On Wed, 15 Apr (EDT) wietse@...cupine.org (Wietse > Venema) wrote: >  > > >   > >  > > If some applications mis-use the library API then that is really > > unfortunate. >  > The problem is not really limited to the applications that mis-use > API.  According to hosts_access(3): >  >   hosts_ctl() is a wrapper around the request_init() and >   hosts_access() routines with a perhaps more convenient interface >   (though it does not pass on enough information to support automated >   client username lookups).  The client host address, client host >   name and username arguments should contain valid data or >   STRING_UNKNOWN.  hosts_ctl() returns zero if access should be denied. >  > STRING_UNKNOWN is valid argument expected to be passed to hosts_ctl. > That description does not seem to be too clear to indicate that when > one uses hosts_ctl as: >  >   hosts_ctl(svcname, STRING_UNKNOWN, client_addr, STRING_UNKNOWN) >  > all hostname-based rules are ignored.  It seems those using hosts_ctl > do not always realize that.  That behavior is not what I implemented. It must have been introduced by someone else.  Here is how my own tcp wrapper 7.6 release behaves, with a trivial hosts_ctl() test program that passes command arguments to the library function. The program is below the signature.  Using the hosts_access(5) access file format:      % cat hosts.allow        cat: hosts.allow: No such file or directory     % cat hosts.deny     ftpd: unknown     % ./test-hostsctl -d ftpd unknown unknown     denied     % ./test-hostsctl -d ftpd other other     allowed  Using the hosts_options(5) access file format:      % cat hosts.allow     cat: hosts.allow: No such file or directory     % cat hosts.deny     ftpd: unknown: deny     % ./test-hostsctl -d ftpd unknown unknown     denied     % ./test-hostsctl -d ftpd other other     allowed  As you see, my own code does not ignore hostname rules when the hostname is "unknown".  	Wietse  #include <stdio.h> #include <unistd.h> #include "tcpd.h"  static void usage(const char *myname) {     fprintf(stderr, "usage: %s [-d] daemon hostname hostaddr username\n",             myname);     exit(1); }  int     main(int argc, char **argv) {     int     ch;      while ((ch = getopt(argc, argv, "d")) != EOF) {         switch (ch) {         case 'd':             hosts_allow_table = "hosts.allow";             hosts_deny_table = "hosts.deny";             break;         default:             usage(argv[0]);             /* NOTREACHED */         }     }     if (argc != optind + 4)         usage(argv[0]);      printf("%s\n", hosts_ctl(argv[optind], argv[optind + 1],                              argv[optind + 2], argv[optind + 3]) ?            "allowed" : "denied");     exit(0); }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      