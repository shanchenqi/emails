  oss-security - Re: CVE request: kernel: splice local denial of  service            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 02 Jun From: Miklos Szeredi <mszeredi@...e.cz> To: Jon Oberheide <jon@...rheide.org> Cc: oss-security@...ts.openwall.com Subject: Re: CVE request: kernel: splice local denial of  service  On Sat, at Jon Oberheide wrote: > The deadlock can be reproduced easily (you might need to fork() a few > times to get an pipe inode allocation ptr less than the file inode ptr): >  >     pipe(pfds); >     snprintf(buf, sizeof(buf), "/tmp/%d", getpid()); >     fd = open(buf, O_RDWR | O_CREAT, S_IRWXU); >  >     if (fork()) { >         splice(pfds[0], NULL, fd, NULL, NULL); >     } else{ >         sleep(1); >         splice(pfds[0], NULL, fd, NULL, NULL); >     } >  > However, the deadlock only affects the task attempting to acquire the > inode's i_mutex, so an attacker would require write access to a file > that is also written (or other fs op that acquires i_mutex) by some > victim process.  That is, unless I've missed something. :-)  Some operations also take i_mutex on parent (open(O_CREAT), mkdir, unlink, rmdir, rename, etc), and the order is always parent first.  This means, that if some task is holding i_mutex on /tmp/foo, then doing unlink("/tmp/foo") will block while holding i_mutex on /tmp.  Together with the above deadlock it will prevent creation or removal of files under /tmp, making the system pretty much unusable.  Thanks, Miklos    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      