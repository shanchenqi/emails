  oss-security - CVE request: kernel: get_instantiation_keyring() should inc the keyring  refcount in all cases            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 22 Oct From: Eugene Teo <eugeneteo@...nel.sg> To: oss-security@...ts.openwall.com CC: "Steven M. Christey" <coley@...us.mitre.org> Subject: CVE request: kernel: get_instantiation_keyring() should inc the keyring  refcount in all cases  Quoting from the upstream commit: "The destination keyring specified to request_key() and co. is made  available to the process that instantiates the key (the slave process  started by /sbin/request-key typically).  This is passed in the  request_key_auth struct as the dest_keyring member.  keyctl_instantiate_key and keyctl_negate_key() call  get_instantiation_keyring() to get the keyring to attach the newly  constructed key to at the end of instantiation.  This may be given a  specific keyring into which a link will be made later, or it may be  asked to find the keyring passed to request_key().  In the former case,  it returns a keyring with the refcount incremented by lookup_user_key();  in the latter case, it returns the keyring from the request_key_auth  struct - and does _not_ increment the refcount.  The latter case will eventually result in an oops when the keyring  prematurely runs out of references and gets destroyed.  The effect may  take some time to show up as the key is destroyed lazily.  To fix this, the keyring returned by get_instantiation_keyring() must  always have its refcount incremented, no matter where it comes from."  This was introduced in upstream commit  References:  Thanks, Eugene  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      