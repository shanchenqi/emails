  oss-security - More kernel CVE info            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 7 Oct (EDT) From: Josh Bressers <bressers@...hat.com> To: oss-security <oss-security@...ts.openwall.com> Cc: coley <coley@...re.org> Subject: More kernel CVE info  As MITRE is already busy, I'm giving a kernel flaw another CVE id. My analysis is below.  The changelog contains these two snippets:     net ax25: Fix signed comparison in the sockopt handler     net: Make the copy length in af_packet sockopt handler unsigned  The ax25 flaw looks real, the af_packet one is probably just a bug.  I'm assigning to the ax25 flaw.  Here is my analysis, if someone sees an issue with it, please feel free to speak up.  ax25                           In the file af_ax25.c there is this bit:             case SO_BINDTODEVICE:                 if (optlen > IFNAMSIZ) optlen=IFNAMSIZ;                 if (copy_from_user(devname, optval, optlen))                     return -EFAULT;          If a user can make the value of optlen wrap to a negative number, the         check should pass, but the call to copy_from_user has this check in it:             BUG_ON((long) n < 0);         Where n is optlen. I'm told this will OOPS the kernel. That means that         this flaw should only be a DoS.   af_packet (No CVE id, just a bug)                   I don't think the missed check in af_packet.c is an issue. The check                 if (len < 0)                     return -EINVAL;         Will never fail, but just beneath that bit in the code, you have                 if (len > sizeof(struct tpacket_stats))                     len = sizeof(struct tpacket_stats);         and                 if (len > sizeof(int))                     len = sizeof(int);         As our error condition would need len to be a negative number, but the         sizeof check will cast it as unsigned, these checks would effectively         fail, resetting len to something sane. Even then, all that happens         with len, is a copy_to_user, which wouldn't hurt the kernel, but could         crash the app (which we likely don't care about in this instance).  Thanks.   --      JB  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      