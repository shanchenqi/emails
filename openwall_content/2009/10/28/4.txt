  oss-security - Re: Handling cases of            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 28 Oct From: Tim Brown <tmb@...35.com> To: oss-security@...ts.openwall.com Cc: Marcus Meissner <meissner@...e.de> Subject: Re: Handling cases of  On Wednesday 28 October Marcus Meissner wrote: > On Wed, Oct 28, at Tim Brown wrote: > > All, > > > > How are problems with XML bombs (the so called "billion laughs" attack) > > being handled?  Should I be filing such bugs against the applications > > that exposes the XML parser to user input or is it better to report the > > issue against the parser themselves.  For example, the test case I've > > prepared for one affected parser simply causes the CPU to spin but the > > system appears to stay responsive (so far ;)).  Is it even fair to call > > such a denial of service? (If the code was executed in a real > > application, no further processing would happen within the affected > > process as the parser is tied up in memmove()s). I'm just curious as I > > don't want to waste peoples time with the disclosure process if others > > are simply filing "standard" bugs against affected parsers and moving on > > to more interesting matters. > > If an application can be made unresponsive this way it would still be > a denial of service against this app, so Yes. > > It always should however be checked if the application can get this data > from a real life attacker or if a admin user needs to push it in. For the > latter it is not DoS in my eyes.  So my PoC just calls the parser library directly, but on calling the API to  take the XML, the binary just sits there, gradually consuming more and more  memory.  I left it over night and it was still processing the following  morning, but RAM consumption had doubled.  The host itself was still  perfectly responsive despite this.  I've seen one example already of code  that takes in a POST request and drops XML body straight into the parser API  which would allow you to lockup that the process handling the POST but I  guess it depends on the design of the various calling applications what  exactly the effect will be even though the root of the problem is the parser  library and not the applications themselves.  Tim --  Tim Brown <mailto:tmb@...35.com>  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      