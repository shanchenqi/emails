  oss-security - Re: Exploitability of the integer overflows in djbdns            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 3 Jun From: Georgi Guninski <gguninski@...il.com> To: oss-security@...ts.openwall.com Subject: Re: Exploitability of the integer overflows in djbdns  Some potential bugs in djbdns I didn't test them on hardware.  in cdb_make.c: cdb_make_finish:      93      memsize = 1;     94      for (i = 0;i < {     95        u = c->count[i] * 2;     96        if (u > memsize)     97          memsize = u;     98      }     99         memsize += c->numentries; /* no overflow possible up to now */         u = (uint32) 0 - (uint32) 1;         u /= sizeof(struct cdb_hp);         if (memsize > u) { errno = error_nomem; return -1; }            c->split = (struct cdb_hp *) alloc(memsize * sizeof(struct cdb_hp));         if (!c->split) return -1;            c->hash = c->split + c->numentries;            u = 0;         for (i = 0;i < {           u += c->count[i]; /* bounded by numentries, so no overflow */           c->start[i] = u;         }  Issue 1:  On line alloc(-SMALL) overflows alloc() despite the check for overflow (this might be mitigated by memory limits), e.g. (memsize= (unsigned int) -1 )/sizeof(struct cdb_hp)).  In query.c:  Issue 2:  There are several usages:    uint16_unpack_big(header + 8,&datalen);    pos += datalen;  There appears no check if datalen doesn't overflow the buffer, leading past the end.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      