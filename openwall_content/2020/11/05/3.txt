  oss-security - tmux buffer overflow in escape sequence parser            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 05 Nov From: snizovtsev@...il.com To: oss-security@...ts.openwall.com Subject: tmux buffer overflow in escape sequence parser  Hi,  I recently discovered a bug in tmux (terminal multiplexer) which could lead to crash or code execution. The bug was in `input_csi_dispatch_sgr_colon` function which is used by tmux server process.  The problem is that a bound check for a stack-allocated array `p` is bypassed if 8th chunk of input buffer is empty:          while ((out = strsep(&ptr, ":")) != NULL) {                 if (*out != '\0') {                         p[n++] = strtonum(out, 0, INT_MAX, &errstr);                         if (errstr != NULL || n == nitems(p)) {                                 return;                         }                 } else                         n++;         }  Thus by using an escape sequence like we can overwrite arbitrary 4-byte locations on the stack. Moreover, an empty arguments ("::") may be used to skip choosen offsets, and thereby keep stack canaries untouched.  Code execution is proved practical only if tmux address space isn't fully randomized. So ASLR with PIE will mitigiate this issue but more complex exploits may be theoretically created.  === Affected versions / distributions ===  - tmux - Ubuntu - Debian 11 - Fedora 31+ - Alpine - openSUSE Leap - OpenBSD 6.5+  === Exploitation (testing purposes only) ===  I haven't found any ways to leak addresses so ASLR must be disabled: sysctl -w kernel.randomize_va_space=0  Then open tmux and feed it with the following sequence:  for tmux on Ubuntu  echo -e ouch /tmp/PWNED;\0';   for on Fedora 33: echo -e ouch /tmp/PWNED;\0';  If done, `/tmp/PWNED` would indicate that the attack succeed.  === Timeline === * 29 Oct - Vulnerability reported to author, security () openbsd.org, RedHat, SUSE and Canonical. * 29 Oct - OpenBSD Errata published. * 29 Oct - Fixed in OpenBSD and tmux 3.1c. * 30 Oct - assigned. * 05 Nov - Vulnerability opened.  -- Regards, Sergey Nizovtsev.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      