  oss-security - Linux kernel: net/x25: a couple of overflows            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sun, 15 Nov From: kiyin(尹亮) <kiyin@...cent.com> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: Linux kernel: net/x25: a couple of overflows  Hi,  The .x25_addr[] address comes from the user and is not necessarily NUL terminated. This leads to a couple problems.  1) x25_bind read overflow   int x25_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len) sock *sk = sock->sk; sockaddr_x25 *addr = (struct sockaddr_x25 *)uaddr; len, i, rc = 0; (addr_len != sizeof(struct sockaddr_x25) || != AF_X25) { = -EINVAL; out; check for the null_x25_address */ { =                           <----------------------- there is no check whether the is null-terminated. if not, strlen will read out of sockaddr_x25 struct. (i = 0; i < len; i++) { { = -EINVAL; out; ......................................................................................................................................................................................................................  affected Linux kernel versions:  2) x25_addr_aton write overflow  The call tree is:   x25_connect()   --> x25_write_internal()       --> x25_addr_aton()  x25_addr_aton(unsigned char *p, struct x25_address *called_addr,  struct x25_address *calling_addr) int called_len, calling_len; *called, *calling; i;  = called_addr->x25_addr;                            <----------------------- there is no check of x25->dest_addr, x25->source_addr in these three functions. = calling_addr->x25_addr;  = strlen(called); = strlen(calling);                              <----------------------- the strlen in x25_addr_aton() will lead to write overflow the "addresses" buffer from x25_write_internal() = (calling_len << 4) | (called_len << 0); (i = 0; i < (called_len + calling_len); i++) { (i < called_len) { (i % 2 != 0) { |= (*called++ - '0') << 0;                   <-----------------------  write overflow the "addresses" buffer from x25_write_internal() else { = |= (*called++ - '0') << 4; else { (i % 2 != 0) { |= (*calling++ - '0') << 0; else { = |= (*calling++ - '0') << 4; 1 + (called_len + calling_len + 1) / 2;  this security bug has been existed for 24 years since X.25 Project added first in Linux kernel  affected Linux kernel versions:  patch: The x25 protocol only allows 15 character addresses so putting a NUL terminator as the 16th character is safe.  diff --git index --- +++ @@ @@ static int x25_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)  		goto out;  	}   - 1] = '\0'; +  	/* check for the null_x25_address */  	if {   @@ @@ static int x25_connect(struct socket *sock, struct sockaddr *uaddr,  		goto out;    	rc = -ENETUNREACH; - 1] = '\0';  	rt =  	if (!rt)  		goto out;  Regards, kiyin.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      