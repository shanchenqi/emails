  oss-security - Kubernetes: Node disk DOS by writing to container  /etc/hosts            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 15 Jul From: Joel Smith <joelsmith@...hat.com> To: oss-security@...ts.openwall.com Subject: Kubernetes: Node disk DOS by writing to container  /etc/hosts  Hello Open Source Community,  A security issue was discovered in kubelet that could result in the Denial of Service of a node if a pod can write to its own /etc/hostsfile.  This issue has been rated Medium (5.5, _CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/CR:H/IR:H/AR:M_ and assigned  The /etc/hostsfile mounted in a pod by kubelet is not included by the kubelet eviction manager when calculating ephemeral storage usage by a pod. If a pod writes a large amount of data to the /etc/hostsfile, it could fill the storage space of the node and cause the node to fail.         *Am I vulnerable?*  Any clusters allowing pods with sufficient privileges to write to their own /etc/hostsfiles are affected. This includes containers running with CAP_DAC_OVERRIDEin their capabilities bounding set (true by default) and either UID 0 (root) or a security context with allowPrivilegeEscalation: true(true by default).           *Affected Versions*    *      kubelet    *      kubelet    *      kubelet <         *How do I mitigate this vulnerability?*  PodSecurityPolicies or other admission webhooks could be employed to force containers to drop CAP_DAC_OVERRIDEor disallow running as root or with privilege escalation, but these measures may break existing workloads that rely upon these privileges to function properly.         *Fixed Versions*    *      kubelet    *      kubelet    *      kubelet    *      kubelet  To upgrade, refer to the documentation: _https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster_         *Detection*  Large pod etc-hostsfiles may indicate that a pod is attempting to perform a Denial of Service attack using this bug. A command such as  find /var/lib/kubelet/pods/*/etc-hosts -size +1M  run on a node can be used to find abnormally large pod etc-hostsfiles.         *Additional Details*  See the GitHub issue for more details:   *Acknowledgements*  This vulnerability was reported by Kebe Liu of DaoCloud   Thank you,  Joel Smith on behalf of the Kubernetes Product Security Committee     Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      