  oss-security - [Security Advisory] Kubernetes: Node setting allows  for neighboring hosts to bypass localhost boundary            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 8 Jul From: Joel Smith <joelsmith@...hat.com> To: oss-security@...ts.openwall.com Subject: [Security Advisory] Kubernetes: Node setting allows  for neighboring hosts to bypass localhost boundary  Hello Open Source Community,  A security issue was discovered in kube-proxy which allows adjacent hosts (hosts running in the same LAN or layer 2 domain) to reach TCP and UDP services on the node(s) which are bound to For example, if a cluster administrator runs a TCP service that listens on because of this bug, that service would be potentially reachable by other hosts on the same LAN as the node, or by containers running on the same node as the service. If the example service on port required no additional authentication (because it assumed that only other localhost processes could reach it), then it could be vulnerable to attacks that make use of this bug.  The Kubernetes API Server's default insecure port setting causes the API server to listen on where it will accept requests without authentication. Many Kubernetes installers explicitly disable the API Server's insecure port, but in clusters where it is not disabled, an attacker with access to another system on the same LAN or with control of a container running on the master may be able to reach the API server and execute arbitrary API requests on the cluster. This port is deprecated, and will be removed in Kubernetes  This issue has been rated medium (*CVSS and assigned  In clusters where the API Server insecure port is not disabled, this issue has been rated high (*CVSS ). *Am I vulnerable?*  You may be vulnerable if:     -     You are running a vulnerable version (see below)    -     Your cluster nodes run in an environment where untrusted hosts share the    same layer 2 domain (i.e. same LAN) as nodes    -     Your cluster allows untrusted pods to run containers with CAP_NET_RAW    (the Kubernetes default is to allow this capability).    -     Your nodes (or hostnetwork pods) run any localhost-only services which    do not require any further authentication. To list services that are    potentially affected, run the following commands on nodes:    -        lsof +c 15 -P -n -sTCP:LISTEN       -        lsof +c 15 -P -n  On a master node, an lsof entry like this indicates that the API server may be listening with an insecure port:  COMMAND        PID USER FD TYPE DEVICE SIZE/OFF NODE NAME  kube-apiserver root 7u IPv4       0t0  TCP (LISTEN) *Affected Versions*     -     kube-proxy    -     kube-proxy    -     kube-proxy  *How do I mitigate this vulnerability?*  Prior to upgrading, this vulnerability can be mitigated by manually adding an iptables rule on nodes. This rule will reject traffic to which does not originate on the node.  iptables -I INPUT --dst ! --src \  -m conntrack ! --ctstate RELATED,ESTABLISHED,DNAT -j DROP  Additionally, if your cluster does not already have the API Server insecure port disabled, we strongly suggest that you disable it. Add the following flag to your kubernetes API server command line: --insecure-port=0 *Detection*  Packets on the wire with an IPv4 destination in the range and a layer-2 destination MAC address of a node may indicate that an attack is targeting this vulnerability. *Fixed Versions*     -     kube-proxy (not yet released)    -     kube-proxy    -     kube-proxy    -     kube-proxy  To upgrade, refer to the documentation: *https <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>:// <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>kubernetes <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>. <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>io <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>/ <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>docs <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>/ <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>tasks <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>/ <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>administer <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>- <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>cluster <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>/ <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>cluster <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>- <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>management <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>/# <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>upgrading <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>- <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>a <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>- <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>cluster <https://kubernetes.io/docs/tasks/administer-cluster/cluster-management/#upgrading-a-cluster>* *Additional Details*  See the GitHub issue for more details: *https *Acknowledgements*  This vulnerability was reported by János Kövér, Ericsson with additional impacts reported by Rory McCune, NCC Group and Yuval Avrahami and Ariel Zelivansky, Palo Alto Networks.  Thank You,  Joel Smith on behalf of the Kubernetes Product Security Committee   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      