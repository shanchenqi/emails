  oss-security - Re: libvnc and tightvnc vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 10 Dec From: Solar Designer <solar@...nwall.com> To: Pavel Cheremushkin <Pavel.Cheremushkin@...persky.com> Cc: oss-security@...ts.openwall.com Subject: Re: libvnc and tightvnc vulnerabilities  On Mon, Dec 10, at Pavel Cheremushkin wrote: > These particular issues I was describing in my previous letter are located in source code of TightVNC vncviewer. Source code of TightVNC vncviewer can be acquired though this link and integer overflow that leads to a heap-buffer-overflow I was speaking about is located on the line inside file `vnc_unixsrc/vncviewer/rfbproto.c`. It is a fun fact that inside `libvncclient/rfbproto.c` the same code is located on line but all bugs connected with LibVNC I described in Github issues inside LibVNC repository.  Oh.  So you reported the instance of that one issue in LibVNC here:   Upstream's fix appears to be to add casts to (uint64_t) before adding 1 in those many malloc() calls.  On platforms with larger than 32-bit size_t, this should be sufficient against integer overflows since the sizes are read from 32-bit protocol fields, but it isn't sufficient to prevent maliciously large memory allocation on the client by a rogue server.  On a platform with 32-bit size_t, this isn't even sufficient to prevent the integer overflows.  If I haven't missed anything, it'd be great if you open a new issue suggesting introduction of safety limits prior to those malloc() lines.  The current code is:    case rfbServerCutText:   {     char *buffer;      if (!ReadFromRFBServer(client, ((char *)&msg) + 1, 			   sz_rfbServerCutTextMsg - 1))       return FALSE;      msg.sct.length = rfbClientSwap32IfLE(msg.sct.length);      buffer =      if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {       free(buffer);       return FALSE;     }      buffer[msg.sct.length] = 0;      if (client->GotXCutText)       client->GotXCutText(client, buffer, msg.sct.length);      free(buffer);      break; }  but per the commits referenced in issue above, there are many more instances of the "malloc(... + 1)" pattern, which were patched similarly incompletely.  Thanks,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      