  oss-security - Multiple vulnerabilities in Jenkins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 5 Dec From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Multiple vulnerabilities in Jenkins  Jenkins is an open source automation server which enables developers around the world to reliably build, test, and deploy their software. The following releases contain fixes for security vulnerabilities:  * Jenkins weekly * Jenkins LTS * Jenkins LTS  Summaries of the vulnerabilities are below. More details, severity, and attribution can be found here:  We provide advance notification for security updates on this mailing list: https://groups.google.com/d/forum/jenkinsci-advisories  If you discover security vulnerabilities in Jenkins, please report them as described here: https://jenkins.io/security/#reporting-vulnerabilities  ---  Jenkins uses the Stapler web framework for HTTP request handling.  Staplerâs basic premise is that it uses reflective access to code  elements matching its naming conventions. For example, any public method  whose name starts with get, and that has a String, int, long, or no  argument can be invoked this way on objects that are reachable through  these means. As these naming conventions closely match common code  patterns in Java, accessing crafted URLs could invoke methods never  intended to be invoked this way.  The Stapler web framework has been extended with a Service Provider  Interface (SPI) that allows methods and fields to be excluded from routing. The implementation of that SPI in Jenkins now restricts which getter  methods, do* action methods, and fields can be invoked reflectively by  Stapler.   The fix for introduced a mechanism that renamed user  directories on disk as a user with an unsafe user name (user ID) is loaded. Insufficient input validation allowed attackers to rename such user  directories even for users with a safe user name by submitting a crafted  user name when attempting to log in, even with an invalid password. Doing  so prevented users from logging in successfully afterwards.  Jenkins no longer uses directory names as a reference for user names,  making the on-load migration of user records unnecessary. Instead, the  new file users/users.xml is used to map user names to the directories  containing the user metadata.   The file browser used for workspaces, archived artifacts, and  $JENKINS_HOME/userContent/ followed symbolic links to locations outside  the directory being browsed.  While builds typically have access to the file system outside the  workspace allocated by Jenkins, this should not extend to beyond the  execution of a build on that agent. Notably, the configuration may have  been changed to not allow a build to run on a given agent, but the  workspace used during the previous execution still exists, and could  allow browsing the file system outside the workspace.  Neither browsing through the UI nor downloading directory content as a  ZIP file allow accessing directories and files outside the workspace  anymore.   The form validation for cron expressions (e.g. "Poll SCM", "Build  periodically") could enter infinite loops when cron expressions only  matching certain rare dates were entered, blocking request handling  threads indefinitely.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      