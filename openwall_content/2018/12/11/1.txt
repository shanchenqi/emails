  oss-security - Multiple telnet.c overflows            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 11 Dec From: Hacker Fantastic <hackerfantastic@...glemail.com> To: oss-security@...ts.openwall.com Subject: Multiple telnet.c overflows  Original advisory is here - https://hacker.house/releasez/expl0itz/inetutils-telnet.txt  GNU inetutils <= telnet.c multiple overflows ================================================== GNU inetutils is vulnerable to a stack overflow vulnerability in the client-side environment variable handling which can be exploited to escape restricted shells on embedded devices. Most modern browsers no longer support telnet:// handlers, but in instances where URI handlers are enabled to the inetutils telnet client this issue maybe remotely triggerable. A stack-based overflow is present in the handling of environment variables when connecting telnet.c to remote telnet servers through oversized DISPLAY arguments.  A heap-overflow is also present which can be triggered in a different code path due to supplying oversized environment variables during client connection code.  The stack-based overflow can be seen in the following code snippet from the latest inetutils release dated      case TELOPT_XDISPLOC:      if (my_want_state_is_wont (TELOPT_XDISPLOC))      if (SB_EOF ())      if (SB_GET () == TELQUAL_SEND)  unsigned char temp[50], *dp;  int len;  if ((dp = env_getvalue ("DISPLAY")) == NULL)    {      /*       * Something happened, we no longer have a DISPLAY       * variable.  So, turn off the option.       */      send_wont (TELOPT_XDISPLOC, 1);      break;    }  sprintf ((char *) temp, "%c%c%c%c%s%c%c", IAC, SB, TELOPT_XDISPLOC,   TELQUAL_IS, dp, IAC, SE);  len = strlen ((char *) temp + 4) + 4;	/* temp[3] is 0 ... */  if (len < NETROOM ())  When a telnet server requests environment options the sprintf on line will not perform bounds checking and causes an overflow of stack buffer temp[50] defined at line This issue can be trivially fixed using a patch to add bounds checking to sprintf such as with a call to snprintf();  An example of the heap overflow can be seen when handling large environment variables within the telnet client, causing heap buffer memory corruption when handling large environment variables supplied through examples USER or DISPLAY. An example of triggering this issue on inetutils in Arch Linux can be seen below:  DISPLAY=`perl -e 'print telnet -l`perl -e 'print Trying Connected to Escape character is '^]'. realloc(): invalid next size Aborted (core dumped)  These issues are present anywhere that inetutils is used as a base for clients such as in common embedded home routers or networking equipment. An attacker can potentially exploit these vulnerabilities to gain arbitrary code execution on platforms where telnet commands are available. An example debug trace of the heap overflow can be found below:  (gdb) run -l`perl -e 'print Starting program: /usr/bin/telnet -l`perl -e 'print Trying Connected to Escape character is '^]'. realloc(): invalid next size  Program received signal SIGABRT, Aborted. in raise () from /usr/lib/libc.so.6 (gdb) bt #0  in raise () from /usr/lib/libc.so.6 #1  in abort () from /usr/lib/libc.so.6 #2  in __libc_message () from /usr/lib/libc.so.6 #3  in malloc_printerr () from /usr/lib/libc.so.6 #4  in _int_realloc () from /usr/lib/libc.so.6 #5  in realloc () from /usr/lib/libc.so.6 #6  in ?? () #7  in ?? () #8  in ?? () #9  in ?? () #10 in ?? () #11 in ?? () #12 in ?? () #13 in ?? () #14 in ?? () #15 in __libc_start_main () from /usr/lib/libc.so.6 #16 in ?? ()  Due to the various devices embedding telnet from inetutils and distributions such as Arch Linux using inetutils telnet, it is unclear the full impact and all scenarios where this issue could be leveraged. An attacker may seek to exploit these vulnerabilities to escape restricted shells.  -- Hacker Fantastic https://hacker.house   --  Hacker Fantastic https://hacker.house   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      