  oss-security - Re: new side-channel vulnerability on SMT/Hyper-Threading architectures            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 2 Nov From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: new side-channel vulnerability on SMT/Hyper-Threading architectures  Hi BBB,  On Fri, Nov 02, at Billy Brumley wrote: > We recently discovered a new CPU microarchitecture attack vector. The > nature of the leakage is due to execution engine sharing on SMT (e.g. > Hyper-Threading) architectures. More specifically, we detect port > contention to construct a timing side channel to exfiltrate > information from processes running in parallel on the same physical > core. Report is below.  I think your work is top-notch and much needed.  Thank you!  I'm surprised this specific side-channel wasn't(?) explored in academic papers before.  I had suggested it should be:   "Yet another thing to target, and one I considered and briefly played with on P4 with HT in when I saw Colin Percival's paper, would be utilization of different execution units within a core, which is measurable from another hardware thread running on the same core.  Surprisingly, I am still unaware of published research on that."  As you correctly point out, it's (also) execution port contention, rather than only execution unit contention.  However, I feel the blame might be misplaced here.  I think the existence of this side-channel in SMT should be obvious to the extent that it's not considered a vulnerability, but a fully expected by-design property.  Maybe the problem is it wasn't documented as such.  Maybe we should have put more effort into making it more obvious to everyone in like it's finally done now.  [ Non-security: A related area for further research is looking into use of this side-channel for performance optimization - to probabilistically (de)synchronize hardware threads sharing a physical core in a way minimizing their competition for resources.  I'm already parsing OS-provided info and use per-core mutexes for this, achieving a few percent speedup in a certain production setup, but maybe an OS-independent and/or lower-overhead approach can be developed. ]  > We steal an OpenSSL (<= private key from a TLS server > using this new side-channel vector. It is a local attack in the sense > that the malicious process must be running on the same physical core > as the victim (an OpenSSL-powered TLS server in this case).  Are you also releasing manuscript.pdf you had attached to your distros list posting?  You must be.  I only skimmed it, but as I understand the OpenSSL code in question is branching upon a secret.  This is generally considered high-risk even without SMT.  While it'd be harder and less practical to exploit without SMT, the state of instruction cache changes in a way visible to other processes that might be scheduled to run on the same core. Perhaps it'd take orders of magnitude more observations since the OS scheduler won't kick in very frequently, but eventually the secret should be obtainable.  I guess this commit is (part of?) the fix:   In there, we see a ladder of function calls separated by "||", which in C guarantees short-circuit evaluation.  This is data-dependent branching, and it remains such after that commit.  Being unfamiliar with ECC and with this code, I don't know whether the branching is (still) by secret or not (anymore).  I'd appreciate your comments on this.  > Upgrade to OpenSSL (or >= if you are looking for patches)  OpenSSL recently issued two security advisories suggesting a further upgrade to or but then mentioning that "a new side channel attack was created" and listing commits with even further fixes (not releases):   --- Timing vulnerability in ECDSA signature generation ==================================================================  Severity: Low  The OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key.  Due to the low severity of this issue we are not issuing a new release of OpenSSL or at this time. The fix will be included in OpenSSL and OpenSSL when they become available. The fix is also available in commit (for and commit (for in the OpenSSL git repository.  This issue was reported to OpenSSL on 25th October by Samuel Weiser. ---   --- Timing vulnerability in DSA signature generation ================================================================  Severity: Low  The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key.  Due to the low severity of this issue we are not issuing a new release of OpenSSL or at this time. The fix will be included in OpenSSL OpenSSL and OpenSSL when they become available. The fix is also available in commit (for (for and commit (for in the OpenSSL git repository.  This issue was reported to OpenSSL on 16th October by Samuel Weiser.  As a result of the changes made to mitigate this vulnerability, a new side channel attack was created.  The mitigation for this new vulnerability can be found in these commits: (for (for and (for ---  I don't know to what extent this is related or not.  Thanks again,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      