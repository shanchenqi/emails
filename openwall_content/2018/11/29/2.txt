  oss-security - Re: memory safety bugs in bc            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 29 Nov From: Marcus Meissner <meissner@...e.de> To: oss-security@...ts.openwall.com Subject: Re: memory safety bugs in bc  Hi Hanno,  (FWIW)  Given Mitres guidance on "dcraw", as this is a standalone tool and only denial of service attacks I do not see a need for CVEs.  Ciao, Marcus  On Wed, Nov 28, at Hanno Bรถck wrote: > Hi, >  > bc is a command line calculator that is commonly available on Linux > systems. >  > I reported various memory safety bugs and crashes a long time ago, some > got also fixed but some more got ignored. >  > (I'm aware it's debatable whether a tool like bc should be considered > attack surface, as there are probably not many situations where it's fed > attacker controlled input.) >  >  > ----------------------------- >  > echo 'define p(a[],u){}p(a[],0,0)'|./bc >  > Causes a heap out of bounds read, also segfaults without asan. >  > ASAN stack trace: >  > AddressSanitizer: heap-buffer-overflow on address at pc bp sp > READ of size 8 at thread T0 >     #0 in process_params >     #1 in execute >     #2 in run_code >     #3 in yyparse >     #4 in main >     #5 in __libc_start_main >     #6 in _start >  > is located 8 bytes to the left of 16-byte region > allocated by thread T0 here: >     #0 in malloc >     #1 in bc_malloc >     #2 in nextarg >     #3 in load_code >     #4 in generate >     #5 in yyparse >     #6 in main >     #7 in __libc_start_main >  > ----------------------------- >  > echo -e 'define >  > Causes a null pointer deref, also crashes without asan. >  > ASAN trace: > AddressSanitizer: SEGV on unknown address (pc bp sp T0) > signal is caused by a READ memory access. > address points to the zero page. >     #0 in load_var >     #1 in execute >     #2 in run_code >     #3 in yyparse >     #4 in main >     #5 in __libc_start_main >     #6 in _start >  > ----------------------------- >  > echo -e 'define t(x,y,d,s){f()}\ndefine f(){t()}\nfor(s=0;;){f()}\nfor(s=0;;){}' | ./bc >  > null pointer read, but doesn't crash without asan. >  > AddressSanitizer: SEGV on unknown address (pc bp sp T0) > signal is caused by a READ memory access. > address points to the zero page. >     #0 in bc_free_num >     #1 in store_var >     #2 in execute >     #3 in run_code >     #4 in yyparse >     #5 in main >     #6 in __libc_start_main >     #7 in _start >  > ----------------------------- >  > echo -e 'define >  > null pointer read, but doesn't crash without asan. >  > AddressSanitizer: SEGV on unknown address (pc bp sp T0) > signal is caused by a READ memory access. > address points to the zero page. >     #0 in pop_vars >     #1 in execute >     #2 in run_code >     #3 in yyparse >     #4 in main >     #5 in __libc_start_main >     #6 in _start >  > ----------------------------- >  > echo 'define m(x){for(;;)0}m(b[])'|./bc >  > null pointer read, but doesn't crash without asan. >  > AddressSanitizer: SEGV on unknown address (pc bp sp T0) > signal is caused by a READ memory access. > address points to the zero page. >     #0  >     #1  >     #2 in __interceptor_vfprintf >     #3 in rt_error >     #4 in process_params >     #5 in execute >     #6 in run_code >     #7 in yyparse >     #8 in main >     #9 in __libc_start_main >     #10 in _start >  >  > --  > Hanno Bรถck > https://hboeck.de/ >  > mail/jabber: hanno@...eck.de > GPG: >   --  Marcus Meissner,SUSE LINUX GmbH; Maxfeldstrasse 5; Nuernberg; Zi. <meissner@...e.de>  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      