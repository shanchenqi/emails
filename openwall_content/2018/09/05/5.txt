  oss-security - Re: Re: More Ghostscript Issues: Should we disable PS  coders in policy.xml by default?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 5 Sep From: Stuart Gathman <stuart@...hman.org> To: oss-security@...ts.openwall.com Subject: Re: Re: More Ghostscript Issues: Should we disable PS  coders in policy.xml by default?  On PM, Perry E. Metzger wrote: > On Wed, 5 Sep Tavis Ormandy <taviso@...gle.com> > wrote: >> I would like to re-emphasize that while Ghostscript is very capable >> and mature software, I consider the -dSAFER sandbox to be a fragile >> security boundary and that we should consider deprecating (or >> minimizing the use of) untrusted postscript. > I haven't been following the bugs in depth (just noticing the > continuous stream of them arriving), but is the issue security flaws > in just -dSAFER or is it overall security bugs? If it's the former, > given how few things actually need any of the features past what > -dSAFER offers, perhaps compiling the code by default without any such > capabilities would work well? You can't run what isn't there. Postscript is a general purpose programming language.  It can do anything to your system that a C or Python program could.  The SAFER sandbox was supposed to be able to prevent untrusted postscript code from doing serious damage.  But this series of bugs shows that the sandbox is very flawed, and running untrusted postscript relying only on the SAFER sandbox is a very bad idea.  What I need to study, is whether random PDF files from the internet (as opposed to general postscript) are therefore malware vectors.  I thought that PDF used a restricted subset of operations that "rendered" it not a general purpose language and therefore "safe".   But if SAFER was the implementation of that restricted subset, then all internet PDFs are suspect.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      