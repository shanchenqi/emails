  oss-security - Multiple vulnerabilities in Jenkins plugins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 25 Sep From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Multiple vulnerabilities in Jenkins plugins  Jenkins is an open source automation server which enables developers around the world to reliably build, test, and deploy their software. The following releases contain fixes for security vulnerabilities:  * Arachni Scanner Plugin * Argus Notifier Plugin * Artifactory Plugin * Chatter Notifier Plugin * Config File Provider Plugin 3.2 * Crowd 2 Integration Plugin * Dimensions Plugin * Email Extension Template Plugin 1.1 * Git Changelog Plugin 2.7 * HipChat Plugin * JIRA Plugin * Job Configuration History Plugin * JUnit Plugin * mesos Plugin * Monitoring Plugin * MQ Notifier Plugin * PAM Authentication Plugin 1.4 * Publish Over Dropbox Plugin * Rebuilder Plugin * SonarQube Scanner Plugin  Additionally, these plugin have security vulnerabilities that have been made public, but have no releases containing a fix yet:  * Metadata Plugin  Summaries of the vulnerabilities are below. More details, severity, and attribution can be found here:  We provide advance notification for security updates on this mailing list: https://groups.google.com/d/forum/jenkinsci-advisories  If you discover security vulnerabilities in Jenkins, please report them as described here: https://jenkins.io/security/#reporting-vulnerabilities  ---  A URL used to allow setting the description of a test object in JUnit  Plugin did not require POST requests, resulting in a cross-site request  forgery vulnerability.   Jira Plugin did not perform permission checks on a method implementing form  validation. This allowed users with Overall/Read access to Jenkins to  connect to an attacker-specified URL using attacker-specified credentials  IDs obtained through another method, capturing credentials stored in Jenkins.  Additionally, this form validation method did not require POST requests,  resulting in a cross-site request forgery vulnerability.   Config File Provider Plugin did not escape configuration file metadata,  resulting in a stored cross-site scripting (XSS) vulnerability.   A URL used to save configuration files based on form submissions in Config  File Provider Plugin did not require POST requests, resulting in a CSRF  vulnerability.   Rebuild Plugin did not escape parameter descriptions shown on the rebuild  form page, resulting in a stored Cross-Site Scripting (XSS) vulnerability  exploitable by users with the permission to configure jobs.   Job Config History Plugin did not escape some query parameters shown on its  pages, resulting in a reflected cross-site scripting (XSS) vulnerability.   Some URLs implementing form submission handling in Email Extension Template  Plugin did not require POST requests, resulting in a CSRF vulnerability  that allowed attackers to create or remove templates.   (1) HipChat Plugin did not perform permission checks on a method that sends  test notifications. This allowed users with Overall/Read access to Jenkins  to connect to an attacker-specified HipChat server using attacker-specified  connection settings and credentials IDs obtained through another method,  capturing credentials stored in Jenkins, and submitting messages to HipChat.  Additionally, this form validation method did not require POST requests,  resulting in a cross-site request forgery vulnerability.   (2) HipChat Plugin provides a list of applicable credential IDs to allow  administrators configuring the plugin to select the one to use.  This functionality did not check permissions, allowing any user with  Overall/Read permission to get a list of valid credentials IDs. Those could  be used as part of an attack to capture the credentials using another  vulnerability.   (1) Mesos Plugin provides a list of applicable credential IDs to allow  administrators configuring the Mesos cloud to select the one to use.  This functionality did not check permissions, allowing any user with  Overall/Read permission to get a list of valid credentials IDs. Those could  be used as part of an attack to capture the credentials using another  vulnerability.   (2) A missing permission check in a form validation method in Mesos Plugin  allowed users with Overall/Read permission to initiate a connection test,  connecting to an attacker-specified URL.  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   Crowd 2 Integration Plugin did not perform permission checks on a method  implementing form validation. This allowed users with Overall/Read access  to Jenkins to connect to an attacker-specified URL with attacker-specified  credentials and connection settings.  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   Crowd 2 Integration Plugin stored the Crowd password unencrypted in its  global configuration file on the Jenkins master. This password could be  viewed by users with access to the master file system.   Users with Overall/Read permission were able to access MQ Notifier Plugin’s  form validation URL, having it connect to an attacker-specified MQ system  with attacker-specified credentials.  Additionally, this form validation URL did not require POST requests,  resulting in a CSRF vulnerability.   A stored cross-site scripting (XSS) vulnerability in Metadata Plugin allows  users with permission to change metadata definitions to insert arbitrary  HTML/Javascript into Jenkins pages.   Metadata Plugin lacks a permission check that allows users with  Overall/Read access to Jenkins to change the plugin’s configuration.   Artifactory Plugin introduced support for securely storing  credentials using the Credentials Plugin. Old, insecurely stored  credentials however were not removed when switching to this new system.   / The pam4j library bundled in PAM Authentication Plugin had a bug that  resulted in it not properly validating user accounts.   SonarQube Scanner Plugin stored a server authentication token unencrypted  in its global configuration file on the Jenkins master. This token could be  viewed by users with access to the master file system.   Git Changelog Plugin did not escape the Git commit messages it displayed  since version resulting in a stored cross-site scripting (XSS)  vulnerability exploitable by users with commit access to specific Git  repositories.   Arachni Scanner Plugin stored its password unencrypted in its global  configuration file on the Jenkins master. This password could be viewed by  users with access to the master file system.   (1) Argus Notifier Plugin did not perform permission checks on a method  implementing form validation. This allowed users with Overall/Read access  to Jenkins to connect to an attacker-specified URL using attacker-specified  credentials IDs obtained through another method, capturing credentials  stored in Jenkins.  Additionally, this form validation method did not require POST requests,  resulting in a cross-site request forgery vulnerability.   (2) Argus Notifier Plugin provides a list of applicable credential IDs to allow  administrators configuring the plugin to select the one to use.  This functionality did not check permissions, allowing any user with  Overall/Read permission to get a list of valid credentials IDs. Those could  be used as part of an attack to capture the credentials using another  vulnerability.   (1) Chatter Notifier Plugin did not perform permission checks on a method  implementing form validation. This allowed users with Overall/Read access  to Jenkins to connect to an attacker-specified URL using attacker-specified  credentials IDs obtained through another method, capturing credentials  stored in Jenkins.  Additionally, this form validation method did not require POST requests,  resulting in a cross-site request forgery vulnerability.   (2) Chatter Notifier Plugin provides a list of applicable credential IDs to  allow users configuring the plugin’s functionality to select the one to use.  This functionality did not check permissions, allowing any user with  Overall/Read permission to get a list of valid credentials IDs. Those could  be used as part of an attack to capture the credentials using another  vulnerability.   Dimensions Plugin stored a password unencrypted in its global configuration  file on the Jenkins master. This password could be viewed by users with  access to the master file system.   Users with Overall/Read permission were able to access Dimensions Plugin’s  form validation URL, having it connect to an attacker-specified Dimensions  system with attacker-specified credentials.  Additionally, this form validation URL did not require POST requests,  resulting in a CSRF vulnerability.   Publish Over Dropbox Plugin stored authorization code and access code  unencrypted in its global configuration file on the Jenkins master. These  secrets could be viewed by users with access to the master file system.  Additionally, the authorization code was not masked from view using a  password form field.   / The JavaMelody library bundled in Monitoring Plugin is affected by an XML  External Entity (XXE) processing vulnerability.  This allows attacker to send crafted requests to a web application for  extraction of secrets from the file system, server-side request forgery, or  denial-of-service attacks.  Monitoring plugin updates its JavaMelody dependency to fix the issue.  The Jenkins security team and the maintainer of Monitoring Plugin have been  unable to reproduce the issue in Jenkins, but we still recommend updating.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      