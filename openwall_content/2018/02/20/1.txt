  oss-security - Re: net/ipv4/raw.c: raw_sendmsg() race  condition            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 20 Feb From: Alexander Popov <alex.popov@...ux.com> To: Mohamed Ghannam <simo.ghannam@...il.com>, oss-security@...ts.openwall.com Subject: Re: net/ipv4/raw.c: raw_sendmsg() race  condition  Hello Mohamed,  On Mohamed Ghannam wrote: > Hi, >  > This is an announcement for which is a race condition leads to > uninitialized stack variable, this might be used to gain code execution. >  > The bug was introduced  here > >  > And fixed here : >  Thanks a lot for your report, PoC and patch fixing the issue. Really great!  The exploitation of this kind of vulnerabilities should be blocked by STACKLEAK.  STACKLEAK is a Linux kernel hardening feature initially developed by Grsecurity/PaX. I'm doing my best to introduce it to the mainline kernel:  > By spraying the stack with controlled user data , we can take control of msg > pointer which is used later in ip_append_data().  I've tested your PoC against the kernel with STACKLEAK. The msg pointer is now initialized with STACKLEAK_POISON (-0xBEEF), which points to the unused hole in the virtual memory map.  So the access to msg->msg_iter gives the following:  [    BUG: unable to handle kernel paging request at [    IP: [    PGD P4D PUD PMD 0 [    Oops: [#1] SMP PTI [    Dumping ftrace buffer: [       (ftrace buffer empty) [    Modules linked in: [    CPU: 0 PID: Comm: poc Not tainted #4 [    Hardware name: QEMU Standard PC + PIIX, BIOS [    RIP: [    RSP: EFLAGS: [    RAX: RBX: RCX: [    RDX: RSI: RDI: [    RBP: R08: R09: [    R10: R11: R12: [    R13: R14: R15: [    FS:  [    CS:  DS: ES: CR0: [    CR2: CR3: CR4: [    Call Trace: [     ? [     [     [     ? [     ? [     [     [     ? [     ? [     [     [     ? [     [     [     [    RIP: [    RSP: EFLAGS: ORIG_RAX: [    RAX: ffffffffffffffda RBX: RCX: [    RDX: RSI: RDI: [    RBP: R08: R09: [    R10: R11: R12: [    R13: R14: R15: [    Code: 41 56 49 89 f6 41 55 41 54 49 89 cd 55 53 48 83 ec 48 65 48 8b 04 25 28 00 00 00 48 89 44 24 40 31 c0 48 89 7c 24 08 48 89 14 24 <41> 8b 45 00 a8 08 0f 85 58 01 00 00 4d 39 75 10 72 79 48 8b 3c [    RIP: RSP: [    CR2: [    ---[ end trace ]---   Do you think the attacker is able to bypass it? Thanks a lot again!  Best regards, Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      