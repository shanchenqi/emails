  oss-security - Re: Multiple vulnerabilities in Jenkins plugins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 5 Feb From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Re: Multiple vulnerabilities in Jenkins plugins   > On 5. Feb at Daniel Beck <ml@...kweb.net> wrote: >  > > JUnit plugin is affected by an XML External Entity (XXE) processing  > vulnerability. This allows an attacker to configure build processes such  > that JUnit plugin parses a maliciously crafted file that uses external  > entities for extraction of secrets from the Jenkins master, server-side  > request forgery, or denial-of-service attacks.    > (CCM)    > (Android Lint)    > > Credentials Binding plugin allows specifying passwords and other secrets as > environment variables, and will hide them from console output in builds. >  > However, since Jenkins will try to resolve references to other environment  > variables in environment variables passed to a build, this can result in  > other values than the one specified being provided to a build. For  > example, the value p4$$w0rd would result in Jenkins passing on p4$w0rd, as  > $$ is the escape sequence for a single $. >  > Credentials Binding plugin does not prevent such a transformed value (e.g.  > p4$w0rd) from being shown on the build log, allowing users to reconstruct  > the actual password value from the transformed one. >  > Credentials Binding plugin will now escape any $ characters in password  > values so they are correctly passed to the build.    > > Arbitrary code execution due to incomplete sandbox protection in Pipeline:  > Supporting APIs Plugin: Methods related to Java deserialization like  > readResolve implemented in Pipeline scripts were not subject to sandbox  > protection, and could therefore execute arbitrary code. This could be  > exploited e.g. by regular Jenkins users with the permission to configure  > Pipelines in Jenkins, or by trusted committers to repositories containing  > Jenkinsfiles. >  > Deserialization of objects in Pipeline is now also subject to sandbox  > protection.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      