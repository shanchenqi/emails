  oss-security - polkit: polkitd trusting client-supplied UID allows  spoofed authentication dialogs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 11 Jul From: Matthias Gerstner <mgerstner@...e.de> To: oss-security@...ts.openwall.com Subject: polkit: polkitd trusting client-supplied UID allows  spoofed authentication dialogs  Hello,  during a code reviewing related to polkit <https://www.freedesktop.org/wiki/Software/polkit/> I found a spoofed authentication vulnerability in the implementation of the polkitd daemon. It allows a local attacker to trigger authentication dialogs for other users' processes. This way the attacker can obtain certain information about the polkit rules configuration of other users, confuse other users or DoS other users by infinitely triggering authentication dialogs.  Basically the issue is that an attacker is able to specify arbitrary target process UIDs when talking to polkitd via D-Bus like this:  $ gdbus call --system --dest org.freedesktop.PolicyKit1 \ 	--object-path /org/freedesktop/PolicyKit1/Authority \ 	--method org.freedesktop.PolicyKit1.Authority.CheckAuthorization \ 	'("unix-process", {"pid": <uint32 ${PID}>, "start-time": <uint64 0>, "uid": <${UID}>})' \ 	org.freedesktop.timedate1.set-time '[]' 1 ''  Where ${PID} needs to be the process ID of the target process and ${UID} the user ID of the calling process i.e. `id -u`.  Upstream just released version of polkit that addresses this issue by way of commit The issue was introduced with a fix for in polkit version  Further below you can find the upstream commit message with a more detailed explanation of the issue and its fix. I want to thank the upstream developers for the constructive communication and quick handling of the issue.  Best regards  Matthias  Timeline:  I discovered and analyzed the issue I reported the issue privately to upstream via     dbus-security@...ts.freedesktop.org. In the following days upstream     devised a patch that was discussed and reviewed on the mailing list.     Publication has been scheduled for together with the     release of the fixed polkit version. The upstream release was published as scheduled.  References:  - Upstream Release Notice: - Upstream Fix: - SUSE Bug for the issue:  Upstream Commit Message:       Fix Trusting client-supplied UID             As part of the D-Bus clients were allowed (and      encouraged) to submit the UID of the subject of authorization checks      to avoid races against UID changes (notably using executables      set-UID to root).            However, that also allowed any client to submit an arbitrary UID, and      that could be used to bypass "can only ask about / affect the same UID"      checks in CheckAuthorization / RegisterAuthenticationAgent /      UnregisterAuthenticationAgent.  This allowed an attacker:            - With CheckAuthorization, to cause the registered authentication        agent in victim's session to pop up a dialog, or to determine whether        the victim currently has a temporary authorization to perform an        operation.              (In principle, the attacker can also determine whether JavaScript        rules allow the victim process to perform an operation; however,        usually rules base their decisions on information determined from        the supplied UID, so the attacker usually won't learn anything new.)            - With RegisterAuthenticationAgent, to prevent the victim's        authentication agent to work (for a specific victim process),        or to learn about which operations requiring authorization        the victim is attempting.            To fix this, expose internal _polkit_unix_process_get_owner() /      obsolete polkit_unix_process_get_owner() as a private      polkit_unix_process_get_racy_uid__() (being more explicit about the      dangers on relying on it), and use it in      polkit_backend_session_monitor_get_user_for_subject() to return      a boolean indicating whether the subject UID may be caller-chosen.            Then, in the permission checks that require the subject to be      equal to the caller, fail on caller-chosen UIDs (and continue      through the pre-existing code paths which allow root, or root-designated      server processes, to ask about arbitrary subjects.)            Signed-off-by: Miloslav TrmaÄ <mitr@...hat.com>   --  Matthias Gerstner <matthias.gerstner@...e.de> Dipl.-Wirtsch.-Inf. (FH), Security Engineer https://www.suse.com/security Telefon: +49 53 GPG Key ID:  SUSE Linux GmbH GF: Felix ImendĂśrffer, Jane Smithard, Graham Norton HRB (AG Nuernberg)   Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      