  oss-security - Re: accountsservice: insufficient path check in  user_change_icon_file_authorized_cb()            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 20 Jul From: Jakub Wilk <jwilk@...lk.net> To: oss-security@...ts.openwall.com Subject: Re: accountsservice: insufficient path check in  user_change_icon_file_authorized_cb()  * Matthias Gerstner <mgerstner@...e.de>, >>>I think the easiest way to fix this is to normalize the user supplied  >>>filename e.g. using realpath() >> >>Using realpath(3) for access control is almost always a mistake: this  >>function expands symlinks, including attacker-controlled symlinks. > >can you elaborate what your main worry of using realpath is in this  >context?  AIUI, in your original patch, canonicalized path was used for prefix  check, but then the orignal was stored. If you used realpath() for  canonicalization, the attacker could make a symlink that points to  /usr/share/icons/moo.png, so that the check passes, and then switch  the symlink to something else.  But in the patch that went upstream[0], it's the canonicalized path that  is stored, which is probably a good idea anyway.  Another problem with realpath(), unrelated to symlinks, is that if it's  run as root, it could reveal to the attacker whether an  otherwise-inaccessible directory exists. For example,  realpath("/home/bob/foobar/../../../usr/share/icons/moo.png", ...) would  succeed iff /home/bob/foobar/ existed.   [0]  --  Jakub Wilk  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      