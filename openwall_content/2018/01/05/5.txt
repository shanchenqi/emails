  oss-security - predictably random password generation in third-party  pass-compatible software, "QtPass"            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 5 Jan From: "Jason A. Donenfeld" <Jason@...c4.com> To: oss-security <oss-security@...ts.openwall.com> Subject: predictably random password generation in third-party  pass-compatible software, "QtPass"  Hi folks,  "QtPass" is a separate project entirely from pass. It shares no code with "pass", the project I maintain. But, "QtPass" does endeavor to be compatible with pass. However, it is in fact a completely separate project. Best practice is probably not to stray too far from my nest to these third-party GUIs, given bugs like this one, a way of trivially predicting all passwords ever generated with "QtPass".  Bug report is here: Fix landed in  All passwords generated with "QtPass"'s built-in password generator are possibly predictable and enumerable by hackers. The generator used libc's random(), seeded with srand(msecs), where msecs is not the msecs since (not that that'd be secure anyway), but rather the msecs since the last second. This means there are only different sequences of generated passwords. Disaster.  If you're using this software, now would be a good time to change all your passwords and regenerate them using a secure utility such as pass (what this mailing list is about), or update to the latest version of this third party "QtPass" software and regenerate from there. All distributions should update and remove vulnerable versions from their package trees.  The fix I proposed to the "QtPass" developers involves using Qt built-in CSPRNG wrapper, or /dev/urandom for older Qt versions.  Regards, Jason  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      