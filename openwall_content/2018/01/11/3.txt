  oss-security - util-linux mount/unmount ASLR bypass via environment variable            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 11 Jan From: halfdog <me@...fdog.net> To: oss-security@...ts.openwall.com Subject: util-linux mount/unmount ASLR bypass via environment variable  Hello list,  Just FYI. The issue was not rated important, hence reported in public mailing list, see [0]. Copy of message:   Cleaning up another issue, I noticed that I haven't reported this one yet. Debugging of libmount can be activated, also in SUID binaries, thus spilling out the heap addresses. Note that "CXT" structure contains function pointers to overwrite.  Test:  LIBMOUNT_DEBUG=all /bin/umount /  Output:  libmount:      CXT: ----> allocate [RESTRICTED] libmount:      CXT: umount: / libmount:      CXT: umount: lookup FS for '/' libmount:      CXT: checking for writable tab files libmount:    UTILS: utab: /run/mount/utab libmount:    CACHE: alloc libmount:    CACHE: canonicalize path / libmount:    CACHE: add entry [ 1] (path): /: / libmount:      CXT: tabfilter ENABLED! libmount:      TAB: alloc ...  The output can easily be used by creating a local domain socket with only 4k buffer size, filling it up until writes are blocking and then start umount with that socket as stdout. This allows race-free reading of the address output before umount accesses other user-controlled resource. Thus any error during the downstream procedure creating some kind of write-where vulnerability will always find the correct target.  hd  [0]    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      