  oss-security - ptrace() incorrect error handling leads to  corruption and DoS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 01 May From: Andy Lutomirski <luto@...nel.org> To: oss security list <oss-security@...ts.openwall.com> Subject: ptrace() incorrect error handling leads to  corruption and DoS  The Linux ptrace code virtualizes access to the debug registers, and the virtualization code has incorrect error handling.  This means that if you write an illegal value to, say, DR0, the internal state of the kernel's breakpoint tracking can become corrupt despite the fact that the ptrace() call will return -EINVAL.  As a example, you can find the address of do_debug in /proc/kallsyms on an x86 kernel and pass that address to the attached PoC.  I suspect that architectures other than x86 are affected as well, but I haven't tried to exploit it.  The bug itself is spread all over the place in the kernel in generic and arch code.  I haven't spotted an obvious way to get privilege escalation using this bug, but it may exist.  For example, it's plausible that using this bug to target the perf NMI handler could result in overflowing the NMI stack, resulting in various forms of corruption.  I haven't tried to analyze the impact on non-x86 architectures since I only know how x86 breakpoints work, but the effects of the bug could be very different.  Linus has mostly fixed this upstream in commit  With that commit applied, the error handling is still wrong but the defect results in a disabled breakpoint instead of an incorrect breakpoint.  This bug was discovered by me.  View attachment "dr7_clash.c" of type "text/x-csrc" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      