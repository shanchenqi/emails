  oss-security - Dolibarr SQL Injection vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 21 May From: Sysdream Labs <labs@...dream.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: Dolibarr SQL Injection vulnerability  # Dolibarr SQL Injection vulnerability   ## Description  Dolibarr is an "Open Source ERP & CRM for Business" used by many companies worldwide.  It is available through [GitHub](https://github.com/Dolibarr/dolibarr) or as distribution packages (e.g .deb package).  **Threat**  The application does not handle user input properly and allows execution of arbitrary SQL commands on the database.  **Expectation**  Prepared queries should be used in order to avoid SQL injection in user input.   ## Vulnerability type  **CVE ID**:  **Access Vector**: remote  **Security Risk**: high  **Vulnerability**: CWE-89  **CVSS Base Score**: 7.5  **CVSS Vector String**: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N   ## Details  The database connector escapes quotes with the `real_escape_string()` wrapper. However it is still possible to perform injection on integer parameters without quotes.  ```php mysqli.class.php      /**      *  Escape a string to insert data      *      *  @param  string  $stringtoencode     String to escape      *  @return string                      String escaped      */     function escape($stringtoencode)     {         return $this->db->real_escape_string($stringtoencode);     } ```  Additional checks are defined later, which forbit some SQL keywords (e.g `union`, `create`, `insert`). However, by url encoding the payload, these checks are bypassed.  ```php main.inc.php  /**  * Security: SQL Injection and XSS Injection (scripts) protection (Filters on GET, POST, PHP_SELF).  *  * @param       string      $val        Value  * @param       string      $type       1=GET, 0=POST, 2=PHP_SELF  * @return      int                     >0 if there is an injection  */ function test_sql_and_script_inject($val, $type) {     $inj = 0;     // For SQL Injection (only GET are used to be included into bad escaped SQL requests)     if ($type == 1)     {         $inj += preg_match('/updatexml\(/i',     $val);         $inj += preg_match('/delete\s+from/i',   $val);         $inj += preg_match('/create\s+table/i',  $val);         $inj += preg_match('/insert\s+into/i',   $val);         $inj += preg_match('/select\s+from/i',   $val);         $inj += preg_match('/into\s+(outfile|dumpfile)/i',  $val);     }     if ($type != 2) // Not common, we can check on POST     {         $inj += preg_match('/update.+set.+=/i',  $val);         $inj += preg_match('/union.+select/i',   $val);         $inj += preg_match('/(\.\.%2f)+/i',      $val);     }     // For XSS Injection done by adding javascript with script     // This is all cases a browser consider text is javascript:     // When it found '<script', 'javascript:', '<style', 'onload\s=' on body tag, '="&' on a tag size with old browsers     // All examples on page: http://ha.ckers.org/xss.html#XSScalc     // More on https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet     $inj += preg_match('/<script/i', $val);     $inj += preg_match('/<iframe/i', $val);     $inj += preg_match('/Set\.constructor/i', $val);    // ECMA script 6     if (! defined('NOSTYLECHECK')) $inj += preg_match('/<style/i', $val);     $inj += preg_match('/base[\s]+href/si', $val);     $inj += preg_match('/<.*onmouse/si', $val);       // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>     $inj += preg_match('/onerror\s*=/i', $val);       // onerror can be set on img or any html tag like <img title='...' onerror = alert(1)>     $inj += preg_match('/onfocus\s*=/i', $val);       // onfocus can be set on input text html tag like <input type='text' value='...' onfocus = alert(1)>     $inj += preg_match('/onload\s*=/i', $val);        // onload can be set on svg tag <svg/onload=alert(1)> or other tag like body <body onload=alert(1)>     $inj += preg_match('/onclick\s*=/i', $val);       // onclick can be set on img text html tag like <img onclick = alert(1)>     $inj += preg_match('/onscroll\s*=/i', $val);      // onscroll can be on textarea     //$inj += preg_match('/on[A-Z][a-z]+\*=/', $val);   // To lock event handlers onAbort(), ...     $inj += $val);       // refused string ':' encoded (no reason to have it encoded) to lock 'javascript:...'     //if ($type == 1)     //{         $inj += preg_match('/javascript:/i', $val);         $inj += preg_match('/vbscript:/i', $val);     //}     // For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)     if ($type == 1) $inj += preg_match('/"/i', $val);       // We refused " in GET parameters value     if ($type == 2) $inj += preg_match('/[;"]/', $val);     // PHP_SELF is a file system path. It can contains spaces.     return $inj; } ```  ## Proof of Concept : retrieving the database name.  Payload:  ``` 1) union select  Url-encoded payload: ```  ```http GET HTTP/1.1 Host: User-Agent: Mozilla/5.0 (X11; Linux Accept: Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Cookie: Connection: close Upgrade-Insecure-Requests: 1  ...  </a>              </td>                           <td>2</td>              <td></td>              <td>1</td>              <td>21</td>              <td class="nowrap"> ```   ## Affected versions  * Version (last stable version as of March - previous versions are probably also vulnerable but not tested  ## Solution  Update to ([changelog](https://raw.githubusercontent.com/Dolibarr/dolibarr/develop/ChangeLog))  ## Timeline (dd/mm/yyyy)  * : Initial discovery * : Contact with the editor * : Editor acknowledges the vulnerability * : Editor announces fixes in version * : Vulnerability disclosure  ## Credits  * Issam RABHI (i dot rabhi at sysdream dot com) * Kevin LOCATI (k dot locati at sysdream dot com)  --  SYSDREAM Labs <labs@...dream.com>  GPG : C43E 2A2E 8EB4 8CD9 D5B2  * Website: https://sysdream.com/ * Twitter: @sysdream    Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      