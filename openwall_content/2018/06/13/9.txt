  oss-security - Re: Multiple vulnerabilities in Jenkins and Jenkins  plugins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 13 Jun From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Re: Multiple vulnerabilities in Jenkins and Jenkins  plugins   > On 9. May at Daniel Beck <ml@...kweb.net> wrote: >  > > Users with Overall/Read permission were able use the list-plugins CLI > command and view the About Jenkins page to list all installed plugins.   > > The built-in Jenkins user database optionally allows user registration. > This feature did not properly sanitize user names, allowing registration of > user names containing control characters. This could be used to confuse > administrators (appearing to be a different user) while preventing deletion > of such users through the UI.   > > The agent to master security subsystem ensures that the Jenkins master is > protected from maliciously configured agents. A path traversal vulnerability > allowed agents to escape whitelisted directories to read and write to files > they should not be able to access.   > > The form validation code for a tool installer improperly checked > permissions, allowing any user with Overall/Read permission to submit a > HTTP GET request to any user specified URL, and learn whether the response > was successful (HTTP or not. >  > Additionally, this functionality did not require POST requests be used, > thereby allowing the above to be performed without direct access to Jenkins > via Cross-Site Request Forgery attacks.   > > Gitlab Hook Plugin does not encrypt the Gitlab API token used to access > Gitlab. This can be used by users with master file system access to obtain > GitHub credentials. >  > Additionally, the Gitlab API token round-trips in its plaintext form, and > is displayed in a regular text field to users with Overall/Administer > permission. This exposes the API token to people viewing a Jenkins > administratorâs screen, browser extensions, cross-site scripting > vulnerabilities, etc.   > > Black Duck Hub Plugin did not perform permission checks for its config.xml > API endpoint. This allowed any user with Overall/Read permission to both > read and write the plugin configuration XML.   > > Black Duck Hub Plugin config.xml API endpoint was affected by an XML > External Entity (XXE) processing vulnerability. This allowed an attacker > with Overall/Read access to have Jenkins parse a maliciously crafted file > that uses external entities for extraction of secrets from the Jenkins > master, server-side request forgery, or denial-of-service attacks.   > / CVE pending > Groovy Postbuild Plugin did not properly escape badge content from user > input, resulting in a stored cross-site scripting vulnerability.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      