  oss-security - Re: Apache Ignite is vulnerable to  existing            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 6 Jun From: Denis Magda <dmagda@...che.org> To: Tomas Hoger <thoger@...hat.com> Cc: oss-security@...ts.openwall.com, dev <dev@...ite.apache.org>,  	"Rai, Harendra" <harendra.rai@....com> Subject: Re: Apache Ignite is vulnerable to  existing  Hello Tomas,  We've just updated the version of Binutils because Ignite doesn't use this library directly. So we don't need to inject addBeanIntrospector call.  Binutils are used by some dependencies like Cassandra. Let us confirm that the dependencies shouldn't be upgraded.  -- Denis  On Wed, Jun 6, at AM, Tomas Hoger <thoger@...hat.com> wrote:  > Hi Denis! > > On Fri, 1 Jun Denis Magda wrote: > > > Apache Ignite is vulnerable to existing > > > > Severity: Important > > > > Vendor: The Apache Software Foundation > > > > Versions Affected: Apache Ignite 2.4 or earlier > > > > Impact: > > An attacker can execute arbitrary code on Ignite nodes in the case > > when Ignite classpath contains arbitrary vulnerable classes. > > > > Description: > > Apache Ignite used library which did not > > suppress the class property, which allowed remote attackers to > > "manipulate" the ClassLoader and execute arbitrary code via the class > > parameter, as demonstrated by the passing of this parameter to the > > getClass method of the ActionForm object in Struts 1. > > This announcement is very light on details.  Would it be possible to > provide more details, ideally a link to the fix that was applied to > address this issue? > > Searching for more information, I found out that the upstream Jira > ticket for this issue should be: > > > > The ticket is non-public, but its content is leaked via a mailing list: > > https://www.mail-archive.com/search?l=issues%40ignite. > > > This has some important info, indicating that the problem (only?) > affects Ignite for .NET.  The reported problem basically seems to be: > Ignite for .NET bundles commons-beanutils and that should be > upgraded to  Looking into and > I can see that commons-beanutils upgrade as > requested did happen in > > Note that I do not see any commons-beanutils jar in > and >  Are those, as well as source > distribution, considered unaffected? > > Now back to the CVE - I do not believe that your re-use of the old > is correct.  In the report, there was some ambiguity > whether Struts or Commons-BeanUtils should be blamed for the flaw, > however it seems to be explicit enough that the is for > Struts: > > > > As noted in the mail, the problem wasn't fixed in Commons-BeanUtils, > which only added mechanisms to make it easy for applications using > Commons-BeanUtils to easily disable processing of the "class" > property.  It did not even disable processing by default, as noted in > the release notes: > > http://commons.apache.org/proper/commons-beanutils/ > > > """ > Release mainly addresses a potential security issue when accessing > properties in an uncontrolled way. In a nutshell, if an application that > uses > Commons BeanUtils passes property paths from an external source directly to > the getProperty() method of BeanUtilsBean, an attacker can access the class > loader via the class property available on all Java objects. > > In version now a special BeanIntrospector class was added which > allows > suppressing this property. Note that this BeanIntrospector is NOT enabled > by > default! Commons BeanUtils is a low-level library, and on this layer it > cannot > be decided whether access to a certain property is legal or not. Therefore, > an application has to activate this suppressing BeanIntrospector > explicitly. > This can be done with the following lines of code: > > BeanUtilsBean bub = new BeanUtilsBean(); > bub.getPropertyUtils().addBeanIntrospector( >     SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS); > > Now all access to properties has to be done via the specially configured > BeanUtilsBean instance. More information about this issue can be found at > or in section 2.5 > of the user's guide. > """ > > Note that there was a request to assign a separate CVE for the > BeanUtils part that was rejected (actually, was assigned > and later rejected), see this post from Mitre for details: > > > > It has few parts that are relevant to Ignite: > > """ > In particular, the change has this documentation: > >    Adding this instance as BeanIntrospector to an instance of >    PropertyUtilsBean suppresses the class property; it can then no >    longer be accessed. > > This is an additional step that would need to be followed for any > currently shipped product that relies on commons-beanutils. Simply > picking up version does not solve the problem. The product's > source code must additionally be modified by (for example) changing > or adding an addBeanIntrospector method call. > """ > > Did Ignite get any other changes related to this issue apart from > upgrading Commons-BeanUtils?  If not, Commons-BeanUtils upgrade should > not be expected to solve the problem (if Ignite actually was affected / > used Commons-BeanUtils in a vulnerable way, which isn't demonstrated in > the > > Another relevant part is: > > """ > If any other product makes a security announcement that they have > added > addBeanIntrospector(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS) > or equivalent code as a change to the default behavior, then there can > be an individual CVE ID for that product. However, if any other product > simply makes a security announcement that they have decided to ship > commons-beanutils -- but the class property remains exposed in > the product as it is shipped and installed by default -- then a CVE ID > would not be assigned. > """ > > If Ignite got/gets a fix that leverages the SUPPRESS_CLASS from > Commons-BeanUtils to disable processing of the class property, it > should get its own CVE assigned. > > -- > Tomas Hoger / Red Hat Product Security >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      