  oss-security - Re: ghostscript: bypassing executeonly to escape  -dSAFER sandbox            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 10 Oct From: Hanno Bรถck <hanno@...eck.de> To: oss-security@...ts.openwall.com Subject: Re: ghostscript: bypassing executeonly to escape  -dSAFER sandbox  On Wed, 10 Oct Eddie Chapman <eddie@...k.net> wrote:  > While the vulnerability in ghostscript itself is clear in this > thread, does anyone have any more info on the above aspect of this? > i.e is the above scenario (inadvertently running postscript, perhaps > contained in an image, through ghostscript by just browsing a > malicious site) limited to just nautilus in gnome environments? Do > other browsers/environments handle this better or do they do similar? > It seems that, strictly speaking, the "critical" nature of this > vulnerability hinges on the behaviour of the browser/desktop > environment. Otherwise the scope is limited to an individual manually > downloading a postscript file and opening it outside of the browser.  evince installs a thumbnail entry to /usr/share/thumbnailers  This is a generic location where applications can install files (I believe they follow the .desktop specification, which is an ini-based format). This is thus not nautilus-specific, but every filemanager that uses this format will be affected. A quick googling tells me e.g. pcmanfm is also affected. I'm not sure if dolphin uses them as well.  Nautilus is trying to solve this by sandboxing the thumbnailers. However this depends on bubblewrap and is currently fail-open, i.e. if bubblewrap is not available it will not disable the thumbnailing, it will just not sandbox it. In practice this means it's often not sandboxed. I doubt this will change any time soon.  Very similar problems show up with desktop search tools.  I think this whole concept is questionable and should be reviewed. I think it's not desirable to have thumbnailers for all kinds of formats, instead a more reasonable approach would be to limit thumbnailing to a few widely used formats that have well-reviewed libraries (e.g. I don't think that libjpeg or libpng will have any vulnerabilities left that are even remotely as severe as the things tavis found in ghostscript).  --  Hanno Bรถck https://hboeck.de/  mail/jabber: hanno@...eck.de GPG:  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      