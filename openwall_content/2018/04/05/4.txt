  oss-security - Re: Linux Kernel Defence Map            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 6 Apr From: Alexander Popov <alex.popov@...ux.com> To: Kees Cook <keescook@...omium.org> Cc: Kurt Seifried <kseifried@...hat.com>, oss-security@...ts.openwall.com,  James Morris <jmorris@...ei.org>, "Serge E. Hallyn" <serge@...lyn.com>,  Brad Spengler <spender@...ecurity.net>, PaX Team <pageexec@...email.hu>,  "Reshetova, Elena" <elena.reshetova@...el.com> Subject: Re: Linux Kernel Defence Map  On Kees Cook wrote: > On Thu, Apr 5, at AM, Alexander Popov <alex.popov@...ux.com> wrote: >> On Kees Cook wrote: > "type confusion" seems weird to me, but I haven't spent a lot of time > weighing the options of the naming of these things. "Overwriting a > function pointer" is the method, and the bug is "unexpectedly > accessing userspace memory from the kernel" (which is usually > "something overwrite a pointer").  Just got an idea to call it "userspace data access". Short and simple!  I also combined SMAP/PAN and UDEREF into a cluster to reduce the number of edges. Now it looks a bit better.  >> Kees, thanks again for such a cool feedback. The map is updated. >  > Very cool! Maybe also add an out-of-tree bubble for "Clang CFI", which > gives forward-edge protection for code-reuse...  Ok. Created a CFI cluster with RAP and Clang CFI inside.  However, I didn't manage to find any materials about applying Clang CFI to the Linux kernel.  Thanks! Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      