  oss-security - OpenSSL: RSA key generation follows several non  constant time code paths            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 16 Apr From: Billy Brumley <bbrumley@...il.com> To: oss-security@...ts.openwall.com Subject: OpenSSL: RSA key generation follows several non  constant time code paths  Hey Folks,  We discovered 3 vulnerabilities in OpenSSL that allow cache-timing enabled attackers to recover RSA private keys during key generation.  1. BN_gcd gets called to check that _e_ and _p-1_ are relatively prime. This function is not constant time, and leaks critical GCD state leading to information on _p_.  2. During primality testing, BN_mod_inverse gets called without the BN_FLG_CONSTTIME set during Montgomery arithmetic setup. The resulting code path is not constant time, and leaks critical GCD state leading to information on _p_.  3. During primality testing, BN_mod_exp_mont gets called without the BN_FLG_CONSTTIME set during modular exponentiation, with an exponent _x_ satisfying _p - 1 = 2**k * x_ hence recovering _x_ gives you most of _p_. The resulting code path is not constant time, and leaks critical exponentiation state leading to information on _x_ and hence _p_.  OpenSSL issued to track this issue.  # Affected software  LibreSSL fixed these issues (nice!) way back when this was reported in Jan Looks like commits   We verified that with a debugger.  OTOH, OpenSSL wanted concrete evidence of exploitability. That's what we did over the past year and a half or so.We ran with bug (1) and recover RSA keys with cache-timings, achieving roughly 30% success rate in over 10K trials on a cluster.  Affects and presumably all the EOL lines.  ## Fixes  Recently, it looks like (1) was independently discovered, and some code changes happened. Nothing for (2) and (3).  ###  Part of the fix (1) is in commits   In combination with our contributed patch in   we verified with a debugger they cumulatively solve (1) (2) and (3).  ###  Part of the fix (1) is in commits   In combination with our contributed patch in   we verified with a debugger they cumulatively solve (1) (2) and (3).  Look for our preprint on http://eprint.iacr.org/ soon -- working title is "One Shot, One Trace, One Key: Cache-Timing Attacks on RSA Key Generation". We'll update the list with the full URL once it's posted.  # Timeline  Jan Notified OpenSSL, LibreSSL, BoringSSL 4 Apr Notified OpenSSL again, with PoC and 16 Apr, UTC embargo 11 Apr Notified distros list 16 Apr Notified oss-security list  Thanks for reading!  Alejandro Cabrera Aldaya Cesar Pereida Garcia Luis Manuel Alvarez Tapia Billy Brumley  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      