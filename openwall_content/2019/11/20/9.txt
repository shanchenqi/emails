  oss-security - Re: Mitigating malicious packages in gnu/linux            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 20 Nov (CST) From: Bob Friesenhahn <bfriesen@...ple.dallas.tx.us> To: oss-security@...ts.openwall.com Subject: Re: Mitigating malicious packages in gnu/linux  On Wed, 20 Nov Jeremy Stanley wrote:  > On Bob Friesenhahn wrote: > [...] >> Modern GNU/Linux systems have far too much executing code to >> reasonably secure. Paring down the amount of executing code helps >> quite a lot with improving security. > > In your opinion, how does this compare with proprietary operating > systems? Do they have more or less code executed than modern > GNU/Linux systems (or can we even know)? How about the popular BSD > Unix derivatives? What is your benchmark for the correct amount of > code to be executed, or is this analysis based on comparison with an > abstract ideal operating system archetype?  These are all good questions.  I use OmniOSce (a free-software Sun Solaris/SVR4 server derivative),  and it claims (https://omniosce.org/setup/freshinstall) to require  8GiB of space but I recall an original install of less than 4GiB.  A  Ubuntu KDE desktop system here (Kubuntu) used for software  development seems to be consuming about 20GiB of space.  I work on dedicated Linux-based systems where the root filesystem  takes just 16MiB (compressed) of space (19MiB including boot  firmware).  Linux-based systems are still able to boot and run from a  CD.  BSD systems which are used as firewalls or for dedicated functions can  be quite small.  The amount of software installed and running on Linux systems  continues to grow rapidly, and tend to defeat the end user from  understanding the purpose or even being aware of the existence of the  applications.  With a great many libraries and applications brought in  as metapackage dependencies, the security exposure of typical Linux  desktop systems seems quite high.  A secure system should do almost nothing by default with each service  enabled only starting absolutely required software to perform the  function.  Functionality should be incrementally enabled.  This is not  what modern Linux desktops are like.  Regardless, the source for these systems is the original source code  and a defect or malign intent of the source code can bring down the  whole system.  Bob --  Bob Friesenhahn bfriesen@...ple.dallas.tx.us, http://www.simplesystems.org/users/bfriesen/ GraphicsMagick Maintainer,    http://www.GraphicsMagick.org/ Public Key,     http://www.simplesystems.org/users/bfriesen/public-key.txt  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      