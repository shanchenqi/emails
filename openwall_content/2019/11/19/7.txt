  oss-security - Re: Mitigating malicious packages in gnu/linux            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 19 Nov From: Ludovic Courtès <ludo@....org> To: Tim Kuijsten <info+oss-security@...send.nl> Cc: oss-security@...ts.openwall.com Subject: Re: Mitigating malicious packages in gnu/linux  Hi,  Tim Kuijsten <info+oss-security@...send.nl> skribis:  >> There is not a definitive solution here. But there are multiple efforts and >> research going on. The most important one, in my opinion, is the reproducible >> builds project [1]. We need to ensure we are not inserting random or >> non-deterministic data into our build artifacts. This stretches from upstream >> developers providing tarballs, to pre-compiled sources and packages from >> distributions. There is no distribution today that has full reproducible builds, >> but there are many projects that work towards this and work on reproducible >> builds. > > One attack that is not solved by reproducible builds is one on the toolchain. > This can be solved with bootstrappable builds[1] which is about minimizing the > number of trusted binaries that are needed to produce the toolchain, that > produced the toolchain, ... that was used to build your package.  Efforts in that area are fruitful and have already led to a smaller set of “bootstrap seeds” (binaries from which the rest of the system is built from source) for GNU Guix, an important step forward:     Thanks to people working on GNU Mes and related projects at <https://bootstrappable.org/>, we have good hope to see that set of bootstrap seeds further reduced soon.  Reproducible builds and bootstrappable builds enable provenance tracking and auditing, which are key to security.  Ludo’.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      