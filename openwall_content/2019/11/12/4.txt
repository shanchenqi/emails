  oss-security - Xen Security Advisory v1 - TSX Asynchronous  Abort speculative side channel            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 12 Nov From: Xen.org security team <security@....org> To: xen-announce@...ts.xen.org, xen-devel@...ts.xen.org,  xen-users@...ts.xen.org, oss-security@...ts.openwall.com CC: Xen.org security team <security-team-members@....org> Subject: Xen Security Advisory v1 - TSX Asynchronous  Abort speculative side channel  -----BEGIN PGP SIGNED MESSAGE----- Hash:              Xen Security Advisory /              TSX Asynchronous Abort speculative side channel  ISSUE DESCRIPTION =================  This is very closely related to the Microarchitectural Data Sampling vulnerabilities from May  Please see for details about MDS.  A new way to sample data from microarchitectural structures has been identified.  A TSX Asynchronous Abort is a state which occurs between a transaction definitely aborting (usually for reasons outside of the pipeline's control e.g. receiving an interrupt), and architectural state being rolled back to start of the transaction.  During this period, speculative execution may be able to infer the value of data in the microarchitectural structures.  For more details, see:   https://software.intel.com/security-software-guidance/insights/deep-dive-intel-transactional-synchronization-extensions-intel-tsx-asynchronous-abort  IMPACT ======  An attacker, which could include a malicious untrusted user process on a trusted guest, or an untrusted guest, can sample the content of recently-used memory operands and IO Port writes.  This can include data from:   * A previously executing context (process, or guest, or    hypervisor/toolstack) at the same privilege level.  * A higher privilege context (kernel, hypervisor, SMM) which    interrupted the attacker's execution.  Vulnerable data is that on the same physical core as the attacker.  This includes, when hyper-threading is enabled, adjacent threads.  An attacker cannot use this vulnerability to target specific data.  An attack would likely require sampling over a period of time and the application of statistical methods to reconstruct interesting data.  VULNERABLE SYSTEMS ==================  Systems running all versions of Xen are affected.  Only x86 processors are vulnerable. ARM processors are not believed to be vulnerable.  Only Intel based processors are affected.  Processors from other manufacturers (e.g. AMD) are not believed to be vulnerable.  Only Intel processors supporting TSX (Transactional Synchronization eXtensions) are affected.  Systems which have the (MDS) fixes, and do not enumerate MDS_NO (Hardware fixes to MDS) are not vulnerable to TAA (Specifically, the changes of using VERW flushing and disabling HyperThreading will prevent data leakage via both MDS and TAA.)  If the Xen patches for MDS have been applied, Xen will identify at boot if the CPU reports MDS_NO.  i.e.    [root@...alhost ~]# xl dmesg | grep MDS_NO   (XEN)   Hardware features: IBRS/IBPB STIBP L1D_FLUSH SSBD MD_CLEAR IBRS_ALL RDCL_NO SKIP_L1DFL MDS_NO  Support for TSX is reported by Linux (>=3.4) as `hle' and `rtm' in the cpu flags (`grep -e hle -e rtm /proc/cpuinfo').  (Note that applying Option A from Resolution, below, will disable TSX so suppressing this report, even if the CPU would be vulnerable with TSX enabled.)  In summary: systems which support TSX and enumerate MDS_NO are vulnerable to (TAA).  MITIGATION ==========  There is no mitigation available.  RESOLUTION ==========  New microcode is required in all cases.  It may be available via a firmware update (consult your hardware vendor), or available for boot-time loading (consult your dom0 OS vendor).  There are two approaches:  Option A:    * Upgrade to the new microcode.   * Apply the Xen patches (listed below).    This will disable TSX (by default, but reenabling it would   reintroduce the vulnerability).  This option is the recommended   resolution.  Option B:    * Upgrade to the new microcode.   * Boot Xen with `smt=0 spec-ctrl=md-clear'.   * (The patches are not strictly required.)    This option is recommended only if it is known that the workload is   such that it is important to retain the TSX feature.    `smt=0' disables hyper-threading, and will have a significant   performance impact.  See `DISCUSSION CONCERNING SMT/HYPER-THREADING'   in for more information about the implications and options.    Note that the Xen command line argument `spec-ctrl=md-clear' must be   specified to mitigate even though some readings of   suggest it might be enabled by default when needed.  This is because   Option B reuses the same mitigation for a new problem.   `spec-ctrl=md-clear' is the default on CPUs vulnerable to   however, it is not the default on CPUs vulnerable to  In each case with the Xen patches applied, appropriate microcode can be observed by finding TSX_CTRL enumerated:    [root@...alhost ~]# xl dmesg | grep TSX_CTRL   (XEN)   Hardware features: IBRS/IBPB STIBP L1D_FLUSH SSBD MD_CLEAR IBRS_ALL RDCL_NO SKIP_L1DFL MDS_NO TSX_CTRL  There is no further action (beyond Option A or B above) required for guest kernel/userspace software, and nothing they could do differently to protect themselves in the absence of those changes.            xen-unstable      Xen      Xen      Xen       Xen 4.9.x       Xen 4.8.x  $             $  NOTE REGARDING LACK OF EMBARGO ==============================  Despite an attempt to organise predisclosure, the discoverers ultimately did not authorise a predisclosure. -----BEGIN PGP SIGNATURE-----  =G0Eh -----END PGP SIGNATURE-----  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      