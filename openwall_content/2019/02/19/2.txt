  oss-security - Multiple vulnerabilities in Jenkins plugins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 19 Feb From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Multiple vulnerabilities in Jenkins plugins  Jenkins is an open source automation server which enables developers around the world to reliably build, test, and deploy their software. The following releases contain fixes for security vulnerabilities:  * Acunetix Plugin * Arxan MAM Publisher Plugin 2.0 * Cloud Foundry Plugin * ElectricFlow Plugin * JMS Messaging Plugin * Mattermost Notification Plugin * OctopusDeploy Plugin * Script Security Plugin  Summaries of the vulnerabilities are below. More details, severity, and attribution can be found here:  We provide advance notification for security updates on this mailing list: https://groups.google.com/d/forum/jenkinsci-advisories  If you discover security vulnerabilities in Jenkins, please report them as described here: https://jenkins.io/security/#reporting-vulnerabilities  ---  The previously implemented Script Security Plugin sandbox protections prohibiting the use of unsafe AST transforming annotations such as @Grab  could be circumvented through use of various Groovy language features:  * Using Groovyâs AnnotationCollector * Import aliasing * Referencing annotation types using their full class name  This allowed users with Overall/Read permission, or the ability to control Jenkinsfile or sandboxed Pipeline shared library contents in SCM, to  bypass the sandbox protection and execute arbitrary code on the Jenkins  master.  Using AnnotationCollector is now newly prohibited in sandboxed scripts  such as Pipelines. Importing any of the annotations considered unsafe will now result in an error. During the compilation phase, both simple and  full class names of prohibited annotations are rejected for element  annotations.   Cloud Foundry Plugin did not perform permission checks on a method  implementing form validation. This allowed users with Overall/Read access  to Jenkins to connect to an attacker-specified URL using attacker- specified credentials IDs obtained through another method, capturing  credentials stored in Jenkins.  Additionally, this form validation method did not require POST requests,  resulting in a cross-site request forgery vulnerability.   A missing permission check in a form validation method in Mattermost  Notification Plugin allowed users with Overall/Read permission to  initiate a connection test, connecting to an attacker-specified  Mattermost server and room and posting a message.  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   A missing permission check in a form validation method in OctopusDeploy  Plugin allowed users with Overall/Read permission to initiate a  connection test, sending an HTTP HEAD request to an attacker-specified  URL, returning HTTP response code if successful, or exception error  message otherwise.  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   A missing permission check in a form validation method in JMS Messaging  Plugin allowed users with Overall/Read permission to initiate a  connection test, sending an HTTP request to an attacker-specified URL.  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   ElectricFlow Plugin unconditionally disabled SSL/TLS certificate  validation for the entire Jenkins master JVM.   Acunetix Plugin stored the API Key in its configuration unencrypted in  its global configuration file on the Jenkins master. This key could be  viewed by users with access to the master file system.   A missing permission check in a form validation method in Acunetix Plugin  allowed users with Overall/Read permission to initiate a connection test,  sending an HTTP GET request to an attacker-specified URL, adding a /me  suffix, returning whether the connection could be established and whether  the HTTP response code is  Additionally, this form validation method did not require POST requests,  resulting in a CSRF vulnerability.   Arxan MAM Publisher Plugin stored the username and password connection  credentials in its configuration unencrypted in jobs' config.xml files on  the Jenkins master. This key could be viewed by users with Extended Read  permission, or access to the master file system.  While masked from view using a password form field, the password was  transferred in plain text to users when accessing the job configuration  form.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      