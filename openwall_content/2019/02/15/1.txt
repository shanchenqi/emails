  oss-security - MatrixSSL stack buffer overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 14 Feb From: Tavis Ormandy <taviso@...gle.com> To: oss-security@...ts.openwall.com Subject: MatrixSSL stack buffer overflow  Hello, while auditing some code using the MatrixSSL library (currently sold as the Inside Secure TLS Toolkit, previously also called GUARD TLS Toolkit), I happened to notice that a public certificate testcase for caused a stack buffer overflow.  I did not create the testcase <https://github.com/FiloSottile/BERserk>, it was produced by Filippo Valsorda <https://twitter.com/FiloSottile> to accompany an advisory published by McAfee <https://www.mcafee.com/enterprise/en-us/threat-center/advanced-threat-research/crypto-software.html>. At the time, they had rebranded as Intel Security, but have since rebranded back to McAfee).  Intel listed MatrixSSL as affected by various ASN.1 parsing vulnerabilities, but didn't provide any testcases, so I guess the vulnerabilities were never fixed. As this testcase and advisory are already public, I see no need for any embargo here.  I cleaned up the testcase a bit, to make a better demonstration. You can test it with the certValidate tool that comes with MatrixSSL.  $ gdb -q --args matrixssl/matrixssl/test/certValidate stackbufferoverflow.pem Reading symbols from matrixssl/matrixssl/test/certValidate...done. (gdb) r Starting program: matrixssl/matrixssl/test/certValidate stackbufferoverflow.pem [Thread debugging using libthread_db enabled] Using host libthread_db library   Loaded chain file stackbufferoverflow.pem         [0]:berserk.filippo.io         [1]:(null) WARN subject not provided, SUBJ validation will be skipped  Program received signal SIGSEGV, Segmentation fault. in pubRsaDecryptSignedElementExt (gdb) bt #0  in pubRsaDecryptSignedElementExt #1  in ?? () #2  in ?? ()  (I had to bruteforce the encrypted data to get the output, but you can do so one byte at a time)  I believe any client or server that validates certificates will be affected by this, and as MatrixSSL is usually used in embedded devices where mitigations are usually not quite as thorough as modern distributions, exploitation might not be difficult.  The bug is that pubRsaDecryptSignedElementExt() uses a fixed size stack buffer, but then doesn't check if the key size exceeds it. The attached patch should solve it.   Tavis.  Content of type "text/html" skipped  View attachment "patch.diff" of type "text/x-patch" bytes)  Download attachment "stackbufferoverflow.pem" of type bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      