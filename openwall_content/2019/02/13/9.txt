  oss-security - Re: runc container breakout (all versions)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 13 Feb From: Loganaden Velvindron <loganaden@...il.com> To: oss-security@...ts.openwall.com Cc: Solar Designer <solar@...nwall.com>, Aleksa Sarai <cyphar@...har.com>, dev@...ncontainers.org,  	Christian Brauner <christian.brauner@...ntu.com> Subject: Re: runc container breakout (all versions)  I think that someone already posted a PoC on github, AFAIK.  On Wed, Feb 13, at PM Aleksa Sarai <asarai@...e.de> wrote:  > On Solar Designer <solar@...nwall.com> wrote: > >  static int proc_exe_link(struct dentry *dentry, struct path *exe_path) > >  { > >         struct task_struct *task; > > @@ @@ static int proc_exe_link(struct dentry *dentry, > > struct path *exe_path) > >         exe_file = get_task_exe_file(task); > >         put_task_struct(task); > >         if (exe_file) { > > -               *exe_path = exe_file->f_path; > > -               path_get(&exe_file->f_path); > > +               int result; > > + > > +               result = path_in_ve(&exe_file->f_path); > > +               if (result == 0) { > > +                       *exe_path = exe_file->f_path; > > +                       path_get(&exe_file->f_path); > > +               } > >                 fput(exe_file); > > -               return 0; > > +               return result; > >         } else > >                 return -ENOENT; > >  } > > --- > > > > This uses Virtuozzo/OpenVZ specific APIs, so won't be directly usable > > elsewhere, but maybe a similar approach could be used upstream? > > I have just sent v5 of my AT_THIS_ROOT patchset to LKML[1] -- which > allows userspace processes to block resolution of magic links. While > blocking access through /proc/self/exe helps block this issues, being > able to block (from userspace) resolution of all magic links would > massively help avoid problems like this. > > [1]: > > -- > Aleksa Sarai > Senior Software Engineer (Containers) > SUSE Linux GmbH > <https://www.cyphar.com/> >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      