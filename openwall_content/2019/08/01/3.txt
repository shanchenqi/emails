  oss-security - Django security releases issued: Multiple CVEs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 1 Aug From: Carlton Gibson <carlton.gibson@...il.com> To: oss-security@...ts.openwall.com Subject: Django security releases issued: Multiple CVEs  Permalink:  In accordance with `our security release policy <https://docs.djangoproject.com/en/dev/internals/security/>`_, the Django team is issuing `Django `Django and `Django These releases addresses the security issues detailed below. We encourage all users of Django to upgrade as soon as possible.  Thanks Guido Vranken and Sage M. Abdullah for reporting these issues.  Denial-of-service possibility in ``django.utils.text.Truncator`` ================================================================================  If ``django.utils.text.Truncator``'s ``chars()`` and ``words()`` methods were passed the ``html=True`` argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The ``chars()`` and ``words()`` methods are used to implement the ``truncatechars_html`` and ``truncatewords_html`` template filters, which were thus vulnerable.  The regular expressions used by ``Truncator`` have been simplified in order to avoid potential backtracking issues. As a consequence, trailing punctuation may now at times be included in the truncated output.  Denial-of-service possibility in ``strip_tags()`` =================================================================  Due to the behavior of the underlying ``HTMLParser``, ``django.utils.html.strip_tags()`` would be extremely slow to evaluate certain inputs containing large sequences of nested incomplete HTML entities. The ``strip_tags()`` method is used to implement the corresponding ``striptags`` template filter, which was thus also vulnerable.  ``strip_tags()`` now avoids recursive calls to ``HTMLParser`` when progress removing tags, but necessarily incomplete HTML entities, stops being made.  Remember that absolutely NO guarantee is provided about the results of ``strip_tags()`` being HTML safe. So NEVER mark safe the result of a ``strip_tags()`` call without escaping it first, for example with ``django.utils.html.escape()``.  SQL injection possibility in key and index lookups for ``JSONField``/``HStoreField`` ====================================================================================================  Key and index lookups for ``django.contrib.postgres.fields.JSONField`` and key lookups for ``django.contrib.postgres.fields.HStoreField`` were subject to SQL injection, using a suitably crafted dictionary, with dictionary expansion, as the ``**kwargs`` passed to ``QuerySet.filter()``.  Potential memory exhaustion in ``django.utils.encoding.uri_to_iri()`` =====================================================================================  If passed certain inputs, ``django.utils.encoding.uri_to_iri`` could lead to significant memory usage due to excessive recursion when re-percent-encoding invalid UTF-8 octet sequences.  ``uri_to_iri()`` now avoids recursion when re-percent-encoding invalid UTF-8 octet sequences.  Affected supported versions ===========================  * Django master development branch * Django 2.2 before version * Django 2.1 before version * Django before version  Resolution ==========  Patches to resolve the issue have been applied to Django's master branch and the 2.2, 2.1, and release branches. The patches may be obtained from the following changesets:  On the development master branch:  * `master Truncator * `master strip_tags() * `master JSONField/HStoreField * `master uri_to_iri()  On the Django 2.2 release branch:  * `2.2 Truncator * `2.2 strip_tags() * `2.2 JSONField/HStoreField * `2.2 uri_to_iri()  On the Django 2.1 release branch:  * `2.1 Truncator * `2.1 strip_tags() * `2.1 JSONField/HStoreField * `2.1 uri_to_iri()  On the Django release branch:  * Truncator * strip_tags() * JSONField/HStoreField * uri_to_iri()  The following releases have been issued:  * Django (`download Django | checksums * Django (`download Django | checksums * Django (`download Django | checksums  The PGP key ID used for this release is Carlton Gibson:  General notes regarding security reporting ==========================================  As always, we ask that potential security issues be reported via private email to ``security@...ngoproject.com``, and not via Django's Trac instance, Django's GitHub repositories, or the django-developers list. Please see `our security policies <https://www.djangoproject.com/security/>`_ for further information. Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      