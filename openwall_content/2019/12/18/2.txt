  oss-security - Possible Information Leak / Session Hijack  Vulnerability in Rack            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 18 Dec From: Aaron Patterson <aaron.patterson@...il.com> To: rubyonrails-security@...glegroups.com, oss-security@...ts.openwall.com, 	ruby-security-ann@...glegroups.com Subject: Possible Information Leak / Session Hijack  Vulnerability in Rack  There is a possible information leak / session hijacking vulnerability in Rack. This vulnerability has been assigned the CVE identifier  Versions Affected:  All. Not affected:       None. Fixed Versions:      There's a possible information leak / session hijack vulnerability in Rack. Attackers may be able to find and hijack sessions by using timing attacks targeting the session id. Session ids are usually stored and indexed in a database that uses some kind of scheme for speeding up lookups of that session id. By carefully measuring the amount of time it takes to look up a session, an attacker may be able to find a valid session id and hijack the session.  The session id itself may be generated randomly, but the way the session is indexed by the backing store does not use a secure comparison.   Impact ------  The session id stored in a cookie is the same id that is used when querying the backing session storage engine. Most storage mechanisms (for example a database) use some sort of indexing in order to speed up the lookup of that id. By carefully timing requests and session lookup failures, an attacker may be able to perform a timing attack to determine an existing session id and hijack that session.  Releases --------  The and releases are available at the normal locations.  Workarounds -----------  There are no known workarounds.  Patches -------  To aid users who aren't able to upgrade immediately we have provided patches for the two supported release series. They are in git-am format and consist of a single changeset.  1-6-session-timing-attack.patch - Patch for 1.6 series 2-0-session-timing-attack.patch - Patch for 2.6 series  Credits -------  Thanks Will Leinweber for reporting this!  --  Aaron Patterson http://tenderlovemaking.com/  View attachment "1-6-session-timing-attack.patch" of type "text/plain" bytes)  View attachment "2-0-session-timing-attack.patch" of type "text/plain" bytes)  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      