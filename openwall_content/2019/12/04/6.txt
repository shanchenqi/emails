  oss-security - Re: Authentication vulnerabilities in OpenBSD            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 4 Dec From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: Authentication vulnerabilities in OpenBSD  On Wed, Dec 04, at Qualys Security Advisory wrote: > 1. Authentication bypass  > This is the second piece of the puzzle: if an attacker specifies the > username "-schallenge" (or "-schallenge:passwd" to force a passwd-style > authentication), then the authentication is automatically successful and > therefore bypassed.  Wow, this is the new -froot.  > 2. Local privilege escalation via xlock > ============================================================================== >  > On OpenBSD, is installed by default and is > set-group-ID "auth", not set-user-ID; the following check is therefore > incomplete and should use issetugid() instead: >  > ------------------------------------------------------------------------------ > _X_HIDDEN void * > driOpenDriver(const char *driverName) > { > ... >    if (geteuid() == getuid()) { >       /* don't allow setuid apps to use LIBGL_DRIVERS_PATH */ >       libPaths = getenv("LIBGL_DRIVERS_PATH"); > ------------------------------------------------------------------------------ >  > A local attacker can exploit this vulnerability and dlopen() their own > driver to obtain the privileges of the group "auth":  I think this library issue isn't OpenBSD-specific.  A quick Google web search for LIBGL_DRIVERS_PATH finds that Mesa appears to have the same issue, and it also finds that we should also search for GBM_DRIVERS_PATH (apparently, for older Mesa) and maybe EGL_DRIVERS_PATH and EGL_DRIVER, and LIBVA_DRIVERS_PATH and LIBVA_DRIVER_NAME.  There are probably more.  Related discussion for X.Org, which ends with Alan Coopersmith saying:  "Yeah, I really would rather not have a setuid-root program dlopen and execute code from a user supplied path.  Can we have something in there to prevent disasters, such as issetugid() or secure_getenv()?"  [PATCH xserver] Search for DRI drivers at LIBGL_DRIVERS_PATH environment variable.  It sounds like the patch adding the dangerous getenv() didn't get in, but I didn't verify that.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      