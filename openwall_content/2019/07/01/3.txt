  oss-security - Django: Incorrect HTTP detection with reverse-proxy  connecting via HTTPS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 1 Jul From: Mariusz Felisiak <felisiak.mariusz@...il.com> To: oss-security@...ts.openwall.com Subject: Django: Incorrect HTTP detection with reverse-proxy  connecting via HTTPS   In accordance with `our security release policy  <https://docs.djangoproject.com/en/dev/internals/security/>`_, the  Django team is issuing `Django  `Django  and  `Django  These releases addresses the security issues detailed below. We  encourage all users of Django to upgrade as soon as possible.  Thanks Gavin Wahl for reporting this issue.  Incorrect HTTP detection with reverse-proxy connecting  via HTTPS ================================================================================  When deployed behind a reverse-proxy connecting to Django via HTTPS,  ``django.http.HttpRequest.scheme`` would incorrectly detect client  requests made via HTTP as using HTTPS. This entails incorrect results  for ``is_secure()``, and ``build_absolute_uri()``, and that HTTP  requests would not be redirected to HTTPS in accordance with  ``SECURE_SSL_REDIRECT``.  ``HttpRequest.scheme`` now respects ``SECURE_PROXY_SSL_HEADER``, if it  is configured, and the appropriate header is set on the request, for  both HTTP and HTTPS requests.  If you deploy Django behind a reverse-proxy that forwards HTTP requests,  and that connects to Django via HTTPS, be sure to verify that your  application correctly handles code paths relying on ``scheme``, ``is_secure()``,  ``build_absolute_uri()``, and ``SECURE_SSL_REDIRECT``.  Affected supported versions ===========================  * Django master development branch * Django 2.2 before version * Django 2.1 before version * Django before version  Resolution ==========  Patches to resolve the issue have been applied to Django's master branch  and the 2.2, 2.1, and release branches. The patches may be obtained  from the following changesets:  * On the `master branch  * On the `2.2 release branch  * On the `2.1 release branch  * On the release branch   The following releases have been issued:  * Django (`download Django   | checksums  * Django (`download Django  |  checksums  * Django (`download Django  |  checksums   The PGP key ID used for this release is Mariusz Felisiak:  General notes regarding security reporting ==========================================  As always, we ask that potential security issues be reported via private email to ``security@...ngoproject.com``, and not via Django's Trac instance, Django's GitHub repositories, or the django-developers list. Please see `our security policies  <https://www.djangoproject.com/security/>`_ for further information.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      