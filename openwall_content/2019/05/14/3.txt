  oss-security - Xen Security Advisory v1  - Microarchitectural Data Sampling speculative side channel            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 14 May From: Xen.org security team <security@....org> To: xen-announce@...ts.xen.org, xen-devel@...ts.xen.org,  xen-users@...ts.xen.org, oss-security@...ts.openwall.com CC: Xen.org security team <security-team-members@....org> Subject: Xen Security Advisory v1  - Microarchitectural Data Sampling speculative side channel  -----BEGIN PGP SIGNED MESSAGE----- Hash:   Xen Security Advisory /         Microarchitectural Data Sampling speculative side channel  ISSUE DESCRIPTION =================  Microarchitectural Data Sampling refers to a group of speculative sidechannels vulnerabilities.  They consist of:   * - MSBDS - Microarchitectural Store Buffer Data Sampling  * - MLPDS - Microarchitectural Load Port Data Sampling  * - MFBDS - Microarchitectural Fill Buffer Data Sampling  * - MDSUM - Microarchitectural Data Sampling Uncacheable Memory  These issues pertain to the Load Ports, Store Buffers and Fill Buffers in the pipeline.  The Load Ports are used to service all memory reads. The Store Buffers service all in-flight speculative writes (including IO Port writes), while the Fill Buffers service all memory writes which are post-retirement, and no longer speculative.  Under certain circumstances, a later load which takes a fault or assist (an internal condition to processor e.g. setting a pagetable Access or Dirty bit) may be forwarded stale data from these buffers during speculative execution, which may then be leaked via a sidechannel.  MDSUM (Uncacheable Memory) is a special case of the other three. Previously, the use of uncacheable memory was believed to be safe against speculative sidechannels.  For more details, see:    IMPACT ======  An attacker, which could include a malicious untrusted user process on a trusted guest, or an untrusted guest, can sample the content of recently-used memory operands and IO Port writes.  This can include data from:   * A previously executing context (process, or guest, or    hypervisor/toolstack) at the same privilege level.  * A higher privilege context (kernel, hypervisor, SMM) which    interrupted the attacker's execution.  Vulnerable data is that on the same physical core as the attacker.  This includes, when hyper-threading is enabled, adjacent threads.  An attacker cannot use this vulnerability to target specific data.  An attack would likely require sampling over a period of time and the application of statistical methods to reconstruct interesting data.  VULNERABLE SYSTEMS ==================  Systems running all versions of Xen are affected.  Only x86 processors are vulnerable. ARM processors are not believed to be vulnerable.  Only Intel based processors are potentially affected.  Processors from other manufacturers (eg, AMD) are not believed to be vulnerable.  Please consult the Intel Security Advisory for details on the affected processors, and which are getting microcode updates.  MITIGATION ==========  This issue can be mitigated with a combination of software, firmware and configuration changes.  Note that some affected processors are not expected to receive microcode updates.  For these processors, there is no mitigation available.  Users with workloads of concern on these processors should see about moving the workload elsewhere.  RESOLUTION ==========  New microcode, and possibly a new firmware image is required to prevent SMM data from being leaked with this vulnerability.  Consult your hardware vendor.  The microcode update alone may be packaged for boot-time loading.  Consult your dom0 OS vendor.  Software updates to Xen (details below) are required to prevent data leakage from Xen into lower privileged contexts.  Leakage of data from Xen or other guests can only prevented entirely by disabling hyper-threading (if available and active in the BIOS), and by applying the patches to Xen.  The Xen patches use the MD_CLEAR feature (available in the new microcode) on every exit to guest.  On affected hardware, MD_CLEAR is used by default (controlled by `spec-ctrl=[no-]md-clear`), subject to microcode availability.  Note: For compatibility with development versions of this fix, `spec-ctrl=[no-]mds` is also accepted on Xen and earlier as an alias.  Consult vendor documentation in preference to here.  The availability of the MD_CLEAR functionality in microcode is reported by Xen on boot.  e.g:    [root@...alhost ~]# xl dmesg | grep MD_CLEAR   (XEN)   Hardware features: IBRS/IBPB STIBP L1D_FLUSH SSBD MD_CLEAR   (XEN)   Support for HVM VMs: MSR_SPEC_CTRL RSB EAGER_FPU MD_CLEAR   (XEN)   Support for PV VMs: MSR_SPEC_CTRL RSB EAGER_FPU MD_CLEAR  SMT/Hyper-Threading is not disabled by default because doing so is expected to be too disruptive to existing configurations.  See the discussion concerning SMT/Hyper-Threading below.  Guest software updates will be required to prevent data leakage within the guest, by making use of the new MD_CLEAR functionality at suitable points.  Consult the vendors of all software used in the guest.       xen-unstable          Xen          Xen          Xen           Xen 4.9.x           Xen 4.8.x           Xen 4.7.x  $                                                   $  DISCUSSION CONCERNING SMT/HYPER-THREADING =========================================  An attacker can perform an MDS-based attack from userspace, with unprivileged instructions.  As the leakage occurs from stale data latched in buffers in the pipeline, the only defence is to flush the buffers before moving to a less privileged context.  On affected processors when hyper-threading is enabled, the in-flight memory content from other threads can be observed, from whatever context is executing.  This could be a different piece of userspace, or the guest kernel, or Xen.  It could also be from a vcpu belonging to a different guest.  Work is ongoing on xen-devel to develop core-aware scheduling, which will mitigate the cross-domain leak by ensuring that vcpus from different domains are never concurrently scheduled on sibling threads. However, this alone will not prevent cross-privilege level leakage from within the same domain, including leakage from Xen.  If you have any untrusted code running in VMs, and need to prevent the risk of data leakage, the only available option at the moment is to disable hyper-threading.  This is preferably done in the BIOS, but can also be done by Xen at boot time by specifying `smt=no` on the command line.  NOTE REGARDING LACK OF EMBARGO ==============================  Despite an attempt to organise predisclosure, the discoverers ultimately did not authorise a predisclosure. -----BEGIN PGP SIGNATURE-----  =XbSi -----END PGP SIGNATURE-----  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      