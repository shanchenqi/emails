  oss-security - [ANNOUNCE] Security regression in Kubernetes kubelet and  only -            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 30 May From: Brandon Philips <bphilips@...hat.com> To: "Kubernetes developer/contributor discussion" <kubernetes-dev@...glegroups.com>,  	kubernetes-security-announce@...glegroups.com,  	kubernetes-security-discuss <kubernetes-security-discuss@...glegroups.com>,  	oss-security@...ts.openwall.com,  	kubernetes-distributors-announce@...glegroups.com Subject: [ANNOUNCE] Security regression in Kubernetes kubelet and  only -  Hello Kubernetes Community-  A security-related issue was discovered in kubelet versions and The issue is medium severity and can be mitigated with a pod spec configuration change OR by *****downgrading*** kubelets to or  ***Vulnerability Details***  When a container runs for the first time on a node, it correctly respects the UID set by the container image (e.g. USER in a Dockerfile). However, on the second run, the container will run as UID 0 (aka root) which can be an undesired escalated privilege.  Pods that specify an explicit runAsUser are unaffected and continue to work properly.  PodSecurityPolicies that force a runAsUser setting are also unaffected and continue to work properly.  Pods that specify mustRunAsNonRoot:true will refuse to start the container as uid 0, which can affect availability.  This issue is filed as See for more details.  ***Am I vulnerable?***  Run this to print out all nodes and their kubelet version:   kubectl get nodes -o=jsonpath='{range .items[*]}{.status.nodeInfo.machineID}{"\t"}{.status.nodeInfo.kubeletVersion}{"\n"}{end}'  If the output lists Kubelet versions listed below you are running a vulnerable version:     -        -       ***How do I mitigate the vulnerability?***  There are two potential mitigations to this issue:      -     Downgrade to kubelet or as instructed by your Kubernetes    distribution.    -     Set RunAsUser on all pods in the cluster that should not run as root.    This is a Security Context feature; the docs are at    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod   ***How do I upgrade?***  An upgrade addressing this issue is not yet available. But, will appear in and ASAP and will be announced here.  ***Thank you***  Thank you to the many reporters and Tim Pepper as release manager for the coordination in making this announcement.  Thank You,  Brandon on behalf of the Kubernetes Product Security Committee   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      