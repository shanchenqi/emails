  oss-security - Re: Multiple vulnerabilities in Jenkins plugins            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 28 Mar From: Daniel Beck <ml@...kweb.net> To: oss-security@...ts.openwall.com Subject: Re: Multiple vulnerabilities in Jenkins plugins    > On 25. Mar at Daniel Beck <ml@...kweb.net> wrote: >  > > Sandbox projection in the Script Security and Pipeline: Groovy Plugins  > could be circumvented through methods supporting type casts and type  > coercion. This allowed attackers to invoke constructors for arbitrary types.  (Script Security) and (Pipeline: Groovy)  > > Lockable Resources Plugin did not properly escape resource names in  > generated JavaScript code, thus leading to a cross-site scripting (XSS)  > vulnerability.   > > [Slack Notification Plugin] did not perform permission checks on a method  > implementing form validation. This allowed users with Overall/Read access  > to Jenkins to connect to an attacker-specified URL using attacker-specified  > credentials IDs obtained through another method, capturing credentials  > stored in Jenkins.   > Additionally, this form validation method did not require POST requests,  > resulting in a cross-site request forgery vulnerability.   > > ECS Publisher Plugin stored the API token unencrypted in jobs' config.xml  > files and its global configuration file on the Jenkins master. This token  > could be viewed by users with Extended Read permission, or access to the  > master file system.   > > A missing permission check in multiple form validation methods in Fortify  > on Demand Uploader Plugin allowed users with Overall/Read permission to  > initiate a connection test to an attacker-specified server.   > Additionally, the form validation methods did not require POST requests,  > resulting in a CSRF vulnerability.   > > PRQA Plugin stored a password unencrypted in its global configuration file  > on the Jenkins master. This password could be viewed by users with access  > to the master file system.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      