  oss-security - Re: Asserts considered harmful (or GMP spills its  sensitive information)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 31 Dec From: Matthew Fernandez <matthew.fernandez@...il.com> To: oss-security@...ts.openwall.com Cc: Jeffrey Walton <noloader@...il.com>,  gmp-bugs@...lib.org Subject: Re: Asserts considered harmful (or GMP spills its  sensitive information)   > On Dec 31, at Jeffrey Walton <noloader@...il.com> wrote: >  > On Mon, Dec 31, at PM Vincent Lefevre <vincent@...c17.net <mailto:vincent@...c17.net>> wrote: >>  >> On Jeffrey Walton wrote: >  >>> This is the first point of unwanted data egress. Sensitive information >>> like user passwords and keys can be written to the filesystem >>> unprotected. >>  >> This can occur with any program, even not using asserts, e.g. due to >> a segmentation fault (which may happen as a consequence of not using >> asserts, with possibly worse consequences). >>  >> If you don't want a core file, then you can instruct the kernel not >> to write a core file. See getrlimit. >  > To play devil's advocate again, that strategy requires every user to > have the knowledge. If RTFM was going to worked, It should have > happened in the last 50 years or so. >  > Refusing to process the data and failing the API call requires no > knowledge on the user's part.  I donât have a dog in this fight, but you referenced high integrity software (though I guess what is meant is confidentiality rather than integrity in this case) and then say we cannot rely on people to RTFM. While I donât doubt there are users who will fail to understand the consequences of having core dumps enabled, this is just one of many ways to leak information in a non-hardened system. E.g. you can attach to the victim process with gdb/ptrace and simply read its memory, if the sysadmin has not blocked this with Yama or similar. Could you elaborate on the threat model you have in mind?  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      