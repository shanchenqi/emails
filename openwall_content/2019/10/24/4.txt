  oss-security - PHP: env_path_info underflow in fpm_main.c can lead to RCE            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 24 Oct From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: PHP: env_path_info underflow in fpm_main.c can lead to RCE  Hi,  Although I had nothing to do with discovery nor handling of this issue, I was asked off-list to bring it to the attention of distros.  Since the issue is already public, I am simply posting in here.  (I'd appreciate it if people post stuff on their own instead of asking me, though.)  This bug was reported against PHP a month ago:   | Sec Bug 	env_path_info underflow in fpm_main.c can lead to RCE |  | UTC] neex dot emil+phpeb at gmail dot com |  | Description: | ------------ | The line in file sapi/fpm/fpm/fpm_main.c | | contains pointer arithmetics that assumes that env_path_info has a | prefix equal to the path to the php script. However, the code does not | check this assumption is satisfied. The absence of the check can lead to | an invalid pointer in the "path_info" variable. |  | Such conditions can be achieved in a pretty standard Nginx | configuration. If one has Nginx config like this: |  | ``` |    location ~ [^/]\.php(/|$) { |         fastcgi_split_path_info ^(.+?\.php)(/.*)$; |         fastcgi_param PATH_INFO       $fastcgi_path_info; |         fastcgi_pass   |         ... |   } | } | ``` |  | The regexp in `fastcgi_split_path_info` directive can be broken using | the newline character (in encoded form, %0a). Broken regexp leads to | empty PATH_INFO, which triggers the bug. |  | This issue leads to code execution. Later in the code, the value of | path_info[0] is set to zero | | then FCGI_PUTENV is called. Using a carefully chosen length of the URL | path and query string, an attacker can make path_info point precisely to | the first byte of _fcgi_data_seg structure. Putting zero into it moves | `char* pos` field backwards, and following FCGI_PUTENV overwrites some | data (including other fast cgi variables) with the script path. Using | this technique, I was able to create a fake PHP_VALUE fcgi variable and | then use a chain of carefully chosen config values to get code | execution. |  | I have a working exploit PoC, but I'm not sure how to share it using | this form. This security research is done by three people: me, @beched | and @d90pwn.  This is followed with steps to reproduce the bug on a PHP build "with --enable-fpm and ASAN enabled."  There are many further comments, including suggestion to fix the issue in "the next security relevant releases" on October 24, which is today.  PHP and released today are documented to include the fix.  There are also exploits here:  https://github.com/neex/phuip-fpizdam  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      