  oss-security - Re: OpenSSL DSA follows a non-constant  time codepath for certain operations            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 9 Jun From: Billy Brumley <bbrumley@...il.com> To: Roman Drahtmueller <draht@...altsekun.de> Cc: oss-security@...ts.openwall.com Subject: Re: OpenSSL DSA follows a non-constant  time codepath for certain operations  > The paper very resourceful, and thank you for sharing your thoughts > even beyond it!  My pleasure :)  > Control over CPU utilization (and thereby cache eviction) can be achieved > by a remote attacker: Web applications are influenced remotely by > definition, and they are far from slim or localized these days. > Keepalives allow to keep the system in a sling with predictable resource > utilization including cache fills, as there is not only just data stuffed > through some buffers. > > The question remains if the deterioration of the SNR (*) leaves enough > resolution to be useful. This would no longer constitute a cache-based > attack with the terrifyingly clear signal, but the sharp edges in the > latency that you have demonstrated may contribute to filtering the effect > from the noise. > While the cause - non-constant-time implementation - remains.  What you are saying is all valid on paper. But when you move to the uarch level, the techniques we are using are very specific --- rdtsc and clflush instructions, paired with targeted malicious performance degradation techniques. When you take away these tools, it really complicates things for an attacker.  > Are the orders of magnitude in range?  This is more of an interesting research question that would take maybe six months to definitively answer.  BBB  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      