  oss-security - Fwd: out-of-bounds read in could lead to memory leak/ Integer overflow read to RCE            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 23 Jun From: Ibrahim el-sayed <i.elsayed92@...il.com> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: Fwd: out-of-bounds read in could lead to memory leak/ Integer overflow read to RCE  Hi Mitre CVE assignment team, I have submitted the following two bugs to ImageMagick. Both got acknowledged and fixed in the following patch I would be so glad if you can issue me CVEs for them  Regards Ibrahim    > Begin forwarded message: >  > From: Ibrahim el-sayed <i.elsayed92@...il.com> > Subject: Integer overflow that lead to RCE > Date: June 21, at PM GMT+1 > To: security@...gemagick.org >  > Hi ImageMagick security team, > I was fuzzing imagemagick with AFL and I think I found an integer overflow that might lead to remote code execution. >  > The vulnerability exists in the following line > >  > components=(ssize_t) ReadProfileLong(endian,q+4);   << I think component should be size_t > number_bytes=(size_t) components*format_bytes[format]; > I think components variable is upgraded to integer in this line. > component is stored in edx in the assembly and before the multplication the following instructions are executed >  > movsxd  rax, edx ;edx contains components variable and it is using movsx (move signed extended which I think the main cause of the vulnerability). if The value of components anything above the sign extension will be 1 and rax will be The main problem of this I think because ssize_t which covers the -1 value > movsxd  rcx, ds:SyncExifProfile_format_bytes[rcx*4] > imul    rcx, rax > cmp     rcx, rax ;This is unsigned comparison because of jump below (jl) > jl      exit >  > After the multiplication rcx contains number_bytes as (integer 64bit) and not size_t >  > > In the if condition, the PoC takes the else part. >  > @ line >  > if ((size_t) (offset+number_bytes) > length) > An integer oveflow occurs in this comparison because number_bytes is a very large number like and when we add offset to it which we control we can overflow and the result is < length so we pass this if condition. >  > p=(unsigned char *) (exif+offset); > At the offset value is the value we are controlling and can range between as illustrated in the PoC >  > pointer p is used later in to write data to it. > The PoC goes into the switch statement and then choose case And then it write 4 bytes on line > (void) WriteProfileLong(endian,(size_t) (image->resolution.y+0.5),p); > Needless to day we can control image->resolution.y > Also if we took another path in the switch statement we can also control > image->orientation or image->units which are the values written to the pointer we can control. >  >  > You can find attached two Proof of Concept files. > PoC1: > This PoC will set number_bytes =  ==>> will be sign extended to and offset = 0x7B. > This PoC will basically write 4 null bytes into position exif+0x7B (offset) >  > PoC2: > This PoC will set number_bytes = which will be sign extended to and offset = > This will write 4 null bytes in position (offset). >  > PoC2 will cause a seg-fault because usually this memory address might not be mapped or doesn't have the correct permission to write to >  >  > Regards > Ibrahim M. El-Sayed > Security Engineer > Website: https://www.ibrahim-elsayed.com <https://www.ibrahim-elsayed.com/> > @ibrahim_mosaad >       > Begin forwarded message: >  > From: Ibrahim el-sayed <i.elsayed92@...il.com> > Subject: out-of-bounds read in could lead to memory leak > Date: June 21, at PM GMT+1 > To: security@...gemagick.org >  > Hi ImageMagick Security Team, >  > I think I have found a security bug. The bug was found while fuzzing ImageMagick with afl-fuzz >  > command: magick identify PoC.jpg > The vulnerability could lead to information leakage because the pointer is used later to read data from the memory >  >  > format=(size_t) ReadPropertyUnsignedShort(endian,q+2); > components=(ssize_t) ReadPropertySignedLong(endian,q+4); >  > The code basically reads the number of entries inside directory object in an image > number_entries=(size_t) ReadPropertyUnsignedShort(endian,directory); >  > By manipulating bytes at position and in the PoC image, we can control number_entries variable which is used to in the loop. By controlling number_entries we can partially control q > q=(unsigned char *) >  > In the previous line we control the value of "entry". As a result, we can partially control q which can be used later to read arbitrary data from the process of ImageMagick. >  > PoC image: https://www.ibrahim-elsayed.com/uploads/PoC_imagemagick_1.jpg <https://www.ibrahim-elsayed.com/uploads/PoC_imagemagick_1.jpg> > [backtrace] > storm@...rm ~/f/f/f/crashes> gdb -q magick > Reading symbols from magick...done. > [New LWP > [Thread debugging using libthread_db enabled] > Using host libthread_db library > Core was generated by `magick identify PoC.jpg'. > Program terminated with signal SIGABRT, Aborted. > #0 in __GI_raise (sig=sig@...ry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 > 56	../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory. > (gdb) bt > #0 in __GI_raise (sig=sig@...ry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 > #1 in __GI_abort () at abort.c:89 > #2 in MagickSignalHandler (signal_number=6) at > #3 <signal handler called> > #4 in __GI_raise (sig=sig@...ry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 > #5 in __GI_abort () at abort.c:89 > #6 in MagickSignalHandler (signal_number=11) at > #7 <signal handler called> > #8 ReadPropertySignedLong <error: Cannot access memory at address >     endian=LSBEndian) at > #9 GetEXIFProperty "exif:*", >     at > #10 in GetImageProperty >     "exif:*", >     at > #11 in SetImageProfileInternal >     "exif", >     recursive=recursive@...ry=MagickFalse, at > #12 in SetImageProfile "exif", >     at > #13 in ReadProfile (jpeg_info=<optimised out>) at > #14 in ?? () from > #15 in ?? () from > #16 in jpeg_consume_input () from > #17 in jpeg_read_header () from > #18 in ReadJPEGImage at > #19 in ReadImage >     at > #20 in ReadStream >     <PingStream>, at > #21 in PingImage > ---Type <return> to continue, or q <return> to quit--- >     at > #22 in PingImages >     "PoC.jpg", >     at > #23 in IdentifyImageCommand >     argc=argc@...ry=2, >     at > #24 in MagickCommandGenesis >     <IdentifyImageCommand>, argc=2, >     at > #25 in MagickMain (argc=2, at > #26 in __libc_start_main <main>, argc=3, >     init=<optimised out>, fini=<optimised out>, rtld_fini=<optimised out>, >     at > #27 in _start () >    Content of type "text/html" skipped  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      