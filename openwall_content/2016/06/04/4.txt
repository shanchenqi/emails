  oss-security - Re: expat hash collision fix too predictable?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 4 Jun From: Sebastian Pipping <sebastian@...ping.org> To: cve-assign@...re.org Cc: oss-security@...ts.openwall.com Subject: Re: expat hash collision fix too predictable?  Hi!   On cve-assign@...re.org wrote: > The text below assigns one CVE ID to this expat vulnerability.  Thank you.  Please see my questions below.   >>> >>> >>> Expat is calling srand ... [if] the code using Expat ... never called >>> XML_SetHashSalt on that parser ... the arrival of XML_SetHashSalt >>> bypassed the Expat user's radar >  >>>> >>>> >>>> In any case, you can supply your own hash salt - after creating the >>>> parser, but before parsing is started. See the new API function XML_SetHashSalt. >  > The higher-level issue, from our perspective, is that a library > (intended for use in arbitrary applications) should not have > potentially unavoidable calls to the srand function unless this is > documented. The library might be used by an application in which srand > was already called exactly once, and srand/rand happens to be the > right choice for that application because of a minimal need for > randomness, and this minimal need for randomness is no longer > satisfied if there are unexpected extra calls to srand. >  > In other words, good options for a library include: >  >   - never call srand under any circumstances >  >   - call srand only if the application calls a library function that >     is documented as triggering an srand call >  >   - call srand whenever it wants, as long as the documentation warns >     application authors about potential incompatibility with any use >     of srand within an application >  > We really don't know whether the above is a generally accepted > principle for all libraries.  Agreed.   > However, it appears that the expat vendor > is recognizing the old behavior (i.e., the behavior before > XML_SetHashSalt was available and documented) as a security-relevant > implementation error. Use >  > An entirely separate question is whether generate_hash_secret_salt > should ultimately be using the rand function to attempt to provide a > random number, or whether it should provide a better quality random > number. There is no CVE ID for this yet. If the expat upstream > maintainer is announcing a new expat release, specifically stating > that discontinuing use of the rand function represents a vulnerability > fix, then a CVE ID can be assigned.  I am not sure if I get that right.   The hash DoS vulnerability was fixed to some extend in Expat commit -- the place where Expat started calling srand.  While XML_SetHashSalt was introducd a bit later, it did arrive with Expat still.  srand was called (by generate_hash_secret_salt) since Expat if   a) the app using Expat did not call XML_SetHashSalt     prior to starting to parse with that XML_Parser instance     (XML_SetHashSalt existing or not) or   b) the app using Expat called XML_SetHashSalt with     hash_salt of value 0 (which is documented since Expat     commit  The next release of Expat will not do internal calls to srand (or rand) any more but extract and use entropy from other sources.   Please confirm that using for consequences of "unanticipated internal calls to srand" is what you intended.  Also I suppose hash initialization with (too little /) second-based entropy still is part of the original (or the same again).  If not, it may not fit semantically.  Thank you!  Best    Sebastian  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      