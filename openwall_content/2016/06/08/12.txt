  oss-security - Re: OpenSSL DSA follows a non-constant  time codepath for certain operations            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 8 Jun From: Billy Brumley <bbrumley@...il.com> To: oss-security@...ts.openwall.com Subject: Re: OpenSSL DSA follows a non-constant  time codepath for certain operations  >> Are we sure that a "low" rating is justified? >> DSA is basically dead, until the constant time switch is flicked. The >> only countermeasure so far is turning it off. > > Maybe I should be a little more verbose on this: > 1) attacker recovers the DSA host key. > 2) attacker mitm-attacks client connections to the server and recovers the user's private key by exploiting the vulnerable openssl on the client side > 3) ... > > The same principles apply when the computational burden is reversed for client auth, aren't they?  Are you talking about the SSH target?  If so, the realistic scenario is a user with legitimate credentials logging into a server to steal the DSA host key locally with cache timings.  I don't think client-side enters into the equation for this vuln. You need an active attacker initiating handshakes. That's my 2c -- we didn't consider client-side victim much in this work.  If it's the TLS target, you need local access or manage to co-locate in cloud scenarios. Not as realistic as the SSH case IMO.  BBB  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      