  oss-security - PixarLogDecode() out-of-bound writes            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 15 Jun From: 张开翔 <zhangkaixiang@....cn> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: PixarLogDecode() out-of-bound writes   Details =======  Product: libtiff Affected Versions: <= Vulnerability Type: out-of-bound writes Vendor URL: http://www.remotesensing.org/libtiff/ CVE ID: Credit: Kaixiang Zhang of the Cloud Security Team, Qihoo  Introduction =======  It was always corrupted when I use rgb2ycbcr command followed by a crafted TIFF image. The vulnerability of out-of-bound writes comes from PixarLogDecode() function without checking the buffer length, which cause the head of next heap could be filled with any data, crash occurs when malloc() or free() is called.Attackers could exploit this issue to result in DoS.   Here is the stack info: gdb –args ./rgb2ycbcr gtTileContig.tif tmpout.tif --- --- (gdb) b Breakpoint 1 at file tif_pixarlog.c, line (gdb) r --- --- Breakpoint 1, PixarLogDecode "", occ=<optimized out>, s=0) at                     int state = inflate(&sp->stream, Z_PARTIAL_FLUSH); (gdb) x/32xw  sp->stream->next_out                                     0xafaeadac                   0xbfbebdbc                   0xcfcecdcc                                     0xefeeedec  (gdb) finish (gdb) x/32xw  sp->stream->next_out                                                                                                                    (gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. in _int_free <main_arena>, p=<optimized out>, have_lock=0) at                   unlink(av, nextchunk, bck, fwd); (gdb) bt #0  in _int_free <main_arena>, p=<optimized out>, have_lock=0) at #1  in __GI___libc_free at #2  in _TIFFfree at #3  in gtTileContig w=34, h=4) at #4  in TIFFRGBAImageGet w=34, h=4) at #5  in TIFFReadRGBAImageOriented rwidth=34, rheight=4, orientation=4, stop=0) at #6  in TIFFReadRGBAImage rwidth=34, rheight=4, stop=0) at #7  in tiffcvt at #8  in main (argc=3, at  (gdb) x/8xw               0xffffffff               0xffffffff        (gdb) x/8xw                                     (gdb) x/8xw                                        References: [1] http://www.remotesensing.org/libtiff/  Thank you! Best Regards,  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      