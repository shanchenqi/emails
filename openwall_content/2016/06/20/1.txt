  oss-security - bzip2 use-after-free on bzip2recover            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 20 Jun From: Cedric Buissart <cbuissar@...hat.com> To: oss-security@...ts.openwall.com Subject: bzip2 use-after-free on bzip2recover  Hi all,  This is to report bzip2 use-after-free on bzip2recover  A heap use after free vulnerability was reported in bzip2recover. A maliciously crafted file could cause the application to crash.  Originally reported by Aladdin Mubaied  For additional information & proposed patch:  == ASAN output & backtrace == bzip2recover extracts blocks from damaged .bz2 files. /opt/bzip-asan/bin/bzip2recover: searching for block boundaries ...    block 1 runs from to    block 2 runs from to    block 3 runs from to    block 4 runs from to (incomplete) bzip2recover: splitting into blocks    writing block 2 to `crasherfile1' ... Program received signal SIGSEGV, Segmentation fault. ================================================================= ERROR: AddressSanitizer: heap-use-after-free on address at pc bp sp READ of size 4 at thread T0     #0     #1     #2     #3 is located 12 bytes inside of 24-byte region freed by thread T0 here:     #0     #1 previously allocated by thread T0 here:     #0     #1 Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd[fd]fd fa fa fa 00 00 00 fa fa fa fd fd fd fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa   Heap righ redzone:     fb   Freed Heap region:     fd   Stack left redzone:    f1   Stack mid redzone:     f2   Stack right redzone:   f3   Stack partial redzone: f4   Stack after return:    f5   Stack use after scope: f8   Global redzone:        f9   Global init order:     f6   Poisoned by user:      f7   ASan internal:         fe  bt #0  in putc () from #1  in bsPutBit (bit=0x0, bs=<optimized out>) at #2  bsPutUChar (c=<optimized out>, bs=<optimized out>) at #3  main (argc=<optimized out>, argv=<optimized out>) at #4  in __libc_start_main () from #5  in _start ()  Regards,  --  Cedric Buissart, Product Security   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      