  oss-security - Re: Prime example of a can of worms            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 21 Jan From: gremlin@...mlin.ru To: oss-security@...ts.openwall.com Subject: Re: Prime example of a can of worms  On Kurt Seifried wrote:   > I finally got the article written and published, it's at:  >  In that article you wrote:   > I think the best plan for dealing with this in the short term  > is deploying larger primes bits minimum, ideally  > bits) right now wherever possible.  bit keys seem to be the absolute minimum, and personally I've already moved to bit keys.  Here are some numbers:  `openssl dhparam -2 took to generate (HH:MM:SS); `openssl dhparam -5 took `openssl dhparam -2 took `openssl dhparam -5 took   > Why not huge primes?  > Why not simply use really large primes? Because computation  > is expensive, battery life matters more than ever and latency  > will become problems that users will not tolerate.  Any and all cryptographic transforms must be expensive - that means at least time and electric power. As every single bit requires at least two transistors (physical areas on the chip) just to store it and much more to process, and each of those transistors consume at least hundreds of pA, the cryptoprocessors (which are already used for brute-force attacks) would be much more power-consuming.  Said that, the attackers would need building yet another power station to get more gigawatts for their key-breaking datacenters and, as all this power would finally become heat, such facility should be built at least at Taimyr or Melville peninsula - both are continental (for laying cables) and cold just enough :-)  Also, there are elliptic curves-based algorithms, but they have one strong disadvantage: although the computations are more complex, that must not be the reason to reduce the key size.   > Additionally the computation time and effort needed to find huge  > primes (say 16k) is difficult at best for many users and not  > possible for many (anyone using a system on a chip for example).  That would require a really good hardware RNG. For now, I have an experimental USB device (based on ATtiny85 and for such purposes, but most SoC systems lack them (despite of adding them would be simple and inexpensive: dual op-amp and one GPIO pin).   --  Alexey V. Vissarionov aka Gremlin from Kremlin GPG:  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      