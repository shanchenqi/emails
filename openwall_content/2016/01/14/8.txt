  oss-security - [CVE Request] Multiple PHP issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 15 Jan From: Emmanuel Law <emmanuel.law@...il.com> To: cve-assign@...re.org, oss-security@...ts.openwall.com Cc: security@....net Subject: [CVE Request] Multiple PHP issues  1) Can we assign a CVE to PHP "Memory Read via gdImageRotateInterpolated Array Index Out of Bounds":  Bug report: It is possible to read (almost) arbitrary memory.   2) Also CVE  request for PHP "Heap BufferOver Flow in escapeshell functions":  Bug report: Patch:  =====Copy and Paste of Original Bug Report ======  - There exist a heap-based buffer over flow that allows one to write a user tainted data pass an allocated buffer. This vulnerability lies in the following functions:  escapeshellarg escapeshellcmd  - On a default php installation, the memory limit is set to and this vulnerability is not triggerable. My analysis shows that this is triggerable when memory limit is roughly > A quick search on github shows that it's not uncommon to see code like "ini_set('memory_limit', -1);"   -I've created a POC that triggers the buffer over write with  - A string of is created and passed into escapeshellarg. "l" contains the length of this string:  Breakpoint 2, php_escape_shell_arg 'A' <repeats times>...) at             int x, y = 0, l = (int)strlen(str);  gdb-peda$ print l $43 =            //    -This length "l" is then passed into zend_string_alloc as "4 * l + 2" which results in an integer overflow:  Temporary breakpoint 3, php_escape_shell_arg 'A' <repeats times>...) at             cmd = zend_string_alloc(4 * l + 2, 0); /* worst case */   gdb-peda$ print 4* l + 2 $44 = 0x2   //Overflow  - Stepping into zend_string_alloc to verify the integer overflow. Notice len=0x2: zend_string_alloc (persistent=0x0, len=0x2) at             zend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);  - Lets confirm the overflow again in the allocated (zend_string *) cmd. Notice cmd.len=0x2: gdb-peda$ p *cmd $52 = {   gc = {     refcount = 0x1,     u = {       v = {         type = 0x6,         flags = 0x0,         gc_info = 0x0       },       type_info = 0x6     }   },   h = 0x0,   len = 0x2,   val = "1" }    - The loops then writes pass the allocated buffer in  for (x = 0, y = 0; x < l; x++) { ....       ZSTR_VAL(cmd)[y++] = str[x];    - Verifying the buffer overflow in gdb-peda$ p (zend_string *)cmd.len $9 = (zend_string *) 0x2 gdb-peda$ (zend_string *)cmd.val                                                                                                                                                                                                                                                                                                                                         - The vulnerability for php_escape_shell_cmd is identical.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      