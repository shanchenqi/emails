  oss-security - Out-of-bounds Read in the OpenJpeg's opj_j2k_update_image_data and  opj_tgt_reset function            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 18 Jan From: limingxing <limingxing@....cn> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: Out-of-bounds Read in the OpenJpeg's opj_j2k_update_image_data and  opj_tgt_reset function   Hello, We find two vulnerabilities in the way OpenJpeg's opj_j2k_update_image_data and opj_tgt_reset function  parsed certain JPEG image files. I was successful in reproducing these issues in the latest version of openjpeg  (https://github.com/uclouvain/openjpeg,  The crash info about opj_j2k_update_image_data function was: AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 4 at thread T0 Trying to symbolize code, but external symbolizer is not initialized!     #0  is located 0 bytes to the right of 56-byte region allocated by thread T0 here:     #0     #1     #2     #3     #4     #5     #6     #7     #8     #9  SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00[fa]fa fa fa fa   00 00 00 00 00 00 00 fa fa fa fa fa 00 00 00 00   00 00 00 fa fa fa fa fa 00 00 00 00 00 00 00 fa   fa fa fa fa 00 00 00 00 00 00 00 fa fa fa fa fa   00 00 00 00 00 00 00 fa fa fa fa fa 00 00 00 00   00 00 00 fa fa fa fa fa 00 00 00 00 00 00 00 fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:     fa   Heap right redzone:    fb   Freed heap region:     fd   Stack left redzone:    f1   Stack mid redzone:     f2   Stack right redzone:   f3   Stack partial redzone: f4   Stack after return:    f5   Stack use after scope: f8   Global redzone:        f9   Global init order:     f6   Poisoned by user:      f7   ASan internal:         fe [Inferior 1 (process exited with code 01]  The crash info about opj_tgt_reset function was: ASAN:SIGSEGV ================================================================= AddressSanitizer: SEGV on unknown address (pc sp bp T0) Trying to symbolize code, but external symbolizer is not initialized!     #0  AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV ??:0 ??  These vulnerabilities ware found by Qihoo Codesafe Team Download attachment "openjpeg_poc.zip" of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      