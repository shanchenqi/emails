  oss-security - Buffer Overflow in lha compression utility            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 18 Jan From: Paris Zoumpouloglou <pariszoump@...il.com> To: oss-security@...ts.openwall.com Subject: Buffer Overflow in lha compression utility  == Overview == LHA for UNIX (https://osdn.jp/projects/lha/) is an open source implementation of the LHA compression utility and associated file format.  == Version == All tests were performed using the latest commit of the master branch from https://osdn.jp/projects/lha/scm/git/lha/  == Details == Using the afl fuzzer, two cases which triggered a buffer overflow where discovered. The problem existed in and while parsing level0 and level1 headers accordingly.       hdr->header_size = header_size = get_byte();     checksum = get_byte();      if (fread(data + COMMON_HEADER_SIZE,               header_size + 2 - COMMON_HEADER_SIZE, 1, fp) == 0) {         error("Invalid header (LHarc file ?)");         return FALSE;   /* finish */     }       hdr->header_size = header_size = get_byte();     checksum = get_byte();      if (fread(data + COMMON_HEADER_SIZE,               header_size + 2 - COMMON_HEADER_SIZE, 1, fp) == 0) {         error("Invalid header (LHarc file ?)");         return FALSE;   /* finish */     }   The header_size variable is determined from the first byte of the lha archive header, which is read by the get_byte function. The returned value is used in:  header_size + 2 - COMMON_HEADER_SIZE  to determine the elements' size used in fread() .  If the header_size is less than abs(2 - COMMON_HEADER_SIZE) = abs(2 - 21) = 19 then the size parameter is overflowed and a buffer overflow occurs in fread.  == Timeline == - Bug report submitted - Bug fix pushed to master (commit  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      