  oss-security - Remote Command Injection in Ruby Gem colorscore            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 4 Jan From: Reed Loden <reed@...dloden.com> To: oss-security@...ts.openwall.com Subject: Remote Command Injection in Ruby Gem colorscore  Title: Remote Command Injection in Ruby Gem colorscore  Description: Finds the dominant colors in an image and scores them against a user-defined palette, using the Delta E formula.  Homepage: https://github.com/quadule/colorscore  Download: https://rubygems.org/gems/colorscore  Affected versions: All currently)  Vulnerability: The contents of the `image_path`, `colors`, and `depth` variables generated from possibly user-supplied input are passed directly to the shell on line 4. If a user supplies a value that includes shell metacharacters such as ';', an attacker may be able to execute shell commands on the remote system as the user id of the Ruby process.  To resolve this issue, the aforementioned variables (especially `image_path`) must be sanitized for shell metacharacters.  1  module Colorscore 2    class Histogram 3      def initialize(image_path, colors=16, depth=8) 4        output = `convert #{image_path} -resize -format %c -dither None -quantize YIQ -colors #{colors} -depth #{depth} histogram:info:-` 5        @lines = output.lines.sort.reverse.map(&:strip).reject(&:empty?) 6      end  CVE:  Credits: Dirk Zittersteyn (@DZittersteyn)  History: * -- Vendor notified * -- CVE requested * -- Publicly disclosed   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      