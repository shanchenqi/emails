  oss-security - [SECURITY VULNERABILITY] curl escape and unescape integer  overflows            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 14 Sep (CEST) From: Daniel Stenberg <daniel@...x.se> To: curl security announcements -- curl users <curl-users@...l.haxx.se>,         curl-announce@...l.haxx.se,         libcurl hacking <curl-library@...l.haxx.se>,         oss-security@...ts.openwall.com Subject: [SECURITY VULNERABILITY] curl escape and unescape integer  overflows  curl escape and unescape integer overflows ==========================================  Project cURL Security Advisory, September 14, -  VULNERABILITY -------------  The four libcurl functions `curl_escape()`, `curl_easy_escape()`, `curl_unescape` and `curl_easy_unescape` perform string URL percent escaping and unescaping. They accept custom string length inputs in signed integer arguments. (The functions having names without "easy" being the deprecated versions of the others.)  The provided string length arguments were not properly checked and due to arithmetic in the functions, passing in the length 0xffffffff or `UINT_MAX` or even just -1) would end up causing an allocation of zero bytes of heap memory that curl would attempt to write gigabytes of data into.  The use of 'int' for this input type in the API is of course unwise but has remained so in order to maintain the API over the years.  We are not aware of any exploit of this flaw.  INFO ----  This flaw does not affect the curl command line tool.  The Common Vulnerabilities and Exposures (CVE) project has assigned the name to this issue.  AFFECTED VERSIONS -----------------  This flaw exists in the following libcurl versions.  - Affected versions: libcurl to and including - Not affected versions: libcurl < and libcurl >=  libcurl is used by many applications, but not always advertised as such!  THE SOLUTION ------------  In version these functions will deny negative string lengths from being used.  A [patch for is available.  RECOMMENDATIONS ---------------  We suggest you take one of the following actions immediately, in order of preference:    A - Upgrade curl and libcurl to version    B - Apply the patch to your version and rebuild    C - Make sure you don't pass in string lengths larger than `INT_MAX`       (typically or negative values to the `curl_easy_(un)escape()`       functions!  TIME LINE ---------  It was first reported to the curl project on September 8 by the Mitre CVE Assignment Team based on the discussions in [PHP bug report  libcurl was released on September 14 coordinated with the publication of this advisory.  CREDITS -------  Thanks to the Mitre CVE Assignment Team for reporting this to us.  --     / daniel.haxx.se  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      