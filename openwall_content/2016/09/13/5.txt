  oss-security - CVE request -libdwarf heap-buffer-overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 14 Sep From: vul@...safe <vul@...safe.com> To: oss-security@...ts.openwall.com Subject: CVE request -libdwarf heap-buffer-overflow  Hello,  A heap-buffer-overflow was found in the latest libdward  version.  [Introduction] The DWARF Debugging Information Format is of interest to programmers working on compilers and debuggers (and anyone interested in reading or writing DWARF information). It was developed by a committee (known as the PLSIG at the time) starting around Starting around SGI got involved with the committee and then developed the libdwarf and dwarfdump tools for SGI-internal use and as part of SGI IRIX developer tools. From around dwarfdump and libdwarf were shipped (as an executable and archive respectively, not source) with every release of the SGI MIPS/IRIX C compiler. In (I think the correct year) SGI agreed (at my request) to open-source libdwarf (and in to open-source dwarfdump) so anyone could use them.  [Version]  [Vulnerability] With AddressSanitizer, we found a Heap-Buffer-overflow in the latest release version of dwarfdump. The crash output is as follows:  AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 4 at thread T0 Trying to symbolize code, but external symbolizer is not initialized!     #0 in __interceptor_memcpy ??:?     #1 in _dwarf_read_loc_section     #2 in _dwarf_get_loclist_count     #3 in dwarf_get_loclist_c     #4 in get_location_list     #5 in print_attribute     #6 in print_one_die     #7 in print_die_and_children_internal     #8 in print_die_and_children_internal     #9 in print_die_and_children_internal     #10 in print_die_and_children_internal     #11 in print_die_and_children     #12 in print_one_die_section     #13 in print_infos     #14 in process_one_file     #15 in main     #16 in __libc_start_main ??:?     #17 in _start ??:?  is located 0 bytes to the right of region allocated by thread T0 here:     #0 in __interceptor_malloc ??:?     #1 in elf_rawdata ??:?  SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:     fa   Heap right redzone:    fb   Freed heap region:     fd   Stack left redzone:    f1   Stack mid redzone:     f2   Stack right redzone:   f3   Stack partial redzone: f4   Stack after return:    f5   Stack use after scope: f8   Global redzone:        f9   Global init order:     f6   Poisoned by user:      f7   ASan internal:         fe  [Reproduce] Reproduce the problem by run "./dwarfdump poc"  [POC] poc file is in the attachement  This vulnerability was foud by F4B3CD@...RLAB  Best regards, STARLAB  Download attachment "poc" of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      