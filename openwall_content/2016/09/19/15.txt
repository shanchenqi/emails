  oss-security - Re: CVE Request - Ruby OpenSSL Library - IV Reuse in  GCM Mode            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 19 Sep From: Reed Loden <reed@...dloden.com> To: oss-security@...ts.openwall.com Cc: "'Apple' via" <infosec@...ork.com> Subject: Re: CVE Request - Ruby OpenSSL Library - IV Reuse in  GCM Mode  Was Ruby actually notified of this outside of the GitHub issue? Not sure they are monitoring that repository for security issues, so could have been missed.  https://www.ruby-lang.org/en/security/ defines their security reporting processes.  ~reed  On Mon, Sep 19, at PM, Mike Santillana < michael.santillana@...ork.com> wrote:  > Product: Ruby's OpenSSL Library > Version: Tested on (latest) > Bug: IV Reuse > Impact: Depends on the usage of the library > > Hello, > > An IV reuse bug was discovered in Ruby's OpenSSL library when using > aes-gcm. When encrypting data with aes-*-gcm, if the IV is set before > setting the key, the cipher will default to using a static IV. This creates > a static nonce and since aes-gcm is a stream cipher, this can lead to known > cryptographic issues. > > The documentation does not appear to specify the order of operations when > setting the key and IV [1]. As an example, see the following insecure code > snippet below: > > Vulnerable Code: > > def encrypt(plaintext) >     cipher = >     iv = cipher.random_iv # Notice here the IV is set before the key >     cipher.key = >     cipher.auth_data = "" >     ciphertext = cipher.update(plaintext) + cipher.final >     tag = cipher.auth_tag > >     puts "[+] Encrypting: #{plaintext}" >     puts "[+] CipherMessage (IV | Tag | Ciphertext): #{bin2hex(iv)} | > #{bin2hex(tag)} | #{bin2hex(ciphertext)}" > end > > A developer that uses the code above may incorrectly assume that their code > is secure from the pitfalls associated with IV reuse in aes-*-gcm, since > the âcipher.random_ivâ method is used. According to the documentation, this > should generate a random IV each time the encryption method is called. > > When the code above is run with the same key and same plaintext message, > the following results are obtained: > > Output: > # Run 1 > ./gcm_encrypt.rb 'This is some secret message.' > [+] Encrypting: This is some secret message. > [+] CipherMessage (IV | Tag | Ciphertext): | > | > > > # Run 2 > ./gcm_encrypt.rb 'This is some secret message.' > [+] Encrypting: This is some secret message. > [+] CipherMessage (IV | Tag | Ciphertext): | > | > > > Notice that in the output above a unique IV is returned for both runs, but > with the same ciphertext. This proves that even though the random_iv method > is called, the code is defaulting to a static IV. If an attacker can > retrieve multiple ciphertext messages, it is possible to decrypt the > ciphertexts by applying the same attack one would use in a two-time pad > (XOR ciphertexts and crib drag). > > Next review the following code snippet and output, which depicts a secure > implementation of the code: > > Valid Code: > > def encrypt(plaintext) >     cipher = >     cipher.key = >     iv = cipher.random_iv # Notice here the IV is set after the key >     cipher.auth_data = "" >     ciphertext = cipher.update(plaintext) + cipher.final >     tag = cipher.auth_tag > >     puts "[+] Encrypting: #{plaintext}" >     puts "[+] CipherMessage (IV | Tag | Ciphertext): #{bin2hex(iv)} | > #{bin2hex(tag)} | #{bin2hex(ciphertext)}" > end > > Output: > # Run 1 > ./gcm_encrypt.rb 'This is some secret message.' > [+] Encrypting: This is some secret message. > [+] CipherMessage (IV | Tag | Ciphertext): | > | > > > # Run 2 > ./gcm_encrypt.rb 'This is some secret message.' > [+] Encrypting: This is some secret message. > [+] CipherMessage (IV | Tag | Ciphertext): | > | > > > Notice that this time both the IV and ciphertexts are both different for > the same plaintext. This is the intended result a developer would expect to > happen when using this library. > > It should be noted that when I went to Ruby's github page to report this > bug, I noticed a developer also independently encountered this weird > phenomenon [2]. Since it has already been brought up to the Ruby team, I > have not created a new ticket. > > References: >  [1] > > OpenSSL/Cipher.html#class-OpenSSL::Cipher-label- > >  [2] https://github.com/ruby/openssl/issues/49 > > I'd like to to request a CVE ID for this issue. > > Thanks > > *WeWork | Mike Santillana* > Security Engineer > > www.wework.com > > Create Your Life's Work >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      