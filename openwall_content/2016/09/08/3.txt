  oss-security - CVE Request: OpenJPEG Integer Overflow Issue            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 8 Sep From: winsonliu(ĺç§) <winsonliu@...cent.com> To: oss-security <oss-security@...ts.openwall.com> CC: cve-assign <cve-assign@...re.org> Subject: CVE Request: OpenJPEG Integer Overflow Issue  Hi,  This is Ke from Tencent's Xuanwu LAB. I reported a security issue of OpenJPEG some days ago and it has been fixed now. The fix is available at and .  Could you please assign a CVE number for it?  Thanks.  Regards, Ke Tencent's Xuanwu LAB   DESCRIPTION ============== An integer overflow issue exists in function opj_pi_create_decode of pi.c. It can lead to Out-Of-Bounds Read and Out-Of-Bounds Write in function opj_pi_next_cprl of pi.c (function opj_pi_next_lrcp, opj_pi_next_rlcp, opj_pi_next_rpcl, opj_pi_next_pcrl may also be vulnerable). This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of OpenJPEG.   CREDIT ============== This vulnerability was discovered by Ke Liu of Tencent's Xuanwu LAB.   TESTED VERSION ============== Master version of OpenJPEG   EXCEPTION LOG ============== AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 2 at thread T0     #0 in opj_pi_next_cprl     #1 in opj_pi_next     #2 in opj_t2_decode_packets     #3 in opj_tcd_t2_decode     #4 in opj_tcd_decode_tile     #5 in opj_j2k_decode_tile     #6 in opj_j2k_decode_tiles     #7 in opj_j2k_exec     #8 in opj_j2k_decode     #9 in opj_jp2_decode     #10 in opj_decode     #11 in main     #12 in __libc_start_main     #13 in _start  AddressSanitizer can not describe address in more detail (wild memory access suspected). SUMMARY: AddressSanitizer: heap-buffer-overflow opj_pi_next_cprl Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb   SOURCE CODE ============== 1. OOB read and OOB write exist in function opj_pi_next_cprl, function opj_pi_next_lrcp, opj_pi_next_rlcp, opj_pi_next_rpcl, opj_pi_next_pcrl may also be vulnerable.  static OPJ_BOOL opj_pi_next_cprl(opj_pi_iterator_t * pi) {     // ...     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno * pi->step_c + pi->precno * pi->step_p;         if (!pi->include[index]) {      // ----> Out-Of-Bounds Read!!!             pi->include[index] = 1;     // ----> Out-Of-Bounds Write!!!             return OPJ_TRUE;         }     // ...     return OPJ_FALSE; }  2. Integer overflow exists in function opj_pi_create_decode.  opj_pi_iterator_t *opj_pi_create_decode(opj_image_t *p_image,                                         opj_cp_t *p_cp,                                         OPJ_UINT32 p_tile_no) {     // ...     l_step_p = 1;     l_step_c = l_max_prec * l_step_p;     l_step_r = p_image->numcomps * l_step_c;     l_step_l = l_max_res * l_step_r;      /* set values for first packet iterator */     l_current_pi = l_pi;      /* memory allocation for include */     l_current_pi->include = (OPJ_INT16*) opj_calloc(         (l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16));   // ----> Integer Overflow!!!     // ... }  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      