  oss-security - CVE Request: OpenJPEG Heap Buffer Overflow Issue            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 8 Sep From: winsonliu(ĺç§) <winsonliu@...cent.com> To: oss-security <oss-security@...ts.openwall.com> CC: cve-assign <cve-assign@...re.org> Subject: CVE Request: OpenJPEG Heap Buffer Overflow Issue  Hi,  This is Ke from Tencent's Xuanwu LAB. I reported a security issue of OpenJPEG some days ago and it has been fixed now. The fix is available at . Could you please assign a CVE number for it?  Thanks.  Regards, Ke Tencent's Xuanwu LAB   DESCRIPTION ============== A Heap Buffer Overflow (Out-of-Bounds Write) issue was found in function opj_dwt_interleave_v of dwt.c. This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of OpenJPEG.   CREDIT ============== This vulnerability was discovered by Ke Liu of Tencent's Xuanwu LAB.   TESTED VERSION ============== Master version of OpenJPEG   EXCEPTION LOG ============== AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size 4 at thread T0     #0 in opj_dwt_interleave_v     #1 in opj_dwt_decode_tile     #2 in opj_dwt_decode     #3 in opj_tcd_dwt_decode     #4 in opj_tcd_decode_tile     #5 in opj_j2k_decode_tile     #6 in opj_j2k_decode_tiles     #7 in opj_j2k_exec     #8 in opj_j2k_decode     #9 in opj_jp2_decode     #10 in opj_decode     #11 in main     #12 in __libc_start_main     #13 in _start  is located 4 bytes to the left of region allocated by thread T0 here:     #0 in __interceptor_posix_memalign     #1 in opj_aligned_alloc_n     #2 in opj_aligned_malloc     #3 in opj_dwt_decode_tile     #4 in opj_dwt_decode     #5 in opj_tcd_dwt_decode     #6 in opj_tcd_decode_tile     #7 in opj_j2k_decode_tile     #8 in opj_j2k_decode_tiles     #9 in opj_j2k_exec     #10 in opj_j2k_decode     #11 in opj_jp2_decode     #12 in opj_decode     #13 in main     #14 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow opj_dwt_interleave_v Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      