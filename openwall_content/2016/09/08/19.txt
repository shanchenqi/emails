  oss-security - Persistent Cross-Site Scripting vulnerability in WordPress due to  unsafe processing of file names            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 8 Sep From: Summer of Pwnage <lists@...urify.nl> To: oss-security@...ts.openwall.com Subject: Persistent Cross-Site Scripting vulnerability in WordPress due to  unsafe processing of file names  ------------------------------------------------------------------------ Persistent Cross-Site Scripting vulnerability in WordPress due to unsafe processing of file names ------------------------------------------------------------------------ Han Sahin, July  ------------------------------------------------------------------------ Abstract ------------------------------------------------------------------------ A persistent Cross-Site Scripting (XSS) vulnerability has been found in WordPress. An attacker can create a specially crafted image file name which, when uploaded in WordPress, injects malicious JavaScript code into the application. An attacker can use this vulnerability to perform a wide variety of actions, such as stealing victims' session tokens or login credentials, and performing arbitrary actions on their behalf.  ------------------------------------------------------------------------ OVE ID ------------------------------------------------------------------------  ------------------------------------------------------------------------ Tested versions ------------------------------------------------------------------------ This issue was successfully tested on WordPress [2]  ------------------------------------------------------------------------ Fix ------------------------------------------------------------------------ This vulnerability is resolved in WordPress [3] (Release Notes [4]).  ------------------------------------------------------------------------ Introduction ------------------------------------------------------------------------ WordPress Media Upload functionality is used to upload image, audio, video and other allowed file extensions. The uploaded media types are automatically available to public users via so called public 'Attachment Pages'.  ------------------------------------------------------------------------ Details ------------------------------------------------------------------------ WordPress performs insufficient validation on the file name of uploaded media types and in specific images. The file name of an image is used as image Title (meta) in so called âattachment pagesâ (HTML). An attacker can exploit this vulnerability by crafting an image file name with Cross-Site Scripting payload and lure an admin into uploading the image with the malicious file name.  ------------------------------------------------------------------------ Limitations ------------------------------------------------------------------------  Operating System  Please note that the WordPress admin (victim) needs to use an operating system like for example Mac or Linux. These provide extended file name capabilities necessary for an attacker to be able to successfully use this vulnerability.  Social Engineering  For the attack to succeed the following conditions have to be met:  - A WordPress admin uploads a malicious image file requested by a user this admin trusts or a popular malicious image that was spread via social media. This involves social engineering. In the Proof of Concept the file name cengizhansahinsumofpwn<img src=a onerror=alert(document.cookie)>.jpg was used.  - An attacker can now determine if the file name with which the malicious file is available on the WordPress site. With this information he can spread the URL to end users and the WordPress admin.  ------------------------------------------------------------------------ References ------------------------------------------------------------------------ [1]  [2] https://wordpress.org/ [3] [4]   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      