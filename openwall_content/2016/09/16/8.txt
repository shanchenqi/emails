  oss-security - -- bash prompt expanding $HOSTNAME            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 16 Sep From: John Haxby <john.haxby@...cle.com> To: oss-security@...ts.openwall.com Cc: chet.ramey@...e.edu Subject: -- bash prompt expanding $HOSTNAME  Hello All,  A little while ago, one of our users discovered that by setting the hostname to $(something unpleasant), bash would run "something unpleasant" when it expanded \h in the prompt string.  We informed Chet (cc'd) and this has been fixed in the recently announced bash-4.4.  I believe the fix in parse.y is this (Chet, please correct me if I'm wrong):  -------------------- @@ @@ decode_prompt_string (string)   	    case 'h':  	    case 'H': -	      temp = savestring (current_host_name); -	      if (c == 'h' && (t = (char *)strchr (temp, '.'))) +	      t_host = savestring (current_host_name); +	      if (c == 'h' && (t = (char *)strchr (t_host, '.')))  		*t = '\0'; +	      if (promptvars || posixly_correct) +		/* Make sure that expand_prompt_string is called with a +		   second argument of Q_DOUBLE_QUOTES if we use this +		   function here. */ +		temp = sh_backslash_quote_for_double_quotes (t_host); +	      else +		temp = savestring (t_host); +	      free (t_host);  	      goto add_string;   	    case '#': --------------------  There is a related fix (but not one necessarily covered by  -------------------- @@ @@ decode_prompt_string (string)   	    case 's':  	      temp = base_pathname (shell_name); -	      temp = savestring (temp); +	      /* Try to quote anything the user can set in the file system */ +	      if (promptvars || posixly_correct) +		temp = sh_backslash_quote_for_double_quotes (temp); +	      else +		temp = savestring (temp);  	      goto add_string;   	    case 'v': --------------------  I appreciate that it's relatively difficult to set the hostname to a string of your choosing but there are plenty of helpful agents that will call sethostname(2) on your behalf.  jch  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      