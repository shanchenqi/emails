  oss-security - Re: CVE request: out-of-bounds write with cpio            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 12 Feb From: Gustavo Grieco <gustavo.grieco@...il.com> To: oss-security@...ts.openwall.com Subject: Re: CVE request: out-of-bounds write with cpio  A patch is available here:   Gustavo Grieco <gustavo.grieco@...il.com>:  > Hello, > > An out-of-bounds write in cpio was found in the parsing of cpio files > (other version are probably affected).  Find attached a test case to > reproduce it. The ASAN report is here: > > ================================================================= > AddressSanitizer: heap-buffer-overflow on address > at pc bp sp > WRITE of size 2 at thread T0 >     #0 in cpio_safer_name_suffix > >     #1 in process_copy_in > >     #2 in main >     #3 in __libc_start_main > >     #4 > > is located 0 bytes to the right of 1-byte region > > allocated by thread T0 here: >     #0 in __interceptor_malloc > >     #1 in xmalloc >     #2 in read_in_new_ascii > >     #3 in read_in_header > >     #4 in process_copy_in > >     #5 in main >     #6 in __libc_start_main > > > SUMMARY: AddressSanitizer: heap-buffer-overflow > cpio_safer_name_suffix > Shadow bytes around the buggy address: >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > fa fa fa fa fa fa fa fa fa fa[01]fa fa fa 06 fa >   fa fa 05 fa fa fa 00 04 fa fa 00 04 fa fa 00 04 >   fa fa 00 04 fa fa 00 04 fa fa 00 04 fa fa 00 04 >   fa fa 00 04 fa fa 00 04 fa fa 00 04 fa fa 00 04 >   fa fa 00 04 fa fa 00 04 fa fa 00 04 fa fa fd fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa > Shadow byte legend (one shadow byte represents 8 application bytes): >   Addressable:           00 >   Partially addressable: 01 02 03 04 05 06 07 >   Heap left redzone:       fa >   Heap right redzone:      fb >   Freed heap region:       fd >   Stack left redzone:      f1 >   Stack mid redzone:       f2 >   Stack right redzone:     f3 >   Stack partial redzone:   f4 >   Stack after return:      f5 >   Stack use after scope:   f8 >   Global redzone:          f9 >   Global init order:       f6 >   Poisoned by user:        f7 >   Contiguous container OOB:fc >   ASan internal:           fe > > > > This issue was found using QuickFuzz. > > Regards, > Gus. > >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      