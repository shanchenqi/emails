  oss-security - Re: Address Sanitizer local root            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 19 Feb From: Rich Felker <dalias@...c.org> To: oss-security@...ts.openwall.com Subject: Re: Address Sanitizer local root  On Wed, Feb 17, at Daniel Micay wrote: > On Wed, at Konstantin Serebryany wrote: > > Sadly MPX is too slow, too memory-hungry, and does not protect from > > use-after-free at all. >  > MPX is definitely problematic (performance, memory usage, false > positives with some atomic data structures, false positives without > using it everywhere - essentially a new ABI) but I don't think the lack > of coverage for lifetime issues is a major issue. >  > The malloc implementation can do a good job at mitigating lifetime > issues though. It can't detect of UAF issues, but it can force > usage of pointers to fault (via proper junk filling) and detect write > after free via a comparable quarantine technique + validating that the > junk data is unaltered when allocations leave the quarantine. It can be > just as good at detecting double-free. >  > See the follow-up email: >  > >  > It's extremely painful to actually debug the aborts and faults produced > from this kind of hardening, so it doesn't really displace ASan at all > even for the bits where it can be as reliable, and it doesn't cover the > read-after-free case in the same way.  As long as the aborts/faults happen at the earliest point where the wrong program behavior can be detected, I see no way they are "more painful to debug" than having ASan or similar introspectively print crash info. Attaching a debugger should get you equally useful information.  Rich  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      