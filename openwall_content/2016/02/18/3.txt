  oss-security - Re: Address Sanitizer local root            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 17 Feb From: Daniel Micay <danielmicay@...il.com> To: oss-security@...ts.openwall.com Subject: Re: Address Sanitizer local root  > The use-after-free and double-free detection is based on the same > quarantine technique in Valgrind. It can only detect the issues before > allocations are flushed out of the quarantine by memory pressure. It > does mitigate many vulnerabilities but comparable double-free > detection > could be done in malloc without the drawbacks (two flat arrays > providing > a ring buffer for a FIFO quarantine + a hash table). The same thing > applies to write-after-free but not use-after-free, since that would > require instrumentation in the code. A write-after-free can be > detected > by filling allocations with junk and then checking for it when it's > flushed from the quarantine rather than instrumentation. It doesn't > need > to do the whole allocation to be useful, so there's a large range of > tuning for performance. The junk data could come from a stream cipher > seeded from the address if desired, but it doesn't seem important.  There's an initial implementation of this in CopperheadOS if anyone is curious about it.  FIFO quarantine:   Double-free detection via an open-addressed hash table:   Junk validation (upstreamed):   Remaining portion of the junk validation feature:   It would mix well with a dynamic bounds checking implementation like Intel MPX since it covers the lifetime issues fairly well. There would need to be the ability to extend the default quarantine size to make it more useful but that's simple enough. There's also the standard OpenBSD randomized quarantine, which it doesn't interfere with. Detecting read- after-free beyond cases where a pointer to protected data (from the junk filling) will guarantee Â a crash really needs some form of hardware acceleration too. I think the cost of having huge memory usage via enormous deterministic mappings is too high. Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      