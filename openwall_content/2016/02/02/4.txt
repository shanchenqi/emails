  oss-security - Fwd: PHP-FPM fpm_log.c memory leak and buffer overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 2 Feb From: Štefan Šafár <stefan.safar@...ma.seznam.cz> To: <oss-security@...ts.openwall.com> Subject: Fwd: PHP-FPM fpm_log.c memory leak and buffer overflow  Forwarding this email as it seems it wasn't sent here. Perhaps a CVE should be issued?   -------- Forwarded Message -------- Subject: 	PHP-FPM fpm_log.c memory leak and buffer overflow Date: 	Mon, 25 Jan From: 	Imre RAD <imre.rad@...rch-lab.hu> To: 	bugtraq@...urityfocus.com    The FastCGI Process Manager (FPM) SAPI of PHP was vulnerable to memory leak and buffer overflow in the access logging feature.  PHP-FPM offers customization of the access log lines based on format string variables which can be specified with the access.format option of the FPM configuration file. The log lines were compiled in php-fpm.c. The %{something}e fields were processed at line  len2 = snprintf(b, FPM_LOG_BUFFER - len, "%s", env ? env : "-"); ... len += len2; ...     if (!test && strlen(buffer) > 0) {          buffer[len] = '\n';         write(fpm_log_fd, buffer, len + 1);     }  In case the string being appended to the access log line buffer was longer than the remaining space, the len variable became longer than the buffer (FPM_LOG_BUFFER) size, because snprintf returns the number of characters (excluding the terminating null byte) which would have been written to the final string if enough space had been available. Then the PHP engine performed an out-of-boundaries read and also wrote a \n character outside of the allocated memory.  The fix is available with the commit The fixed versions of PHP are: and  More information:  Imre Rad Search-Lab Ltd. http://www.search-lab.hu/ http://www.scademy.com/      Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      