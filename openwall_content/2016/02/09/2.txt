  oss-security - CVE requests: Multiple vulnerabilities in GraphicsMagick parsing and  processing SVG files            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 9 Feb From: Gustavo Grieco <gustavo.grieco@...il.com> To: oss-security@...ts.openwall.com Subject: CVE requests: Multiple vulnerabilities in GraphicsMagick parsing and  processing SVG files  Hi,  We recently tested the last release of GraphicsMagick with our tool and found some vulnerabilities that allows to read or write outside memory bounds (heap, stack) as well as some null-pointer derreferences to cause DoS. All these bugs are related with the parsing and processing of SVG files. Upstream is notified and working to fix them but in the meantime be carefull if you process untrusted SVG files using GraphicsMagick.  Here is the summary of vulnerabilities we found. Reproducers are attached.  convert -resize bmp:/dev/null ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size 8 at thread T0     #0 in TracePoint     #1 in TraceEllipse     #2 in TraceRoundRectangle     #3 in DrawImage     #4 in ReadMVGImage     #5 in ReadImage     #6 in ReadSVGImage     #7 in ReadImage     #8 in ConvertImageCommand     #9 in MagickCommand     #10 in GMCommandSingle     #11 in GMCommand     #12 in main utilities/gm.c:61     #13 in __libc_start_main     #14   convert -resize bmp:/dev/null ================================================================= AddressSanitizer: stack-buffer-overflow on address at pc bp sp WRITE of size 1 at thread T0     #0 in GetToken     #1 in GetUserSpaceCoordinateValue     #2 in SVGStartElement     #3 in xmlParseStartTag     #4      #5 in xmlParseChunk     #6 in ReadSVGImage     #7 in ReadImage     #8 in ConvertImageCommand     #9 in MagickCommand     #10 in GMCommandSingle     #11 in GMCommand     #12 in main utilities/gm.c:61     #13 in __libc_start_main     #14  Address is located in stack of thread T0 at offset in frame     #0 in GetUserSpaceCoordinateValue    This frame has 2 object(s):     [32, 40) 'p'     [96, 'token' <== Memory access at offset overflows this variable  convert -resize bmp:/dev/null ASAN:SIGSEGV ================================================================= AddressSanitizer: SEGV on unknown address (pc bp sp T0)     #0 in DrawImage     #1 in ReadMVGImage     #2 in ReadImage     #3 in ReadSVGImage     #4 in ReadImage     #5 in ConvertImageCommand     #6 in MagickCommand     #7 in GMCommandSingle     #8 in GMCommand     #9 in main utilities/gm.c:61     #10 in __libc_start_main     #11   convert -resize bmp:/dev/null ASAN:SIGSEGV ================================================================= AddressSanitizer: SEGV on unknown address (pc bp sp T0)     #0 in SVGStartElement     #1 in xmlParseStartTag     #2      #3 in xmlParseChunk     #4 in ReadSVGImage     #5 in ReadImage     #6 in ConvertImageCommand     #7 in MagickCommand     #8 in GMCommandSingle     #9 in GMCommand     #10 in main utilities/gm.c:61     #11 in __libc_start_main     #12   convert -resize bmp:/dev/null ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size 8 at thread T0     #0 in GetTransformTokens     #1 in SVGStartElement     #2 in xmlParseStartTag     #3      #4 in xmlParseChunk     #5 in ReadSVGImage     #6 in ReadImage     #7 in ConvertImageCommand     #8 in MagickCommand     #9 in GMCommandSingle     #10 in GMCommand     #11 in main utilities/gm.c:61     #12 in __libc_start_main     #13   convert -resize bmp:/dev/null ASAN:SIGSEGV ================================================================= AddressSanitizer: SEGV on unknown address (pc bp sp T0)     #0 in TraceArcPath     #1 in TracePath     #2 in DrawImage     #3 in ReadMVGImage     #4 in ReadImage     #5 in ReadSVGImage     #6 in ReadImage     #7 in ConvertImageCommand     #8 in MagickCommand     #9 in GMCommandSingle     #10 in GMCommand     #11 in main utilities/gm.c:61     #12 in __libc_start_main     #13  Regards, Gus.  Content of type "text/html" skipped  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      