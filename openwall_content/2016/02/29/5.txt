  oss-security - Re: CVE request: Heap buffer overflow in pcretest            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 29 Feb (EST) From: cve-assign@...re.org To: amaris@...hat.com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE request: Heap buffer overflow in pcretest  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > Heap-based buffer overread caused by specially crafted input triggering > infinite loop in pcretest.c   Can you clarify the threat model for an infinite loop caused by the pcretest.c source code?  Our understanding is that pcretest and pcre2test are standalone command-line programs; they are not normally linked into applications that use the PCRE library. This type of bug in pcretest or pcre2test might not have any common associated use case in which an unattended process receives untrusted patterns, and uses a huge amount of CPU time before anyone notices. In other words, a person who has any awareness of running pcretest or pcre2test could observe the long run time, and could apparently recover from the bug by removing the problematic patterns from the set of input patterns, and then running the program again. Obviously, some infinite-loop issues have CVE ID assignments but they are almost always issues in which the use case is realistically unattended (kernel, daemons, CGI scripts, web browsers, network-monitoring tools, general-purpose library code, etc.).  If a pattern can result in code execution when pcretest or pcre2test is executed with untrusted input, then a CVE ID could be considered.  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =mSgo -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      