  oss-security - Re: heap use-after-free on libical            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 19 Dec From: Agustin Mista <mista.agustin@...il.com> To: oss-security@...ts.openwall.com Subject: Re: heap use-after-free on libical  Hi Brandon,  Thunderbird 45 seems to be handling this corrupted file properly. Also, we used Valgrind and found nothing suspicious.  Regards. Agustín.  El jue., 15 dic. a las Brandon Perry (<bperry.volatile@...il.com>) escribió:   > On Dec 15, at AM, Brandon Perry <bperry.volatile@...il.com> wrote: > > >> On Dec 15, at AM, Agustin Mista <mista.agustin@...il.com> wrote: >> >> We found a heap use-after-free in a recent revision of libical ( >> >> using a specially crafted ics file. This bugs looks particularly dangerous >> since it allows to read a big chunk of the heap memory. >> >> The address sanitizer report is as follows: >> >> AddressSanitizer: heap-use-after-free on address >> at pc bp sp >> READ of size 62 at thread T0 >> #0 >> #1 >> #2 >> #3 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #4 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #5 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #6 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #7 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #8 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #9 >> #10 >> #11 >> >> is located 4 bytes inside of 66-byte region >> >> freed by thread T0 here: >> #0 >> #1 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #2 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #3 >> #4 >> >> previously allocated by thread T0 here: >> #0 >> #1 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #2 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #3 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #4 (/home/agustin/Code/libical/build/lib/libical.so.2+ >> >> #5 >> #6 >> >> SUMMARY: AddressSanitizer: heap-use-after-free ??:0 ?? >> Shadow bytes around the buggy address: >> fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd >> fd fd fd fd fd fd fa fa fa fa fd fd fd fd fd fd >> fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd >> fd fd fa fa fa fa fd fd fd fd fd fd fd fd fd fd >> fa fa fa fa fd fd fd fd fd fd fd fd fd fd fa fa >> fa fa[fd]fd fd fd fd fd fd fd fd fa fa fa fa fa >> fd fd fd fd fd fd fd fd fd fd fa fa fa fa 00 00 >> 00 00 00 00 00 00 03 fa fa fa fa fa fd fd fd fd >> fd fd fd fd fd fa fa fa fa fa fd fd fd fd fd fd >> fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd >> fd fd fa fa fa fa fd fd fd fd fd fd fd fd fd fd >> >> >> And the backtrace is available here: >> >> #0 in __GI_raise (sig=sig@...ry=6) >> at ../nptl/sysdeps/unix/sysv/linux/raise.c:56 >> #1 in __GI_abort () at abort.c:89 >> #2 in __sanitizer::Abort() () >> #3 in __asan::AsanDie() () >> #4 in __sanitizer::Die() () >> #5 in __asan::ScopedInErrorReport::~ScopedInErrorReport() >> () >> #6 in __asan_report_error () >> #7 in printf_common(void*, char const*, __va_list_tag*) >> () >> #8 in vsnprintf () >> #9 in snprintf () >> #10 in icalreqstattype_as_string_r (stat=...) >> at >> #11 in icalvalue_as_ical_string_r >> at >> #12 in icalproperty_as_ical_string_r >> >> at >> #13 in icalcomponent_as_ical_string_r >> >> at >> #14 in icalcomponent_as_ical_string_r >> >> at >> #15 in icalcomponent_as_ical_string >> at >> #16 in main (argc=2, >> at >> >> It is worth to mention there is a very similar bug found on >> the libical version used by >> Thunderbird but we think is *not* the same as this one. In fact, we've >> tested it on Thunderbird and it does *not* crash. > > I’ve found multiple use-after-frees in libical that affected Thunderbird that did not cause Thunderbird to crash. Did you run this through valgrind or are you using Thunderbird not crashing as evidence it isn’t vulnerable.  An example: < > >> >> The reproducer is available upon request. >> >> Unfortunately, there is no fix yet, but upstream is working on it. >> >> Regards. >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      