  oss-security - libgd: signedness vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 22 Apr From: Hans Jerry Illikainen <hji@...topia.com> To: bugtraq@...urityfocus.com, fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: libgd: signedness vulnerability  Overview ========  libgd [1] is an open-source image library.  It is perhaps primarily used by the PHP project.  It has been bundled with the default installation of PHP since version 4.3 [2].  A signedness vulnerability exist in libgd which may result in a heap overflow when processing compressed gd2 data.   Details =======  4 bytes representing the chunk index size is stored in a signed integer, chunkIdx[i].size, by `gdGetInt()' during the parsing of GD2 headers:  ,---- |  53 typedef struct { |  54     int offset; |  55     int size; |  56 } |  57 t_chunk_info; `----  ,---- |  65 static int |  66 _gd2GetHeader (gdIOCtxPtr in, int *sx, int *sy, |  67                int *cs, int *vers, int *fmt, int *ncx, int *ncy, |  68                t_chunk_info ** chunkIdx) |  69 { | ... |  73     t_chunk_info *cidx; | ... |     if (gd2_compressed (*fmt)) { | ... |         for (i = 0; i < nc; i++) { | ... |             if (gdGetInt (&cidx[i].size, in) != 1) { |                 goto fail2; |             }; |         }; |         *chunkIdx = cidx; |     }; | ... | } `----  `gdImageCreateFromGd2Ctx()' and `gdImageCreateFromGd2PartCtx()' then allocates memory for the compressed data based on the value of the largest chunk size:  ,---- |     if (gd2_compressed (fmt)) { |         /* Find the maximum compressed chunk size. */ |         compMax = 0; |         for (i = 0; (i < nc); i++) { |             if (chunkIdx[i].size > compMax) { |                 compMax = chunkIdx[i].size; |             }; |         }; |         compMax++; | ...|... |         compBuf = gdCalloc (compMax, 1); | ...|... |     }; `----  A size of <= 0 results in `compMax' retaining its initial value during the loop, followed by it being incremented to 1.  Since `compMax' is used as the nmemb for `gdCalloc()', this leads to a 1*1 byte allocation for `compBuf'.  This is followed by compressed data being read to `compBuf' based on the current (potentially negative) chunk size:  ,---- | BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Ctx (gdIOCtxPtr in) | { | ... |         if (gd2_compressed (fmt)) { | |             chunkLen = chunkMax; | |             if (!_gd2ReadChunk (chunkIdx[chunkNum].offset, |                                 compBuf, |                                 chunkIdx[chunkNum].size, |                                 (char *) chunkBuf, &chunkLen, in)) { |                 GD2_DBG (printf ("Error reading comproessed chunk\n")); |                 goto fail; |             }; | |             chunkPos = 0; |         }; | ... | } `----   ,---- | BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2PartCtx (gdIOCtx * in, int srcx, int srcy, int w, int h) | { | ... |         if (!gd2_compressed (fmt)) { | ... |         } else { |             chunkNum = cx + cy * ncx; | |             chunkLen = chunkMax; |             if (!_gd2ReadChunk (chunkIdx[chunkNum].offset, |                                 compBuf, |                                 chunkIdx[chunkNum].size, |                                 (char *) chunkBuf, &chunkLen, in)) { |                 printf ("Error reading comproessed chunk\n"); |                 goto fail2; |             }; | ... |         }; | ... | } `----  The size is subsequently interpreted as a size_t by `fread()' or `memcpy()', depending on how the image is read:  ,---- | static int | _gd2ReadChunk (int offset, char *compBuf, int compSize, char *chunkBuf, |            uLongf * chunkLen, gdIOCtx * in) | { | ... |     if (gdGetBuf (compBuf, compSize, in) != compSize) { |         return FALSE; |     }; | ... | } `----  ,---- | int gdGetBuf(void *buf, int size, gdIOCtx *ctx) | { |     return (ctx->getBuf)(ctx, buf, size); | } `----   For file contexts:  ,---- |  52 BGD_DECLARE(gdIOCtx *) gdNewFileCtx(FILE *f) |  53 { | ... |  67     ctx->ctx.getBuf = fileGetbuf; | ... |  76 } | ... |  92 static int fileGetbuf(gdIOCtx *ctx, void *buf, int size) |  93 { |  94     fileIOCtx *fctx; |  95     fctx = (fileIOCtx *)ctx; |  96 |  97     return (fread(buf, 1, size, fctx->f)); |  98 } `----   And for dynamic contexts:  ,---- |  74 BGD_DECLARE(gdIOCtx *) gdNewDynamicCtxEx(int initialSize, void *data, int freeOKFlag) |  75 { | ... |  95     ctx->ctx.getBuf = dynamicGetbuf; | ... | } | ... | static int dynamicGetbuf(gdIOCtxPtr ctx, void *buf, int len) | { | ... |     memcpy(buf, (void *) ((char *)dp->data + dp->pos), rlen); | ... | } `----   PoC ===  Against Ubuntu amd64 running nginx with php5-fpm and php5-gd [3]:  ,---- | $ python exploit.py --bind-port | [*] this may take a while | [*] offset of | [+] connected to | id | uid=33(www-data) gid=33(www-data) groups=33(www-data) |  | uname -a | Linux wily64 #40-Ubuntu SMP Tue Mar 15 UTC | GNU/Linux |  | dpkg -l|grep -E "php5-(fpm|gd)" | ii  php5-fpm       ... | ii  php5-gd        ... |  | cat upload.php | <?php |     imagecreatefromgd2($_FILES["file"]["tmp_name"]); | ?> `----   Solution ========  This bug has been fixed in git HEAD [4].    Footnotes _________  [1] [http://libgd.org/]  [2] [https://en.wikipedia.org/wiki/Libgd]  [3]  [4]   --  Hans Jerry Illikainen  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      