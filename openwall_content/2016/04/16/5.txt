  oss-security - Reflected XSS Vulnerability in Wordpress Custom-metas plugin            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sat, 16 Apr From: shravan kumar To: oss-security@...ts.openwall.com Subject: Reflected XSS Vulnerability in Wordpress Custom-metas plugin  Hello  ,   I would like to disclose a XSS vulnerability in Custom-metas plugin version  .  The Plugin can be found at https://wordpress.org/plugins/custom-metas/   Reproduction steps:     - Install the plugin custom-metas    - Log in to wp-admin as administrator (tested on firefox)    - Pass the XSS payload as GET parameter to the    /wp-admin/admin.php?page=custom-metas&paged=<XSS payload here>    - example    http://targetip/WPinstallationdir/wp-admin/admin.php?page=custom-metas&paged=    "><script>alert(1);</script>    - you will see a alert box.  Technical details:  This vulnerability is due to display of unsanitized GET parameters, which are directly displayed on the page with-out any filters.  The vulnerable page is  /wp-content/plugins/custom-metas/tpl/meta-data-form-multiple.php   The Code responsible for the vulnerability is  LINE 10  $currentPageNo = ( isset($_GET['paged']) && $_GET['paged'] != "")? $_GET['paged']:1;  the currentPageNo variable is set using $_GET['paged'] .  It is then displayed in unsafe manner i.e without any filters. in following line of code  LINE 43  <input type="text" size="2" value="<?php echo $currentPageNo;?>" name="paged" title="Current page" id="postCurrent" class="current-page" /> of <span class="total-pages"><?php echo $tPostNumCount; ?></span>   --  Shravan Kumar   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      