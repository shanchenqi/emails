  oss-security - CVE Request - Multiple remote command injection vulnerabilities in  Veil-Evasion RPC            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 31 Mar From: Brian Wallace To: oss-security@...ts.openwall.com Cc: Christopher Truncer <ctruncer@...l-framework.com> Subject: CVE Request - Multiple remote command injection vulnerabilities in  Veil-Evasion RPC  Hello,  Three remote code execution vulnerabilities have been discovered in Veil-Evasion's RPC, which is instantiated with `veil-evasion --rpc` or `python Veil-Evasion --rpc`.  Additionally, previous to version this RPC allowed connections from any IP address instead of only "localhost", increasing the severity of the command injection vulnerabilities and allowing for remote exploitation.  This RPC public availability may also be considered a vulnerability itself, as it was unintended.  All issues have been reported to the developers of the Veil-Evasion project, and patches have been applied for version  Issues are believed to affect versions of Veil-Evasion from through   Remote command injection in "native/hyperion" module: This module allows for injection into a command line call to the hyperion utility.  A vulnerable version of the command line call can be found here: An attacker can control input to this field through the ORIGINAL_EXE field.  A sample RPC call exploiting this vulnerability is as follows (will create the file /tmp/victory): {"method": "generate", "params": ["payload=native/hyperion", "outputbase=base", "pwnstaller=N", "ORIGINAL_EXE=/tmp $(touch /tmp/victory)"],"id": 1} An attacker could use this vulnerability to execute any desired commands on the victim host.  This issue is resolved in the following commit (version   Remote command injection in "native/pescrambler" module: This module allows for injection into a command line call to the pescrambler utility. A vulnerable version of the command line call can be found here: An attacker can control input to this field through the ORIGINAL_EXE field.  A sample RPC call exploiting this vulnerability is as follows (will create the file /tmp/victory): {"method": "generate", "params": ["payload=native/pe_scrambler", "outputbase=base", "pwnstaller=N", "ORIGINAL_EXE=/tmp $(touch /tmp/victory)"],"id": 1} An attacker could use this vulnerability to execute any desired commands on the victim host.  This issue is resolved in the following commit (version   Remote command injection into "msfvenom" parameter: When msfvenom is used to generate shellcode, a user may supply options to the msfvenom command line call.  An attacker may use this to insert other commands to be executed.  The command line execution of msfvenom can be found here: Based on the functionality provided, the selected solution to the problem was to parse input as a shell script, and deny any input which appeared to include attempts at command injection.  An attacker can abuse this with the following RPC call in version (different versions may require different modules depending on msfvenom support): {"method": "generate", "params": ["payload=c/shellcode_inject/flatc", "msfvenom=$(touch /tmp/victory)", "outputbase=base", "pwnstaller=N", "COMPILE_TO_EXE=Y", "INJECT_METHOD=Virtual", ], "id": 1} An attacker could use this vulnerability to execute any desired commands on the victim host.  This issue was resolved in the following commit (version   RPC unauthenticated public access: The RPC provided on port for Veil-Evasion is exposed to external IP addresses instead of only to localhost from its initial implementation up until patched this issue.  Aside from the issues noted above, this would allow for an attacker to send commands to the Veil-Evasion RPC, generating payloads, and other available functionality which may not be desirable to unauthorized users.  The code causing the issue can be observed here:  This issue was resolved in the following commit (version   Vulnerabilities were discovered and reported by Brian Wallace  Chis Truncer (cc'd) is the primary developer for Veil-Evasion, and showed an exemplary response to the vulnerability reporting.  CVEs for these issues have not been previously requested.  A combined proof of concept in Python 2.7 is attached.  This is my first request to this mailing list, so I apologize in advance for any misinterpretations of protocol.  Thank you, Brian Wallace  Content of type "text/html" skipped  View attachment "poc.py" of type "text/x-python" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      