  oss-security - Re: CVE Request: Linux kernel: remote buffer overflow in usbip            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 19 Apr From: Greg KH <greg@...ah.com> To: Marcus Meissner <meissner@...e.de>, 	Ignat Korchagin <ignat.korchagin@...il.com> Cc: OSS Security List <oss-security@...ts.openwall.com>, 	security@...nel.org Subject: Re: CVE Request: Linux kernel: remote buffer overflow in usbip  On Tue, Apr 19, at Marcus Meissner wrote: > Hi, >  > >  > commit > Author: Ignat Korchagin <ignat.korchagin@...il.com> > Date:   Thu Mar 17 >  >     USB: usbip: fix potential out-of-bounds write >  >     Fix potential out-of-bounds write to urb->transfer_buffer >     usbip handles network communication directly in the kernel. When receiving a >     packet from its peer, usbip code parses headers according to protocol. As >     part of this parsing urb->actual_length is filled. Since the input for >     urb->actual_length comes from the network, it should be treated as untrusted. >     Any entity controlling the network may put any value in the input and the >     preallocated urb->transfer_buffer may not be large enough to hold the data. >     Thus, the malicious entity is able to write arbitrary data to kernel memory. >  >     Signed-off-by: Ignat Korchagin <ignat.korchagin@...il.com> >     Signed-off-by: Greg Kroah-Hartman <gregkh@...uxfoundation.org> >  > diff --git a/drivers/usb/usbip/usbip_common.c b/drivers/usb/usbip/usbip_common.c > index > --- a/drivers/usb/usbip/usbip_common.c > +++ b/drivers/usb/usbip/usbip_common.c > @@ @@ int usbip_recv_xbuff(struct usbip_device *ud, struct urb *urb) >         if (!(size > 0)) >                 return 0; >  > +       if (size > urb->transfer_buffer_length) { > +               /* should not happen, probably malicious packet */ > +               if (ud->side == USBIP_STUB) { > +                       usbip_event_add(ud, SDEV_EVENT_ERROR_TCP); > +                       return 0; > +               } else { > +                       usbip_event_add(ud, VDEV_EVENT_ERROR_TCP); > +                       return -EPIPE; > +               } > +       } > + >         ret = usbip_recv(ud->tcp_socket, urb->transfer_buffer, size); >         if (ret != size) { >                 dev_err(&urb->dev->dev, "recv xbuf, %d\n", ret); >  > Our USB developer confirms: > > |The vulnerability is true. If an attacker can get a malicious package > |into the connection the kernel will accept all of the data in that > |package whether it fits into the buffer or not. > |You can scribble about 1k into RAM, albeit at an unpredictable location.  I think Ignat already asked for a CVE for this through some other channel, and was going to announce it in some manner.  Ignat, did you do that?  thanks,  greg k-h  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      