  oss-security - Re: subuid security patches for shadow package            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 20 Jul (EDT) From: cve-assign@...re.org To: krahmer@...e.com Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: subuid security patches for shadow package  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > 1) Removing getlogin() to find out about users. >    It relies on utmp, which is not a trusted base of info (group writable).  Possibly the concern is that the utmp entry might have a spoofed username associated with the correct uid, and the attacker's goal is to obtain unauthorized group privileges. We have not studied the code in detail, but seems to have this sequence of calls:    pwd = get_my_pwent ();      [ note that this calls getlogin ]   grp = xgetgrgid (pwd->pw_gid);   gid = grp->gr_gid;   setgid (gid)  Use for the potentially unsafe use of getlogin.   >    there was a *int overflow*, which can be >    tested via 'newuidmap $$ 0 -1' (given that is listed as allowed) >    which produces no error but tries to write large "count" values to the uid_map >    file  >> After checking some kernels, it looks like this int wrap is exploitable as a LPE, >> as kernel is using 32bit uid's that are truncated from unsigned longs (64bit on x64) >> as returned by simple_strtoul() [map_write()]. So newuidmap and kernel have an entire >> different view on the upper and lower bounds, making newuidmap overflow (and pass) >> and still being in bounds inside the kernel. >>  >> So everyone shipping newuidmap as mode should fix it. :)  has:    suidubins = chage chfn chsh expiry gpasswd newgrp passwd newuidmap newgidmap  Use for the incorrect integer handling.   > From: ebiederm@...ssion.com (Eric W. Biederman) >  > Adding the shadow-development list, so there is a chance other people > familiar with the code can comment as well.  There are no replies yet after the post.  - --  CVE Assignment Team M/S Burlington Road, Bedford, MA USA [ A PGP key is available for encrypted communications at   http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  =+wdJ -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      