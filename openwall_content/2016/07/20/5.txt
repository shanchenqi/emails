  oss-security - Re: libupnp write files via POST            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Wed, 20 Jul (EDT) From: cve-assign@...re.org To: hanno@...eck.de Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: libupnp write files via POST  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > >  This can have a CVE ID: from our perspective the product is exposing unnecessary functionality, end users typically would consider the functionality unwanted and unsafe, the behavior violates the expectations of users familiar with similar products, the behavior isn't (as far as we know) required or suggested by any protocol or specification, and the behavior is implemented in a confusing way.  Use  Another observation is that it is not necessary for a user to write a libupnp-based application in order to encounter the vulnerability. (One might conceivably argue that, if exploitation required a custom application, the application author would be responsible for verifying that the code met expectations as far as whether a web server should exist and what types of read and write access should be allowed.) Instead, anyone can build the unpatched code from GitHub, go to the upnp/sample directory, and execute the tv_device script with no arguments. This apparently starts the web server on port by default. The web server accepts unauthenticated POST requests and stores the data to the client-specified filename within the upnp/sample/web directory. It also accepts unauthenticated GET requests for those files.  Common user expectations, based on experience with any popular general-purpose web server, are that defaulting to unauthenticated POSTs with readable uploads should not happen unless specifically called out in the documentation. This is the main reason for the CVE. Also, if the POST behavior were important, the web server should at least follow RFC section 9.5 and return a status when it creates a file in the upnp/sample/web directory. It currently returns which makes it somewhat harder for a person auditing an application to notice that the POSTs are actually successful.  - --  CVE Assignment Team M/S Burlington Road, Bedford, MA USA [ A PGP key is available for encrypted communications at   http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  xrXrtoajVVmMZ/mUOlLC =Aj9J -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      