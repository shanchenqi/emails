  oss-security - SQLi and Reflected XSS in Huge IT catalog extension for Joomla            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 26 Jul From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: SQLi and Reflected XSS in Huge IT catalog extension for Joomla  Title: SQLi and XSS in Huge IT catalog extension for Joomla Author: Larry W. Cashdollar, @_larry0 Date: Download Site: http://extensions.joomla.org/extensions/extension/e-commerce/shopping-cart/catalog Vendor: www.huge-it.com Vendor Notified: fixed in Vendor Contact: info@...e-it.com Description: This extension is designed to help you display the products in the most attractive way. Joomla Catalog Extension has a stylish design with convenient construction for displaying the product to the customers. Vulnerability: The attacker must be logged in with at least manager level access or access to the administrative panel to exploit this vulnerability.  Reflected XSS in file ./views/submissions/tmpl/default.php via message_id parameter:    <input type="hidden" id="message_id" value ="<?php echo $_GET['message_id']; ?>" />   SQL Injection   in file ./models/submissions.php via id parameter 59-        $query = $db->getQuery(true); 60-        $id = JRequest::getVar('message_id'); 61-        $this-> updateReadInfo($id); 62:        $query->select('*,#__huge_it_catalog_products.name as product_name, #__huge_it_catalog_asc_seller.id as  message_id'); 63-        $query->from('#__huge_it_catalog_asc_seller,#__huge_it_catalog_products'); 64-        $query->where('#__huge_it_catalog_asc_seller.product_id = #__huge_it_catalog_products.id and #__huge_it_catalog_asc_seller.id = "'.$id.'"'); 65-        $db->setQuery($query); in file ./models/comment.php via projectId parameter:  56-        $db = JFactory::getDBO(); 57-       $id = JRequest::getVar('projectId');  58-       $query = $db->getQuery(true); 59:        $query->select('*,#__huge_it_catalog_reviews.id as comId, #__huge_it_catalog_reviews.name as author_name, #__huge_it_catalog_products.name as product_name') 60-             ->from('#__huge_it_catalog_reviews, #__huge_it_catalog_products') 61-         ->where('#__huge_it_catalog_reviews.product_id = #__huge_it_catalog_products.id and #__huge_it_catalog_products.id = "'.$id.'"'); 62-        $db->setQuery($query);  in file ./models/rating.php via projectId parameter:  55-        return $results; 56-    }  57-     58-    public  function getRatingById() { 59-        $db = JFactory::getDBO(); 60:       $id = JRequest::getVar('projectId');  61-       $query = $db->getQuery(true); 62-        $query->select('*,#__huge_it_catalog_rating.id as ratId') 63-             ->from('#__huge_it_catalog_rating, #__huge_it_catalog_products') 64-         ->where('#__huge_it_catalog_rating.prod_id = #__huge_it_catalog_products.id and #__huge_it_catalog_products.id = "'.$id.'"'); 65-        $db->setQuery($query);  in file ./models/catalog.php via id parameter:  45:        $id_cat = JRequest::getVar('id'); 46-        $query = $db->getQuery(true); 47-        $query->select('#__huge_it_catalog_products.name as name,' 48-                . '#__huge_it_catalog_products.id ,' 49-                . '#__huge_it_catalogs.name as catName,' 50-                . 'catalog_id,#__huge_it_catalog_products.description as productDescription,#__huge_it_catalog_products.parameters as productParameters,#__huge_it_catalogs.description,image_url,sl_url,sl_type,price,market_price,single_product_url_type,single_product_url_type,#__huge_it_catalog_products.link_target as productLinkTarget,#__huge_it_catalog_products.ordering,#__huge_it_catalog_products.published,published_in_sl_width'); 51-        $query->from(array('#__huge_it_catalogs' => '#__huge_it_catalogs', '#__huge_it_catalog_products' => '#__huge_it_catalog_products')); 52-        $query->where('#__huge_it_catalogs.id = catalog_id')->where('catalog_id=' . $id_cat); 53-        $query->order('ordering asc'); 54-        55-        $db->setQuery($query); -- 63:        $id_cat = JRequest::getVar('id'); 64-        $query = $db->getQuery(true); 65-        $query->select('*'); 66-        $query->from('#__huge_it_catalog_products'); 67-        $query->where('catalog_id=' . $id_cat); 68-        $db->setQuery($query); 69-        $results = $db->loadObjectList(); 70-        return $results; 71-    } 72- 73-    public function save($data) { --        $id_cat = JRequest::getVar('id');        $query = $db->getQuery(true);        $query->update('#__huge_it_catalogs')->set('name ="' . $name . '"')->where('id="' . $id_cat . '"');        $db->setQuery($query);        $db->execute();    }    function selectStyle() {        $db = JFactory::getDBO();        $data = JRequest::get('post');          $name = $data['name']; --        $id_cat = JRequest::getVar('id');        $query = $db->getQuery(true);                $query->update('#__huge_it_catalogs')              ->set('name ="' . $name . '"')              ->set('catalog_list_effects_s ="'.$catalog_effects_list.'"')              ->set('pagination_type ="'.$pagination_type.'"')              ->set('count_into_page ="'.$count_into_page.'"')              ->set('categories ="'.$allCategories.'"')              ->where('id="' . $id_cat . '"');        $db->setQuery($query); --  via removeslide parameter:         $id_cat = JRequest::getVar('removeslide');        $id = JRequest::getVar('id');        $db = JFactory::getDBO();        $query = $db->getQuery(true);        $query->delete('#__huge_it_catalog_products')->where('id =' . $id_cat);        $db->setQuery($query);        $db->execute();  XSS SQLi  Exploit Code: 	• SQLi: 	•   	• $ sqlmap  --load-cookies=cookies.txt -u --dbms mysql  	•   	• XSS: 	•   	• Advisory: Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      