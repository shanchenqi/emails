  oss-security - Re: subuid security patches for shadow package            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 19 Jul From: Sebastian Krahmer <krahmer@...e.com> To: oss-security@...ts.openwall.com Cc: ebiederm@...ssion.com Subject: Re: subuid security patches for shadow package  On Tue, Jul 19, at Sebastian Krahmer wrote: > Hi >  > The shadow package contains newuidmap and newgidmap suid > binaries in order to allow users to take advantage of the > userns feature of uid-mappings. >  > I added patches here: >  > >  > they consist of: >  > 1) Removing getlogin() to find out about users. >    It relies on utmp, which is not a trusted base of info (group writable). >  > 2) Cleaning up UID retrieval and computation. The 'long long' code was >    totally unclear to me, as the numbers are converted to ulong right >    afterwards anyway. Additionally there was a *int overflow*, which can be >    tested via 'newuidmap $$ 0 -1' (given that is listed as allowed) >    which produces no error but tries to write large "count" values to the uid_map >    file. Kernel may check for overflows itself, but it should not be allowed >    by a suid binary to be written in the first place.  After checking some kernels, it looks like this int wrap is exploitable as a LPE, as kernel is using 32bit uid's that are truncated from unsigned longs (64bit on x64) as returned by simple_strtoul() [map_write()]. So newuidmap and kernel have an entire different view on the upper and lower bounds, making newuidmap overflow (and pass) and still being in bounds inside the kernel.  Maybe it would be wise to align integer widths of kernel and the userspace tools.  So everyone shipping newuidmap as mode should fix it. :)  Sebastian  --   ~ perl self.pl ~ ~ krahmer@...e.com - SuSE Security Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      