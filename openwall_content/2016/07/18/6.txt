  oss-security - Re: A CGI application vulnerability for PHP, Go,  Python and others            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 18 Jul From: Kurt Seifried <kseifried@...hat.com> To: oss-security <oss-security@...ts.openwall.com> Subject: Re: A CGI application vulnerability for PHP, Go,  Python and others  Also the current list of CVEs is:  PHP Go Apache HTTPD mod_fcgi Nginx cgi script Tomcat Erlang HTTP Server YAWS HHVM FastCGI Python CGIHandler Python twisted  there will of course be more. From my Google doc:  CVE counting for httpoxy  This document essentially discusses the CVE counting strategy for the httpoxy issue.  Essentially there are two main cases where a CVE is assigned for the httpoxy issue:      1.     A web server, programming language or framework (and in some limited    situations the application itself) sets the environmental variable    HTTP_PROXY from the user supplied Proxy header in the web request, or sets    a similarly used variable (essentially when the request header turns from    harmless data into a potentially harmful environmental variable)    2.     A web application makes use of HTTP_PROXY or similar variable unsafely    (e.g. fails to check the request type) resulting in an attacker controlled    proxy being used (essentially when HTTP_PROXY is actually used unsafely)   Some  examples of situations where a web server, programming language or framework would qualify for a CVE regarding httpoxy:      1.     PHP passes the proxy as HTTP_PROXY, as such applications commonly import    and use HTTP_*    2.     mod_cgi/fast_cgi and related CGI programs set HTTP_PROXY based on the    request header    3.     An application uses an HTTP request library that trusts HTTP_PROXY    resulting in attacker control of requests   Some  examples of situations where a web server, programming language or framework would NOT qualify for a CVE regarding httpoxy:      1.     A web server such as Apache passes the proxy header to a programming    language or framework    2.     A library trusts HTTP_PROXY, the library does not earn a CVE, the    application using it would qualify for a CVE, and generally speaking    whatever set the HTTP_PROXY variable would also earn a CVE       -- Kurt Seifried -- Red Hat -- Product Security -- Cloud PGP A90B 66BF Red Hat Product Security contact: secalert@...hat.com   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      