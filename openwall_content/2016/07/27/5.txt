  oss-security - CVE Request: DBD-mysql: use-after-free in mysql_dr_error            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 27 Jul From: Salvatore Bonaccorso <carnil@...ian.org> To: OSS Security Mailinglist <oss-security@...ts.openwall.com> Subject: CVE Request: DBD-mysql: use-after-free in mysql_dr_error  Hi  While looking at the fix for in DBD-mysql, I noticed upstream ticket at:   > On exceptions (usually dr_error) valgrind and -faddress-sanitizer find > use-after-free in mysql_dr_error at sv_setpv(errstr, what) as errstr > and errstate below was already freed. >  > I'm working on a patch. >  > repro with asan or valgrind, eg like this: >  > Makefile --testuser=nosuchuser > make > valgrind -Iblib/arch -Iblib/lib t/30insertfetch.t  >  > valgrind sample: >  > this one accesses MYSQL* sock in mysql_db_login after being freed in > mysql_dr_connect >  > Invalid read of size 4 >    at mysql_errno (in >    by mysql_db_login >    by XS_DBD__mysql__db__login >    by Perl_pp_entersub >    by Perl_runops_debug >    by Perl_call_sv >    by XS_DBI_dispatch >    by Perl_pp_entersub >    by Perl_runops_debug >    by S_run_body >    by perl_run >    by main >  Address is bytes inside a block of size free'd >    at free >    by Perl_safesysfree >    by mysql_dr_connect >    by my_login >    by mysql_db_login >    by XS_DBD__mysql__db__login >    by Perl_pp_entersub >    by Perl_runops_debug >    by Perl_call_sv >    by XS_DBI_dispatch >    by Perl_pp_entersub >    by Perl_runops_debug >  >  > this one accesses imp_xxh->com.attr.Errstr in mysql_db_login after > being freed in mysql_dr_connect. >  > Invalid read of size 1 >    at strlen >    by Perl_sv_setpv >    by mysql_dr_error >    by mysql_db_login >    by XS_DBD__mysql__db__login >    by Perl_pp_entersub >    by Perl_runops_debug >    by Perl_call_sv >    by XS_DBI_dispatch >    by Perl_pp_entersub >    by Perl_runops_debug >    by S_run_body >  Address is bytes inside a block of size free'd >    at free >    by Perl_safesysfree >    by mysql_dr_connect >    by my_login >    by mysql_db_login >    by XS_DBD__mysql__db__login >    by Perl_pp_entersub >    by Perl_runops_debug >    by Perl_call_sv >    by XS_DBI_dispatch >    by Perl_pp_entersub >    by Perl_runops_debug > ... >  >  > asan sample: >  > ================================================================= > AddressSanitizer: heap-use-after-free on address at pc bp sp > READ of size 69 at thread T0 >     #0 in __interceptor_strlen >     #1 in Perl_sv_setpv >     #2 in mysql_dr_error >     #3 in mysql_db_login >     #4 in XS_DBD__mysql__db__login >     #5 in Perl_pp_entersub >     #6 in Perl_runops_debug >     #7 in Perl_call_sv >     #8 in XS_DBI_dispatch >     #9 in Perl_pp_entersub >     #10 in Perl_runops_debug >     #11 in S_run_body >     #12 in perl_run >     #13 in main >     #14 >     #15 in _start >  > is located bytes inside of region > freed by thread T0 here: >     #0 in __interceptor_free >  > previously allocated by thread T0 here: >     #0 in calloc >  > SUMMARY: AddressSanitizer: heap-use-after-free ??:0 __interceptor_strlen > Shadow bytes around the buggy address: >   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 >   00 00 00 00 02 fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd > fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd >   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd > Shadow byte legend (one shadow byte represents 8 application bytes): >   Addressable:           00 >   Partially addressable: 01 02 03 04 05 06 07  >   Heap left redzone:     fa >   Heap right redzone:    fb >   Freed heap region:     fd >   Stack left redzone:    f1 >   Stack mid redzone:     f2 >   Stack right redzone:   f3 >   Stack partial redzone: f4 >   Stack after return:    f5 >   Stack use after scope: f8 >   Global redzone:        f9 >   Global init order:     f6 >   Poisoned by user:      f7 >   ASan internal:         fe >  addressed with commit:   and included in  Can this get a separate CVE?  Regards, Salvatore  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      