  oss-security - Re: Multiple Bugs in OpenBSD Kernel            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Sun, 17 Jul (EDT) From: cve-assign@...re.org To: Jesse.Hertz@...group.trust Cc: cve-assign@...re.org, oss-security@...ts.openwall.com, na-disclosure@...group.trust Subject: Re: Multiple Bugs in OpenBSD Kernel  -----BEGIN PGP SIGNED MESSAGE----- Hash:  > mmap_panic: Malicious calls to mmap() can trigger an allocation panic > or trigger memory corruption.  >  >> When a user provides the __MAP_NOFAULT flag to mmap, the >> kernel calls amap_alloc() which calls malloc() with a size derived  >> from the user-passed size. This is called through >> sys_mmap(), uvm_mmapfile() and uvm_map() without ever >> validating the user-provided size. This can result in a panic >> in malloc. For example when requesting a mapping of >> bytes, amap_alloc() will compute that it needs >> slots and amap_alloc1() will compute that it needs >> total slots and will call malloc() to allocate >> bytes resulting in a panic of >> "panic: malloc: allocation too large, type = 98, size =  Use for this general "too large" issue.   >> Besides causing a panic, the amap_alloc() code can also miscalculate  >> the allocation size which would cause an undersized allocation in  >> amap_alloc1(). This could lead to memory corruption later. There are  >> two causes.  >> First amap_alloc() computes slots from a size_t size into >> an integer slots variable: >> If the original size is larger or larger it will >> result in a truncated value of slots, resulting in an undersized amap.  Use for this first "miscalculate" issue.   >> The second problem arises in amap_alloc1(): >> The number of slots is rounded up so that the slot entries fill >> full pages. This rounding up happens in the integer "totalslots" >> variable, and can overflow the original "slots" value. This >> can happen when requesting an allocation of size >> for example. In this case amap_alloc() computes that >> 0xffff.fff0 slots are needed and amap_alloc1() computes >> that zero totalslots are needed, and allocates an amap of zero >> bytes. If the amap->am_slots, amap->am_bckptr or amap->am_anon >> fields are later accessed, it can lead to out-of-memory >> reads and writes on the kernel allocation heap.  Use for this second "miscalculate" issue.   > kevent_panic: Any user can panic the kernel with the kevent system > call.  >  >> >>  >> If the original ident value is overly large, the value of "size" will >> be correspondingly large, and can trigger an assertion in mallocarray(). >> This can be abused by any user to cause a kernel panic.  Use   > thrsleep_panic: Any user can panic the kernel with the __thrsleep > system call.  >  >> >>  >>         if (timespeccmp(tsp, &now, <)) >>         ... >>         if (to_ticks > INT_MAX) >>             to_ticks = INT_MAX; >>  >> This validation is insufficient. Some values of the user-provided >> tsp can be in the future and still lead to a negative to_ticks value >> after conversion. This condition triggers a panic in timeout_add   Use   > thrsigdivert_panic: Any user can panic the kernel with the > __thrsigdivert system call.  >  >>         if (ts.tv_nsec < 0 || ts.tv_nsec >= >>             timeinvalid = 1; >>         ... >>             if (to_ticks > INT_MAX) >>                 to_ticks = INT_MAX; >>  >>  >> This validation is insufficient. Some values of the user-provided >> ts can lead to a negative to_ticks value after conversion. This  >> condition triggers a panic in timeout_add  Use   > ufs_getdents_panic: Any user can panic the kernel with the getdents > system call.  >  >> >>  >> By providing an overly >> large size, a caller can trigger a panic in the kernel >> of "malloc: allocation too large" or "out of space in kmem_map".  Use   > mount_panic: Root users, or users on systems with kern.usermount set > to true, can trigger a kernel panic when mounting a tmpfs filesystem.  >  >> >>  >> The tmpfs filesystem allows the mounting user to specify a >> username, a groupname or a device name for the root node of >> the filesystem. A user that specifies a value of VNOVAL for >> any of these fields will trigger an assert in tmpfs_alloc_node  Use   > unmount_panic: Root users, or users on systems with kern.usermount set > to true, can trigger a kernel panic when unmounting a filesystem.  >  >> >>  >> When the unmount system call is called with the MNT_DOOMED flag >> set, it does not sync vnodes. This can lead to a condition where >> there is still a vnode on the mnt_vnodelist, which triggers a >> panic in dounmount  Use  - --  CVE Assignment Team M/S Burlington Road, Bedford, MA USA [ A PGP key is available for encrypted communications at   http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG v1  eNbK0SxfchFOCL0QvP/D =gRCL -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      