  oss-security - WordPress (all versions): SPOF, RCE, and Negligence            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 21 Nov From: Scott Arciszewski <scott@...agonie.com> To: oss-security@...ts.openwall.com Subject: WordPress (all versions): SPOF, RCE, and Negligence  This is the function that fetches downloads from the WordPress update servers:  The only verification it offers is an MD5 checksum, which is sent by the server that also serves the file:  At no point lower in the automatic update process is a cryptographic signature verified. The update server is trusted explicitly and implicitly by every WordPress website online.  WordPress powers an estimated 26% of websites on the Internet.  Consequently, the WordPress update server is one of the largest single points of failure (SPOF) on the Internet. If you manage to hack their infrastructure, you can push a false update to millions of WordPress blogs and get reliable remote code execution everywhere.  They are aware of this issue, and have been for years:  Additionally, PHP before had terrible SSL/TLS support. It may also be possible to get targeted RCE out of a MitM condition due to their stubborn insistence on supporting PHP I need to do more research here.  The WordPress culture, for those who are not aware, prioritizes higher adoption rates over better security. They see backwards compatibility as a usability problem more than a liability.  The WordPress team also promotes the use of the misnomer "responsible disclosure" over the more accurate "coordinated disclosure", and refuse to entertain suggestions to improve their vernacular.  In short, WordPress is semi-toxic towards improving their own security-- mostly out of negligence and stubbornness rather than outright hostility (see: OpenCart).  I don't believe there's much chance of fixing this, due to political problems rather than technological problems. The first step towards a reliable solution would look like this:  1. Up the minimum PHP version to at least 2. Use openssl_sign() and openssl_verify() with an RSA keypair maintained by their team.  A total solution would incorporate all of the elements listed here for both core updates and theme/plugin updates:  Should anyone wish to endure the steep uphill battle to try to get WordPress to fix this problem _before_ we see headlines titled "WormPress: How your blog was hacked" in the news, godspeed.  Scott Arciszewski Chief Development Officer Paragon Initiative Enterprises <https://paragonie.com>  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      