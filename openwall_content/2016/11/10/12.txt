  oss-security - CVE request: Heap read out-of-bounds parsing a Javascript file with  the last revision of JavaScript Core            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 10 Nov From: Gustavo Grieco <gustavo.grieco@...il.com> To: oss-security@...ts.openwall.com Subject: CVE request: Heap read out-of-bounds parsing a Javascript file with  the last revision of JavaScript Core  Hi,  We recently found a read out-of-bounds parsing JavaScript code in the last revision of WebKit ( I tested this issue in ArchLinux but other configurations could be affected. To reproduce:  1. Recompile jsc with ASAN support. 2. Execute:  $ ./jsc ... ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 16 at thread T2 while reporting a bug found another one. Ignoring.     #0 in WTF::(anonymous namespace)::lockHashtable()     #1 in WTF::ParkingLot::parkConditionallyImpl(void const*, WTF::ScopedLambda<bool ()> const&, WTF::ScopedLambda<void ()> const&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, > >)     #2 in std::_Function_handler<void (), WTF::AutomaticThread::start(WTF::Locker<WTF::LockBase> const&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)     #3 in WTF::threadEntryPoint(void*)     #4 in WTF::wtfThreadEntryPoint(void*)     #5 in start_thread     #6 in __GI___clone  is located 0 bytes to the right of 32-byte region allocated by thread T2 here:     #0 in __interceptor_malloc /build/gcc-multilib/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:62     #1 in bmalloc::Allocator::allocateSlowCase(unsigned long)  Thread T2 created by T0 here:     #0 in __interceptor_pthread_create     #1 in WTF::createThreadInternal(void (*)(void*), void*, char const*)  SUMMARY: AddressSanitizer: heap-buffer-overflow in WTF::(anonymous namespace)::lockHashtable() Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00 fa fd fd fd fd   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  I'm forwarding this issue since i receive no answer from the Webkit developers in more than 3 weeks. The original bug report (private) is here:   The reproducer are available upon request. Please assign a CVE if necessary.  This issue was found using QuickFuzz.  Regards, Gustavo.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      