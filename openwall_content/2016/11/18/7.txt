  oss-security - [Bug report] Vulnerability In libbpg-2            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 18 Nov From: "wykcomputer@...il.com" <wykcomputer@...il.com> To: oss-security <oss-security@...ts.openwall.com> Subject: [Bug report] Vulnerability In libbpg-2  Hello, I find a out-of-bounds write issue in maybe other early versions), which can lead to memory corruption or even remote code execution. I have reported it to the author of libbpg, but no responding, so I report it to you.  Run ./bpgenc PoC.jpg out.bpg, get the crash as follows. Crash Log: Program received signal SIGSEGV, Segmentation fault. in gray8_to_gray y_ptr=0x0,      <repeats 56 times>, 'Y' <repeats 24 times>, 'w' <repeats 64 times>, <repeats 23 times>..., incr=1) at         y_ptr[i] = (c * g + rnd) >> shift; (gdb) bt #0  in gray8_to_gray y_ptr=0x0,      <repeats 56 times>, 'Y' <repeats 24 times>, 'w' <repeats 64 times>, <repeats 23 times>..., incr=1) at #1  in read_jpeg out_bit_depth=8) at #2  in load_image color_space=BPG_CS_YCbCr, bit_depth=8, limited_range=0,      premultiplied_alpha=0) at #3  in main (argc=4, at  read_jpeg function in bpgenc.c, img->data[i] = malloc(linesize * h1), linesize * h1 maybe integer over-flow(larger than 0xffffffff), this lead to malloc a smaller memory than expected, when execute to gray8_to_gray, maybe cause out-of-bounds write.  Image *read_jpeg(BPGMetaData **pmd, FILE *f, int out_bit_depth) //... img = image_alloc(w, h, format, has_alpha, color_space, out_bit_depth); | |->for(i = 0; i < c_count; i++) { get_plane_res(img, &w1, &h1, i); /* multiple of 16 pixels to add borders */ w1 = (w1 + (W_PAD - 1)) & ~(W_PAD - 1); h1 = (h1 + (W_PAD - 1)) & ~(W_PAD - 1);  linesize = w1 << img->pixel_shift; img->data[i] = malloc(linesize * h1);//maybe integer overflow  //... ptr = (PIXEL *)(img->data[idx] +                                      img->linesize[idx] * (y1 + i));         gray8_to_gray(cvt, ptr, rows[c_idx][i], w1, 1); | |->y_ptr[i] = (c * g + rnd) >> shift;  Fix: To check the integer overflow issue. Such as, linesize = w1 << img->pixel_shift; + uint64_t tmp = (uint64_t)linesize * h1; + if(tmp > 0xffffffff) return NULL; img->data[i] = malloc(linesize * h1);  Thank you for your reading!   wykcomputer@...il.com  Content of type "text/html" skipped  Download attachment "PoC.jpg" of type "application/octet-stream" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      