  oss-security - OpenSSL Security Advisory [3rd May            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 3 May From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: OpenSSL Security Advisory [3rd May  Now we need to figure out which of these affect latest OpenSSL even if unsupported.  I guess "Memory corruption in the ASN.1 encoder was fixed in branch in as well?  I guess "Padding oracle in AES-NI CBC MAC check doesn't affect since it lacks AES-NI support?  (I haven't confirmed either yet.)  ----- Forwarded message from OpenSSL <openssl@...nssl.org> -----  Date: Tue, 3 May From: OpenSSL <openssl@...nssl.org> To: OpenSSL Developer ML <openssl-dev@...nssl.org>,  OpenSSL User Support ML <openssl-users@...nssl.org>,  OpenSSL Announce ML <openssl-announce@...nssl.org> Subject: [openssl-announce] OpenSSL Security Advisory  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1   OpenSSL Security Advisory [3rd May ========================================   Memory corruption in the ASN.1 encoder ======================================================   Severity: High   This issue affected versions of OpenSSL prior to April The bug causing the vulnerability was fixed on April 18th and released as part of the June 11th security releases. The security impact of the bug was not known at the time.   In previous versions of OpenSSL, ASN.1 encoding the value zero represented as a negative integer can cause a buffer underflow with an out-of-bounds write in i2c_ASN1_INTEGER. The ASN.1 parser does not normally create "negative zeroes" when parsing ASN.1 input, and therefore, an attacker cannot trigger this bug.   However, a second, independent bug revealed that the ASN.1 parser (specifically, d2i_ASN1_TYPE) can misinterpret a large universal tag as a negative zero value. Large universal tags are not present in any common ASN.1 structures (such as but are accepted as part of ANY structures.   Therefore, if an application deserializes untrusted ASN.1 structures containing an ANY field, and later reserializes them, an attacker may be able to trigger an out-of-bounds write. This has been shown to cause memory corruption that is potentially exploitable with some malloc implementations.   Applications that parse and re-encode certificates are known to be vulnerable. Applications that verify RSA signatures on certificates may also be vulnerable; however, only certificates with valid signatures trigger ASN.1 re-encoding and hence the bug. Specifically, since OpenSSL's default TLS chain verification code verifies the certificate chain from root to leaf, TLS handshakes could only be targeted with valid certificates issued by trusted Certification Authorities.   OpenSSL users should upgrade to OpenSSL users should upgrade to   This vulnerability is a combination of two bugs, neither of which individually has security impact. The first bug (mishandling of negative zero integers) was reported to OpenSSL by Huzaifa Sidhpurwala (Red Hat) and independently by Hanno B??ck in April The second issue (mishandling of large universal tags) was found using libFuzzer, and reported on the public issue tracker on March 1st The fact that these two issues combined present a security vulnerability was reported by David Benjamin (Google) on March 31st The fixes were developed by Steve Henson of the OpenSSL development team, and David Benjamin.  The OpenSSL team would also like to thank Mark Brand and Ian Beer from the Google Project Zero team for their careful analysis of the impact.   The fix for the "negative zero" memory corruption bug can be identified by commits   and   Padding oracle in AES-NI CBC MAC check ======================================================   Severity: High   A MITM attacker can use a padding oracle attack to decrypt traffic when the connection uses an AES CBC cipher and the server support AES-NI.   This issue was introduced as part of the fix for Lucky 13 padding attack The padding check was rewritten to be in constant time by making sure that always the same bytes are read and compared against either the MAC or padding bytes. But it no longer checked that there was enough data to have both the MAC and padding bytes.   OpenSSL users should upgrade to OpenSSL users should upgrade to   This issue was reported to OpenSSL on 13th of April by Juraj Somorovsky using TLS-Attacker. The fix was developed by Kurt Roeckx of the OpenSSL development team.   EVP_EncodeUpdate overflow =========================================   Severity: Low   An overflow can occur in the EVP_EncodeUpdate() function which is used for Base64 encoding of binary data. If an attacker is able to supply very large amounts of input data then a length check can overflow resulting in a heap corruption.   Internally to OpenSSL the EVP_EncodeUpdate() function is primarly used by the PEM_write_bio* family of functions. These are mainly used within the OpenSSL command line applications. These internal uses are not considered vulnerable because all calls are bounded with length checks so no overflow is possible. User applications that call these APIs directly with large amounts of untrusted data may be vulnerable. (Note: Initial analysis suggested that the PEM_write_bio* were vulnerable, and this is reflected in the patch commit message. This is no longer believed to be the case).   OpenSSL users should upgrade to OpenSSL users should upgrade to   This issue was reported to OpenSSL on 3rd March by Guido Vranken. The fix was developed by Matt Caswell of the OpenSSL development team.   EVP_EncryptUpdate overflow ==========================================   Severity: Low   An overflow can occur in the EVP_EncryptUpdate() function. If an attacker is able to supply very large amounts of input data after a previous call to EVP_EncryptUpdate() with a partial block then a length check can overflow resulting in a heap corruption. Following an analysis of all OpenSSL internal usage of the EVP_EncryptUpdate() function all usage is one of two forms. The first form is where the EVP_EncryptUpdate() call is known to be the first called function after an EVP_EncryptInit(), and therefore that specific call must be safe. The second form is where the length passed to EVP_EncryptUpdate() can be seen from the code to be some small value and therefore there is no possibility of an overflow. Since all instances are one of these two forms, it is believed that there can be no overflows in internal code due to this problem. It should be noted that EVP_DecryptUpdate() can call EVP_EncryptUpdate() in certain code paths. Also EVP_CipherUpdate() is a synonym for EVP_EncryptUpdate(). All instances of these calls have also been analysed too and it is believed there are no instances in internal usage where an overflow could occur.   This could still represent a security issue for end user code that calls this function directly.   OpenSSL users should upgrade to OpenSSL users should upgrade to   This issue was reported to OpenSSL on 3rd March by Guido Vranken. The fix was developed by Matt Caswell of the OpenSSL development team.   ASN.1 BIO excessive memory allocation =====================================================   Severity: Low   When ASN.1 data is read from a BIO using functions such as d2i_CMS_bio() a short invalid encoding can casuse allocation of large amounts of memory potentially consuming excessive resources or exhausting memory.   Any application parsing untrusted data through d2i BIO functions is affected. The memory based functions such as are *not* affected. Since the memory based functions are used by the TLS library, TLS applications are not affected.   OpenSSL users should upgrade to OpenSSL users should upgrade to   This issue was reported to OpenSSL on 4th April by Brian Carpenter. The fix was developed by Stephen Henson of the OpenSSL development team.   EBCDIC overread ===============================   Severity: Low   ASN1 Strings that are over bytes can cause an overread in applications using the function on EBCDIC systems. This could result in arbitrary stack data being returned in the buffer.   OpenSSL users should upgrade to OpenSSL users should upgrade to   This issue was reported to OpenSSL on 5th March by Guido Vranken. The fix was developed by Matt Caswell of the OpenSSL development team.   Note ====   As per our previous announcements and our Release Strategy (https://www.openssl.org/policies/releasestrat.html), support for OpenSSL version will cease on 31st December No security updates for that version will be provided after that date. Users of are advised to upgrade.   Support for versions and ended on 31st December Those versions are no longer receiving security updates.   References ==========   URL for this Security Advisory:   Note: the online version of the advisory may be updated with additional details over time.   For details of OpenSSL severity classifications please see: https://www.openssl.org/policies/secpolicy.html -----BEGIN PGP SIGNATURE----- Version: GnuPG v1   =2Tl5 -----END PGP SIGNATURE----- --   openssl-announce mailing list To unsubscribe: https://mta.openssl.org/mailman/listinfo/openssl-announce  ----- End forwarded message -----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      