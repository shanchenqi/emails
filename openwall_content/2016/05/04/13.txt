  oss-security - Zabbix Agent mysql.size shell command injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 04 May From: Timo Juhani Lindfors <timo.lindfors@....fi> To: oss-security@...ts.openwall.com Subject: Zabbix Agent mysql.size shell command injection  Zabbix Agent mysql.size shell command injection --------------------------------------------------------------------  Affected products =================  At least Zabbix Agent from http://repo.zabbix.com/zabbix/3.0/debian is vulnerable. Other versions were not tested.  Background ==========  "Zabbix agent is deployed on a monitoring target to actively monitor  local resources and applications (hard drives, memory, processor  statistics etc).   The agent gathers operational information locally and reports data to  Zabbix server for further processing. In case of failures (such as a  hard disk running full or a crashed service process), Zabbix server  can actively alert the administrators of the particular machine that  reported the failure.   Zabbix agents are extremely efficient because of use of native system  calls for gathering statistical information."   -- https://www.zabbix.com/documentation/3.0/manual/concepts/agent  Description ===========  Zabbix agent listens on port for connections from the Zabbix server. The commands can be built-in or user-defined.  The mysql.size user parameter defined in /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf takes three input parameters and uses a shell script to generate an SQL query:  UserParameter=mysql.size[*],echo "select sum($(case "$3" in both|"") echo "data_length+index_length";; data|index) echo "$3_length";; free) echo "data_free";; esac)) from information_schema.tables$([[ "$1" = "all" || ! "$1" ]] || echo " where table_schema='$1'")$([[ "$2" = "all" || ! "$2" ]] || echo "and table_name='$2'");" | HOME=/var/lib/zabbix mysql -N  The code assumes that /bin/sh is bash that supports the [[ compound command. However, if /bin/sh is for example dash the statement  [[ "$1" = "all" || ! "$1" ]]  ends up executing the command "$1" with the argument "]]".  Exploit =======  Zabbix sanitizes the input and blocks many dangerous characters ("\\'\"`*?[]{}~$!&;()<>|#@\n"). Since we cannot use quotes we cannot give our shell commands any parameters which significantly reduces the impact of this vulnerability. If you find a way to execute arbitrary commands using this flaw I'd be really interested in the details. The following proof-of-concept shows how the vulnerability can be used escalate privileges locally:  $ echo -en '#!/bin/bash\necho "This code is running as $(id)" 1>&2\n' > /tmp/owned $ chmod a+rx /tmp/owned $ echo 'mysql.size[/tmp/owned,all,both]' | nc localhost | cat -A ZBXD^AM-^O^@^@^@^@^@^@^@sh: 1: [[: not found$ This code is running as sh: 1: [[: not found$ sh: 1: all: not found$  The exploit of course assumes that the Server line in the configuration includes If the agent is configured to accept connections only from the Zabbix server. In that case this issue can only be exploited from the server or by spoofing the IP address of the server (with for example ARP spoofing).  Since output of the command is piped to mysql it might be possible to also execute some SQL commands in the database.  Author ======  This issue was discovered by Timo Lindfors from Nixu Corporation.  Timeline ========  Issue discovered and reported internally for verification. Issue reported to vendor. Vendor acknowledges vulnerability and starts patching. Asked status update from vendor. Vendor responds that the issue is still being patched. CVE requested from MITRE. MITRE assigned for this vulnerability. Vendor published details in the issue tracker  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      