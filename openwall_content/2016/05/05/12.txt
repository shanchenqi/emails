  oss-security - Re: broken RSA keys            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 5 May From: Alexander Cherepanov <ch3root@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: broken RSA keys  On Solar Designer wrote: > When a modulus is (mangled?) such that each of its 64-bit limbs consists > of two matching 32-bit limbs, it is necessarily a multiple of > That's because it can be represented as: > > N = {an an ... a1 a1 a0 a0} = * {0 an ... 0 a1 0 a0} > > where the {...} notation means concatenated 32-bit limbs (or base > digits, if you will).  From this, it follows that pairwise GCDs of such > moduli will also have as a factor, and this is what ultimately > causes the 32-bit limb patterns in the GCDs.  As Alexander Cherepanov > correctly pointed out, even the seemingly slightly more complex 32-bit > limb patterns in the GCDs are merely indication of them being multiples > of  There's probably nothing else to see here. > > I made the mistake yesterday of looking at hex representations of the > posted shared factors without first looking at hex representations of > the moduli.  Now that I just did, I see that the example modulus I > posted does follow the pattern mentioned above, and which Stanislav > mentioned below.  All modulus from Phuctor that are divisible by indeed have the  form {an an ... a1 a1 a0 a0}. The following script would print moduli  that don't have this form but it prints nothing. The script:  perl -Mbigint -ln0e '    while (m{RSA Modulus .N.:.*?<td>(\d+)<.*?<td>(\d+)<}sg) { # extract  numbers      if ($1 % + 1) == 0) {           # is modulus a multiple of  + 1        $m = ($1+0)->as_hex;                 # modulus as hex        $m =~ s/^0x//;                       # remove hex prefix        $m = '0' x (-length($m) % 8) . $m;   # pad up to multiple of 8 digits        if ($m !~ {  # check          print $m        }      }    } ' phuctored  While at it, let's see which exponents we get after dividing by  (from those that are divisible):  $ perl -Mbigint -ln0e 'while (m{RSA Modulus  .N.:.*?<td>(\d+)<.*?<td>(\d+)<}sg) { print $2 / + 1) if $2 %  + 1) == 0 }' phuctored | sort | uniq -c        2 17        7 41       >> 4) One parsimonious explanation for (1) given (2) and (3) is that the >> 'mirrored' keys were generated by a malicious actor, > > Makes sense, but why would they similarly mangle the exponent as well? > As Alexander Cherepanov wrote, if I understand him correctly, there's > overlap between keys with such moduli and with such exponents.  That's right. My original one-liner ended with "grep -c '^0 0$'" which  counts cases where both remainders are 0. If you change it to "grep -c  '^0 '" it will count cases where modulus is divisible by  Similarly, "grep -c ' 0$'" will count exponents. Results from all three  commands are the same  --  Alexander Cherepanov  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      