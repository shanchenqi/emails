  oss-security - CVE Request: GraphicsMagick and ImageMagick popen() shell vulnerability  via filename            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sun, 29 May (CDT) From: Bob Friesenhahn <bfriesen@...ple.dallas.tx.us> To: oss security list <oss-security@...ts.openwall.com> Subject: CVE Request: GraphicsMagick and ImageMagick popen() shell vulnerability  via filename  All existing releases of GraphicsMagick and ImageMagick support a file open syntax where if the first character of the file specification is a '|', then the remainder of the filename is passed to the shell for execution using the POSIX popen(3C) function.  File opening is handled by an OpenBlob() function in the source file blob.c.  Unlike the vulnerability described by this functionality is supported by the core file opening function rather than a delegates subsystem usually used to execute external programs.  The funtionality can be demonstrated as follows:     % rm -f hello.txt    % convert '|echo Hello > hello.txt;' null:    % ls hello.txt    hello.txt  The same weakness in the native SVG readers may be used to provoke this problem.  This example returns a valid image given a known file  (but an actual file is not necessary):     <?xml version="1.0" standalone="no"?>    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"       <svg width="4in" height="3in" version="1.1"       <desc>Illustrates how a shell command may be embedded in a SVG.    </desc>    <image    xlink:href="|echo Hello > hello.txt; cat    <title>My image</title>    </image>    </svg>  Or in MVG:     push graphic-context    viewbox 0 0    image copy "|echo Hello > hello.txt; cat    pop graphic-context  Previously supplied recommended patches for GraphicsMagick do  successfully block this attack vector in SVG and MVG.  It is highly likely that there are many paths leading to a suitable  filename which may be executed outside of SVG and MVG since the  software is quite complex and powerful.  The examples above are not  meant to suggest that other avenues to the same weakness are not  available.  The simple solution to the problem is to disable the popen support  (HAVE_POPEN) in GraphicsMagick's magick/blob.c as is done by the  attached patch.  This issue was discovered by Bob Friesenhahn, of the GraphicsMagick project.  Bob --  Bob Friesenhahn bfriesen@...ple.dallas.tx.us, http://www.simplesystems.org/users/bfriesen/ GraphicsMagick Maintainer,    http://www.GraphicsMagick.org/ View attachment "disable-popen-filename.patch" of type "text/plain" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      