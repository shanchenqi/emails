  oss-security - CVE request:Heap overflow vulns in MuPDF            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 3 Aug From: redrain root <rootredrain@...il.com> To: oss-security@...ts.openwall.com, cve-assign@...re.org Subject: CVE request:Heap overflow vulns in MuPDF  Title: Heap overflow vulns in MuPDF Author: Yu Hong, yu.hong@...itin.com;Zheng Jihong,jihong.zheng@...itin.com Data: Dowload Site: http://ghostscript.com/download;http://mupdf.com/downloads/ Vendor: Ghostscript ---------------------------------------------------------- Vulnerability: Recently,I found a heap overflow vulnerability that cause this crash . I thought it a dangerous vulnerability because there are so many function point in the heap and the program have important the function "system".  The location of this vulnerability is at "pdf_load_mesh_params" function,at  "source/pdf/pdf-shade.c" .  obj = pdf_dict_get(ctx, dict, PDF_NAME_Decode); if (pdf_array_len(ctx, obj) >= 6) { n = (pdf_array_len(ctx, obj) - 4) / 2; shade->u.m.x0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 0)); shade->u.m.x1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 1)); shade->u.m.y0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 2)); shade->u.m.y1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 3)); for (i = 0; i < n; i++) { shade->u.m.c0[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 4 + i * 2)); shade->u.m.c1[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 5 + i * 2)); } }    the length of array return from "pdf_array_len"  not be checked. But the max size of "shade->u.m.C0/C1" is defined as a macro(32 as default). So if I make a pdf which have a large decode array. This code will cause a heap overflow .  And the overflow data could be control, And on the memory I overflow , I found a struct which full of function point. Maybe I can let it point to got table for a chance to call "system"  issue:  fix code:  PoC:  reference attachment  --from redrain çĽĺĽ˝  Content of type "text/html" skipped  Download attachment "p.pdf" of type "application/pdf" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      