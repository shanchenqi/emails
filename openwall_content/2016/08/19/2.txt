  oss-security - Doorkeeper gem does not revoke tokens & uses wrong  auth/auth method            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 18 Aug From: Justin Bull <me@...tinbull.ca> To: oss-security@...ts.openwall.com, bugtraq@...urityfocus.com,  fulldisclosure@...lists.org Subject: Doorkeeper gem does not revoke tokens & uses wrong  auth/auth method  Good evening everyone,  A security bulletin for all of you.  Software: -------- Doorkeeper (https://github.com/doorkeeper-gem/doorkeeper)  Description: ---------- Doorkeeper is an OAuth 2 provider for Rails written in Ruby.  Affected Versions: --------------- - (all versions but latest patch supporting token revocation)  Fixed Versions: ------------- or apply this commit[0]  Problem: -------- Doorkeeper failed to implement OAuth 2.0 Token Revocation[1] (RFC in the following ways:  1. Public clients making valid, unauthenticated calls to revoke a token would not have their token revoked 2. Requests were not properly authenticating the *client credentials* but were, instead, looking at the access token in a second location 3. Because of 2, the requests were also not authorizing confidential clients' ability to revoke a given token. It should only revoke tokens that belong to it.  (see for above statements)  The security implication is: OAuth 2.0 clients who "log out" a user expect to have the corresponding access & refresh tokens revoked, preventing an attacker who may have already hijacked the session from continuing to impersonate the victim. Because of the bug described above, this is not the case. As far as OWASP is concerned, this counts as broken authentication design[7].  MITRE has assigned due to the security issues raised. An attacker, thanks to 1, can replay a hijacked session after a victim logs out/revokes their token. Additionally, thanks to 2 & 3, an attacker via a compromised confidential client could "grief" other clients by revoking their tokens (albeit this is an exceptionally narrow attack with little value).  Unless I'm mistaken, all clients (public or confidential) that send well-formed, RFC compliant requests are affected by this bug.  Solution: -------  Modify the controller so if the request comes from a public client revoke the token without auth/auth. If the client is confidential, authenticate the client per RFC Sec. and authorize its ownership of the provided token. As per [0].  Timeline: -------- Bug discovered CVE requested, assigned, privately disclosed to maintainer, bugfix/patch authored Maintainer tweaked patch Jonathan Clem ( jclem) also discovered bug and publicly disclosed[6] Patched version is released  Acknowledgements: ----------------- Special thanks to the maintainer, Tute Costa (https://github.com/tute), for quickly collaborating with me to prepare & apply a patch.  References: ---------- [0]: [1]: [2]: [3]: [4]: [5]: [6]: [7]: [8]:    Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      