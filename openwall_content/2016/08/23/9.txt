  oss-security - cve request: overlayfs: Fix dentry reference leak            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 23 Aug (EDT) From: CAI Qian <caiqian@...hat.com> To: cve-assign@...re.org Cc: oss-security@...ts.openwall.com Subject: cve request: overlayfs: Fix dentry reference leak  === Description === commit upstream.  In ovl_copy_up_locked(), newdentry is leaked if the function exits through out_cleanup as this just to out after calling ovl_cleanup() - which doesn't actually release the ref on newdentry.  The out_cleanup segment should instead exit through out2 as certainly newdentry leaks - and possibly upper does also, though this isn't caught given the catch of newdentry.  Without this fix, something like the following is seen:  	BUG: Dentry still in use (1) [unmount of tmpfs tmpfs] 	BUG: Dentry  still in use (1) [unmount of tmpfs tmpfs]  when unmounting the upper layer after an error occurred in copyup.  An error can be induced by creating a big file in a lower layer with something like:  	dd if=/dev/zero of=/lower/a/bigfile count=1  to create a large file (4.1G).  Overlay an upper layer that is too small (on tmpfs might do) and then induce a copy up by opening it writably.  === POC Exploit === This can be reproduced in a DevOps environment when the docker runtime storage is on overlayfs over xfs as a local DoS. An attacker access to a developer account could run a crafted image from elsewhere like docker by creating a big file in the container filesystem and try to read it running by any user like below by forcing xfs_file_open() returns -EFBIG,  $ cat Dockerfile FROM fedora USER nobody RUN dd if=/dev/zero of=/home/nobody/bigfile count=1 ADD open /home/nobody CMD ["/home/nobody/open", "/home/nobody/bigfile"]  and possibly trigger kernel dentry leaks inside the container that will eventually running out of kernel resources for other developers. Hence, a local DoS.    CAI Qian  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      