  oss-security - Linux kernel: xfs: unprivileged user kernel oops            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 13 Sep From: Dave Chinner <david@...morbit.com> To: oss-security@...ts.openwall.com Cc: sandeen@...deen.net, darrick.wong@...cle.com, rwareing@...com Subject: Linux kernel: xfs: unprivileged user kernel oops   Summary -------  XFS mishandles a user settable inode flag in kernels prior to which can cause a local denial of service via a kernel oops.   Description -----------  Richard Wareing recently discovered that if the XFS kernel code is compiled with CONFIG_XFS_RT=y, the code mishandles FS_XFLAG_RTINHERIT and FS_XFLAG_REALTIME flags when the filesystem does not have a realtime device configured. When an fsync/fdatasync operation is run on an inode configured this way, we attempt to flush the cache of the non-existent realtime device and the kernel will oops.  While a user cannot set the FS_XFLAG_REALTIME directly on such a filesystem, we fail to prevent them from setting the FS_XFLAG_RTINHERIT on directories.  Hence files can inherit the problematic FS_XFLAG_REALTIME flag from their parent directory at create time. Setting the FS_XFLAG_RTINHERIT flag does not require special privileges, so any user with permission to write to a directory can set it.  Details of the oops signature and the trivial reproducer can be found in the commit message for the fix below.   Scope of vulnerable filesystems -------------------------------  This vulnerability was introduced in late by commit ("[XFS] write barrier support"). Hence XFS filesystems on all kernels since are vulnerable except for:  	* Kernels that are compiled with CONFIG_XFS_RT=n are 	  not vulnerable.  	* XFS filesystems with actual realtime devices are not 	  not vulnerable.   How to recognise a vulnerable system ------------------------------------  1. Search the boot log for the XFS initialisation message. If this message contains the world "realtime" then the kernel is vulnerable to the issue:  CONFIG_XFS_RT=y (vulnerable):  # dmesg |grep "XFS with" [    SGI XFS with ACLs, security attributes, realtime, debug enabled  CONFIG_XFS_RT=n (not vulnerable):  # dmesg |grep "XFS with" [    SGI XFS with ACLs, security attributes, debug enabled   2. If you have a vulnerable kernel, check each XFS filesystems to see if they use a realtime device.  This filesystem is not vulnerable as it has a realtime device configured:  # xfs_info /mnt |grep ^realtime realtime =/dev/ram0                 This filesystem is vulnerable if the kernel is vulnerable as it does not have a realtime device:  # xfs_info /mnt |grep ^realtime realtime =none                     blocks=0, rtextents=0   Mitigation ----------  Fixed upstream in commit below.  Backports to supported stable upstream kernels is already underway, so fixes will roll out with the next stable kernel releases.  Recompile the kernel with CONFIG_XFS_RT=n. This is recommended for users who cannot wait for upstream or distro kernel updates, cannot backport the fix themselves and do not use realtime devices.   Upstream commit ---------------  commit Author: Richard Wareing <rwareing@...com> Date:   Wed Sep 13      xfs: XFS_IS_REALTIME_INODE() should be false if no rt device present          If using a kernel with CONFIG_XFS_RT=y and we set the RHINHERIT flag on     a directory in a filesystem that does not have a realtime device and     create a new file in that directory, it gets marked as a real time file.     When data is written and a fsync is issued, the filesystem attempts to     flush a non-existent rt device during the fsync process.          This results in a crash dereferencing a null buftarg pointer in     xfs_blkdev_issue_flush():            BUG: unable to handle kernel NULL pointer dereference at       IP:       .....       Call Trace:                                                          Setting RT inode flags does not require special privileges so any     unprivileged user can cause this oops to occur.  To reproduce, confirm     kernel is compiled with CONFIG_XFS_RT=y and run:            # mkfs.xfs -f /dev/pmem0       # mount /dev/pmem0 /mnt/test       # mkdir /mnt/test/foo       # xfs_io -c 'chattr +t' /mnt/test/foo       # xfs_io -f -c 'pwrite 0 5m' -c fsync /mnt/test/foo/bar          Or just run xfstests with MKFS_OPTIONS="-d rtinherit=1" and wait.          Kernels built with CONFIG_XFS_RT=n are not exposed to this bug.          Fixes: ("[XFS] write barrier support")     Cc: <stable@...r.kernel.org>     Signed-off-by: Richard Wareing <rwareing@...com>     Signed-off-by: Dave Chinner <david@...morbit.com>     Signed-off-by: Linus Torvalds <torvalds@...ux-foundation.org>   Timeline:  - Discussion on xfs@...r.kernel.org (public list) hinted 	     at crash bug in realtime device support - Bug found and reported to XFS maintainers - Bug reported to security@...nel.org - Fix committed to kernel - Announcement to oss-security   -Dave. --  Dave Chinner david@...morbit.com  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      