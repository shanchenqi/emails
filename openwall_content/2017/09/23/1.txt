  oss-security - Re: tcprewrite Heap-Based Buffer Overflow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sat, 23 Sep From: Salvatore Bonaccorso <carnil@...ian.org> To: Hosein Askari <hosein.askari@....com> Cc: luciano@...ian.org, team@...urity.debian.org, 	oss-security@...ts.openwall.com Subject: Re: tcprewrite Heap-Based Buffer Overflow  Hi  On Thu, Sep 21, at Hosein Askari wrote: > I uploaded the file,please check out these links: > https://files.fm/u/dkrrjjj2 >  > http://www.filedropper.com/tcp_1 >  >  Thanks for providing the tcp.zip (it looks the mail did not make it to the list, the attachment was 6.4M so maybe it was rejected).  I'm attaching for list archiving purposed the base64 encoded tcp.pcap gzip compressed file.  Now looking at an ASAN build, on  ./src/tcprewrite --infile=/tmp/tcp.pcap --outfile=/tmp/output.pcap ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size at thread T0     #0      #1 in rewrite_packets     #2 in main     #3 in __libc_start_main     #4   is located 0 bytes to the right of region allocated by thread T0 here:     #0 in malloc     #1 in _our_safe_malloc src/common/utils.c:57     #2 in rewrite_packets     #3 in main     #4 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow Shadow bytes around the buggy address:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  In src/tcprewrite.c:  /**   * Main loop to rewrite packets  */ int rewrite_packets(tcpedit_t *tcpedit, pcap_t *pin, pcap_dumper_t *pout) {     tcpr_dir_t cache_result = TCPR_DIR_C2S;     /* default to primary */     struct pcap_pkthdr pkthdr, *pkthdr_ptr;     /* packet header */     const u_char *pktconst = NULL;              /* packet from libpcap */     u_char **pktdata = NULL;     static u_char *pktdata_buff;     static char *frag = NULL;     COUNTER packetnum = 0;     int rcode, frag_len, i;      pkthdr_ptr = &pkthdr;      if (pktdata_buff == NULL)         pktdata_buff = (u_char *)safe_malloc(MAXPACKET);     pktdata = &pktdata_buff;     if (frag == NULL)         frag = (char *)safe_malloc(MAXPACKET);      /* MAIN LOOP       * Keep sending while we have packets or until      * we've sent enough packets      */     while ((pktconst = pcap_next(pin, pkthdr_ptr)) != NULL) {         packetnum++;         dbgx(2, "packet " COUNTER_SPEC " caplen %d", packetnum, pkthdr.caplen);          /*           * copy over the packet so we can pad it out if necessary and          * because pcap_next() returns a const ptr          */         memcpy(*pktdata, pktconst, pkthdr.caplen); [...]  So in line MAXPACKET with originally   #define MAXPACKET         /* was linux loopback, but maybe something is bigger then                                       linux loopback */  and on line there is a memcpy to a destination which is too small.  Earlier there was which was assigned for:   with patch enforce-maxpacket.patch, wich addresses this issue as well.  I asked MITRE if should be rejected, since exists, or if the two should be kept, for different types of issues.   Regards, Salvatore  View attachment "tcp.pcap.gz.base64" of type "text/plain" bytes)  View attachment "enforce-maxpacket.patch" of type "text/x-diff" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      