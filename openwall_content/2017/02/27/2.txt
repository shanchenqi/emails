  oss-security - Linux: sctp: deny peeloff operation on asocs with  threads sleeping on it            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 27 Feb From: Salvatore Bonaccorso <carnil@...ian.org> To: OSS Security Mailinglist <oss-security@...ts.openwall.com> Subject: Linux: sctp: deny peeloff operation on asocs with  threads sleeping on it  Hi  Via the CVE webform, MITRE has assigned for:   >Subject:    [PATCH net] sctp: deny peeloff operation on asocs with threads sleeping on it >From:       Marcelo Ricardo Leitner <marcelo.leitner () gmail ! com> >Date:       > >commit ("sctp: avoid BUG_ON on sctp_wait_for_sndbuf") >attempted to avoid a BUG_ON call when the association being used for a >sendmsg() is blocked waiting for more sndbuf and another thread did a >peeloff operation on such asoc, moving it to another socket. > >As Ben Hutchings noticed, then in such case it would return without >locking back the socket and would cause two unlocks in a row. > >Further analysis also revealed that it could allow a double free if the >application managed to peeloff the asoc that is created during the >sendmsg call, because then sctp_sendmsg() would try to free the asoc >that was created only for that call. > >This patch takes another approach. It will deny the peeloff operation >if there is a thread sleeping on the asoc, so this situation doesn't >exist anymore. This avoids the issues described above and also honors >the syscalls that are already being handled (it can be multiple sendmsg >calls). > >Joint work with Xin Long. > >Fixes: ("sctp: avoid BUG_ON on sctp_wait_for_sndbuf") >Cc: Alexander Popov <alex.popov@...ux.com> >Cc: Ben Hutchings <ben@...adent.org.uk> >Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@...il.com> >Signed-off-by: Xin Long <lucien.xin@...il.com> >--- >Hi, please consider this one for -stable too. Thanks > > net/sctp/socket.c | 8 ++++++-- > 1 file changed, 6 insertions(+), 2 deletions(-) > >diff --git a/net/sctp/socket.c b/net/sctp/socket.c >index >--- a/net/sctp/socket.c >+++ b/net/sctp/socket.c >@@ @@ int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp) > 	if (!asoc) > 		return -EINVAL; >  >+	/* If there is a thread waiting on more sndbuf space for >+	 * sending on this asoc, it cannot be peeled. >+	 */ >+	if (waitqueue_active(&asoc->wait)) >+		return -EBUSY; >+ > 	/* An association cannot be branched off from an already peeled-off > 	 * socket, nor is this supported for tcp style sockets. > 	 */ >@@ @@ static int sctp_wait_for_sndbuf(struct sctp_association *asoc, long *timeo_p, > 		 */ > 		release_sock(sk); > 		current_timeo = schedule_timeout(current_timeo); >-		if (sk != asoc->base.sk) >-			goto do_error; > 		lock_sock(sk); >  > 		*timeo_p = current_timeo; >--   This was found while reviewing the fix of ("sctp: avoid BUG_ON on sctp_wait_for_sndbuf"))  Regards, Salvatore  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      