  oss-security - Re: CVE Request: PHP with Zend OPCache code permission/sensitive  data protection vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 28 Feb From: php-dev@...dogsoftware.net To: oss-security@...ts.openwall.com Subject: Re: CVE Request: PHP with Zend OPCache code permission/sensitive  data protection vulnerability  On Mon, Feb 27, at php-dev@...dogsoftware.net wrote: >  > To briefly summarize, in PHP SAPI's where PHP interpreters share a > common parent process (eg. Apache mod_php and PHP-FPM), Zend OpCache > creates a shared memory object owned by the common parent during > initialization. Child PHP processes inherit the SHM descriptor, using it > to cache and retrieve compiled script bytecode ("opcode" in PHP jargon). > Cache keys vary depending on configuration, but filename is a central > key component, and compiled opcode can generally be run if a script's > filename is known or can be guessed. >  > Many common shared hosting configurations change EUID in child processes > to enforce privilege separation among hosted users. In these scenarios, > default Zend OpCache behavior defeats script file permissions by sharing > a single SHM cache among all child PHP processes. >  > PHP scripts often contain sensitive information: Think of CMS > configurations where reading or running another user's script usually > means gaining privileges to the CMS database. >  >   > AFFECTED VERSIONS: > PHP7 < and PHP5 < Later versions are still vulnerable by > default unless opcache.validate_permission=1 is enabled. >  > AFFECTED COMPONENT: > Zend OpCache >  > VULNERABILITY TYPE: > Code permission/sensitive information disclosure >  > IMPACT: > Cross-user compromise of PHP web applications in shared hosting > environments. >  > REFERENCES: > > >  This has been assigned via cveform.mitre.org.  -- php-dev at coydogsoftware dot net  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      