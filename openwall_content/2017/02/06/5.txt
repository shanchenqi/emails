  oss-security - PEAR HTML_AJAX <= (PHP Serializer) PHP Object  Injection Vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 6 Feb From: Egidio Romano <research@...mainsecurity.com> To: bugtraq@...urityfocus.com, fulldisclosure@...lists.org,  oss-security@...ts.openwall.com Subject: PEAR HTML_AJAX <= (PHP Serializer) PHP Object  Injection Vulnerability  --------------------------------------------------------------------------- PEAR HTML_AJAX <= (PHP Serializer) PHP Object Injection Vulnerability ---------------------------------------------------------------------------   [-] Software Link:  https://pear.php.net/package/HTML_AJAX   [-] Affected Versions:  All versions from to   [-] Vulnerability Description:  The vulnerable code is located within the HTML_AJAX_Serializer_PHP class defined into the /AJAX/Serializer/PHP.php script. Such a class uses the unserialize() PHP function with user-controlled input unless a class name which is not in the provided array of allowed classes is found within the serialized string. Class names are extracted by using the _getSerializedClassNames() method:  68.	    function _getSerializedClassNames($string) { 69.	        // Strip any string representations (which might contain object syntax) 70.	        while (($pos = strpos($string, 's:')) !== false) { 71.	            $pos2 = strpos($string, ':', $pos + 2); 72.	            if ($pos2 === false) { 73.	                // invalidly serialized string 74.	                return false; 75.	            } 76.	            $end = $pos + 2 + substr($string, $pos + 2, $pos2) + 1; 77.	            $string = substr($string, 0, $pos) . substr($string, $end); 78.	        } 79.	 80.	        // Pull out the class names 81.	        preg_match_all('/O:[0-9]+:"(.*)"/U', $string, $matches); 82.	 83.	        // Make sure names are unique (same object serialized twice) 84.	        return array_unique($matches[1]); 85.	    }  By default the array of allowed classes is empty, meaning that no classes are allowed to be unserialized. However, due to the faulty regular expression used at line 81, it might be possible to bypass such a restriction by replacing "O:X" with "O:+X" from within the serialized string, where X is the length of the class name. This can be exploited by unauthenticated attackers to inject arbitrary PHP objects into the application scope, allowing to perform "POP chain" attacks or exploit memory corruption vulnerabilities within the PHP's serialization internals, potentially leading to execution of arbitrary code on the web server.   [-] Solution:  Update to version or disable the PHP Serializer.   [-] Disclosure Timeline:  - Issue reported to - CVE number requested - CVE number assigned - Version released: - Public disclosure   [-] CVE Reference:  The Common Vulnerabilities and Exposures project (cve.mitre.org) has assigned the name to this vulnerability.   [-] Credits:  Vulnerability discovered by Egidio Romano.   [-] Original Advisory:   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      