  oss-security - podofo: NULL pointer dereference in PoDoFo::PdfParser::ReadXRefSubsection (PdfParser.cpp)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 01 Feb From: Agostino Sarubbo <ago@...too.org> To: oss-security@...ts.openwall.com Subject: podofo: NULL pointer dereference in PoDoFo::PdfParser::ReadXRefSubsection (PdfParser.cpp)  Description: podofo is a C++ library to work with the PDF file format.  A fuzz on it discovered a NULL pointer access. The upstream project denies me  to open a new ticket. So, Iâm unable to communicate with them.  The complete ASan output:  # podofopdfinfo $FILE AddressSanitizer: SEGV on unknown address (pc  bp sp T0)                                                                                                                                              signal is caused by a WRITE memory access.                                                                                                                                                                                                                          address points to the zero page.                                                                                                                                                                                                                                      #0                                                                                                                                           #1 in __asan_memcpy                                                                                                                                    #2 in void std::_Construct(PoDoFo::PdfParser::TXRefEntry*,  PoDoFo::PdfParser::TXRefEntry const&)                  #3 in void  std::__uninitialized_fill_n::__uninit_fill_n(PoDoFo::PdfParser::TXRefEntry*,  unsigned long, PoDoFo::PdfParser::TXRefEntry const&)                                                                                                                                                                                                                            #4 in void  std::uninitialized_fill_n(PoDoFo::PdfParser::TXRefEntry*, unsigned long,  PoDoFo::PdfParser::TXRefEntry const&)                                                                                                                                                                                                                                                      #5 in void  std::__uninitialized_fill_n_a(PoDoFo::PdfParser::TXRefEntry*, unsigned long,  PoDoFo::PdfParser::TXRefEntry const&, std::allocator&)                                                                                                                                                                   #6 in std::vector<PoDoFo::PdfParser::TXRefEntry,  std::allocator  >::_M_fill_insert(__gnu_cxx::__normal_iterator<PoDoFo::PdfParser::TXRefEntry*,  std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator > >, unsigned long,  PoDoFo::PdfParser::TXRefEntry const&)                                                                                                                                      #7 in std::vector<PoDoFo::PdfParser::TXRefEntry,  std::allocator  >::insert(__gnu_cxx::__normal_iterator<PoDoFo::PdfParser::TXRefEntry*,  std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator > >, unsigned long,  PoDoFo::PdfParser::TXRefEntry const&)                                                                                                                                         #8 in std::vector<PoDoFo::PdfParser::TXRefEntry,  std::allocator >::resize(unsigned long, PoDoFo::PdfParser::TXRefEntry)                                #9 in PoDoFo::PdfParser::ReadXRefSubsection(long&, long&)  /tmp/portage/app-                                                                                                                        #10 in PoDoFo::PdfParser::ReadXRefContents(long, bool)  /tmp/portage/app-                                                                                                                        #11 in PoDoFo::PdfParser::ReadDocumentStructure()  /tmp/portage/app-                                                                                                                              #12 in  PoDoFo::PdfParser::ParseFile(PoDoFo::PdfRefCountedInputDevice const&, bool)  /tmp/portage/app-                                                                                             #13 in PoDoFo::PdfParser::ParseFile(char const*, bool)  /tmp/portage/app-                                                                                                                        #14 in PoDoFo::PdfMemDocument::Load(char const*)  /tmp/portage/app-                                                                                                                          #15 in PoDoFo::PdfMemDocument::PdfMemDocument(char const*)  /tmp/portage/app-                                                                                                                 #16 in PdfInfo::PdfInfo(std::string const&) /tmp/portage/app-                                                                                                                                 #17 in main /tmp/portage/app-                                                                                                                                                          #18 in __libc_start_main /var/tmp/portage/sys-                                                                                                                                                            #19 in _start                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AddressSanitizer can not provide additional info.                                                                                                                                                                                                                               SUMMARY: AddressSanitizer: SEGV                                                                                                                              Affected version:  Fixed version: N/A  Commit fix: N/A  Credit: This bug was discovered by Agostino Sarubbo of Gentoo.  CVE: N/A  Reproducer:  Timeline: bug discovered blog post about the issue  Note: This bug was found with American Fuzzy Lop.  Permalink:  --  Agostino Sarubbo Gentoo Linux Developer  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      