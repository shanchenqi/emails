  oss-security - podofo: infinite loop in PoDoFo::PdfPage::GetInheritedKeyFromObject (PdfPage.cpp)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 01 Feb From: Agostino Sarubbo <ago@...too.org> To: oss-security@...ts.openwall.com Subject: podofo: infinite loop in PoDoFo::PdfPage::GetInheritedKeyFromObject (PdfPage.cpp)  Description: podofo is a C++ library to work with the PDF file format.  A fuzz on it discovered an infinite loop. The upstream project denies me to  open a new ticket. So, Iâm unable to communicate with them.  The complete ASan output:  # podofopdfinfo $FILE AddressSanitizer: stack-overflow on address (pc  bp sp T0)     #0 in GenericScopedLock     #1 in  0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>::PopulateFreeList(__sanitizer::AllocatorStats*,   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>  >*, unsigned long,  0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>::RegionInfo*)     #2 in  0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>::AllocateBatch(__sanitizer::AllocatorStats*,   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>  >*, unsigned long)     #3 in   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>   0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>*, unsigned long) /tmp/portage/sys-     #4 in   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>   0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>*, unsigned long) /tmp/portage/sys-     #5 in   0ul, __sanitizer::SizeClassMap,  __asan::AsanMapUnmapCallback>,   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>  >, __sanitizer::LargeMmapAllocator   0ul, __sanitizer::SizeClassMap, __asan::AsanMapUnmapCallback>  >*, unsigned long, unsigned long, bool, bool) /tmp/portage/sys-     #6 in __asan::Allocator::Allocate(unsigned long, unsigned long,  __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) /tmp/portage/sys-     #7 in operator new(unsigned long) /tmp/portage/sys- rt/lib/asan/asan_new_delete.cc:78     #8 in PoDoFo::PdfVariant::PdfVariant(PoDoFo::PdfDictionary  const&) /tmp/portage/app-     #9 in PoDoFo::PdfObject::PdfObject(PoDoFo::PdfReference  const&, char const*) /tmp/portage/app-     #10 in  PoDoFo::PdfVecObjects::GetObject(PoDoFo::PdfReference const&) const  /tmp/portage/app-     #11 in PoDoFo::PdfObject::GetIndirectKey(PoDoFo::PdfName  const&) const /tmp/portage/app-     #12 in PoDoFo::PdfPage::GetInheritedKeyFromObject(char  const*, PoDoFo::PdfObject const*) const /tmp/portage/app-     #13 in PoDoFo::PdfPage::GetInheritedKeyFromObject(char  const*, PoDoFo::PdfObject const*) const /tmp/portage/app-     [.....]     in PoDoFo::PdfPage::GetInheritedKeyFromObject(char  const*, PoDoFo::PdfObject const*) const /tmp/portage/app-  SUMMARY: AddressSanitizer: stack-overflow in GenericScopedLock  Affected version:  Fixed version: N/A  Commit fix: N/A  Credit: This bug was discovered by Agostino Sarubbo of Gentoo.  CVE: N/A  Reproducer:  Timeline: bug discovered blog post about the issue  Note: This bug was found with American Fuzzy Lop.  Permalink:  --  Agostino Sarubbo Gentoo Linux Developer  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      