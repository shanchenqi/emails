  oss-security - Varnish HTTP Cache to DoS vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 9 Aug From: Evy Bongers <lists+oss-sec@...bongers.nl> To: oss-security@...ts.openwall.com Subject: Varnish HTTP Cache to DoS vulnerability  I came across this CVE yesterday and hadn't seen it on the list yet. Contents of this mail are copied from the post on varnish-cache.org.[1]  DoS vulnerability  Date:  A wrong if statement in the varnishd source code means that particular invalid requests from the client can trigger an assert.  This causes the varnishd worker process to abort and restart, loosing the cached contents in the process.  An attacker can therefore crash the varnishd worker process on demand and effectively keep it from serving content - a Denial-of-Service attack.  Mitigation is possible from VCL or by updating to a fixed version of Varnish Cache.  *Versions affected* - to - to - - to  Users of the Varnish Cache Plus product from Varnish Software: See the email you received from V-S.  *Versions not affected* - All releases up to and including  *Fixed in* - and forward - and forward - and forward  Users of the Varnish Cache Plus product from Varnish Software: See the email you received from V-S.  *Mitigation from VCL* Note that there are subtle differences on the VCL workarounds, depending on which version of Varnish you are running, make sure to use the right one.  These VCL snippets work by failing all client requests which attempt to use Transfer-encoding: chunked.  Normally browsers will not issue such requests, but we know there are cases where B2B applications, APIs and special webservices will use client requests with chunked encoding.  You can use this command to see if you have client traffic with chunked encoding:    varnishlog -cq ReqHeader:Transfer-Encoding -i ReqMethod -i ReqURL  If you need some requests with chunked encoding to work, you will have to write VCL code to white-list these clients based on IP/ authentication/cookies or other criteria, and then only call the exploit_workaround_xxx function for the malicios clients.  *Varnish 4.0.x (and Varnish Cache Plus 4.0.x)* Set the vcc_allow_inline parameter to true, either by passing:    -pvcc_allow_inline_c=true  on the command line or by issuing the CLI command:    param.set vcc_allow_inline_c true  Then add this to the front of your VCL:    sub exploit_workaround_4_0 {           # This needs to come before your vcl_recv function           # The following code is only valid for Varnish Cache and           # Varnish Cache Plus versions 4.0.x           if (req.http.transfer-encoding ~ "(?i)chunked") {                   C{                   struct dummy_req {                           unsigned magic;                           int restarts;                           int esi_level;                           int disable_esi;                           char hash_ignore_busy;                           char hash_always_miss;                           void *sp;                           void *wrk;                           int req_step;                           struct {                                   void *a;                                   void *b;                           };                           int req_body_status;                   };                   ((struct dummy_req *)ctx->req)->req_body_status = 6;                   }C                      return "Bad request"));           }   }      sub vcl_recv {           # Call this early in your vcl_recv function           call exploit_workaround_4_0;   }  *Varnish 4.1.x and 5.0 (and Varnish Cache Plus 4.1.x)* Set the vcc_allow_inline parameter to true, either by passing:    -pvcc_allow_inline_c=true  on the command line or by issuing the CLI command:    param.set vcc_allow_inline_c true  Then add this to the front of your VCL:    sub exploit_workaround_4_1 {           # This needs to come before your vcl_recv function           # The following code is only valid for Varnish Cache and           # Varnish Cache Plus versions 4.1.x and           if (req.http.transfer-encoding ~ "(?i)chunked") {                   C{                   struct dummy_req {                           unsigned magic;                           int step;                           int req_body_status;                   };                   ((struct dummy_req *)ctx->req)->req_body_status = 5;                   }C                      return "Bad request"));           }   }      sub vcl_recv {           # Call this early in your vcl_recv function           call exploit_workaround_4_1;   }  *Varnish 5.1.x* Add this to the front of your VCL:    sub vcl_recv {           if (req.http.transfer-encoding ~ "(?i)chunked") {                   return (fail);           }   }  *Source code fix* The source code fix is this one-liner:                    if (q == NULL || *q != '\0')                           ERR("chunked header number syntax");                   cl = (ssize_t)cll;   -               if((uintmax_t)cl != cll)   +               if (cl < 0 || (uintmax_t)cl != cll)                           ERR("bogusly large chunk size");                      *priv = cl;  On varnish 4.0.x this change goes into bin/varnishd/cache/cache_http1_proto.c on anything later it goes into bin/varnishd/http1/cache_http1_vfp.c.  Thankyous and credits  This issue was first noticed by StackPath.com, who contacted their vendor, Varnish Software, who in turn notified the Varnish Cache project.  Varnish Software staff did most of the heavy lifting, and Martin in particular gets a hat-tip for trawling the source-code for any similar issues.  And yes, I apologize for writing that buggy line of code.  phk  PS: See also Yah! A security issue - finally!  [1]  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      