  oss-security - Four memory safety bugs in "sipcrack" package (2 CVE IDs)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 26 Jul From: Dhiru Kholia <dhiru.kholia@...il.com> To: oss-security@...ts.openwall.com Subject: Four memory safety bugs in "sipcrack" package (2 CVE IDs)  Summary -------  This report describes four memory safety bugs in the sipcrack software package as shipped with Debian. Since these bugs can be triggered remotely, they should potentially be considered as security bugs.  The security impact of these bugs seems to be limited to a remote denial of service (loss of intended functionality), either through sipdump segfault under specific conditions due to invalid memory usage, or through memory exhaustion due to the memory leaks in sipdump.  I found these bugs with the help of libFuzzer.   Steps to reproduce ------------------  https://packages.debian.org/sid/sipcrack  wget http://http.debian.net/debian/pool/main/s/sipcrack/sipcrack_0.2.orig.tar.gz wget  To trigger these bugs, build sipcrack with Address Sanitizer (ASan) enabled. To do this, add the "-fsanitize=address --ggdb" flags to "FLAGS" in Makefile and also disable "strip" in Makefile.  After building sipcrack with "make", ensure that ASan is enabled.  $ ldd ./sipdump  | grep asan 	libasan.so.3 =>   Bug 1 and 2 -----------  $ ./sipdump -p /dev/null  ...  * Using pcap file for sniffing  AddressSanitizer: heap-buffer-overflow on address at pc bp sp WRITE of size 1 at thread T0     #0 in sniff_logins     #1 in pcap_offline_read     #2 in pcap_loop     #3 in main     #4 in __libc_start_main     #5 in _start  is located 21 bytes to the right of 53-byte region allocated by thread T0 here:     #0 in malloc     #1 in pcap_check_header  0. This heap-buffer-overflow can be triggered remotely over a network when sipdump is run in live capture mode (-i option).  1. line executes "payload[size_payload] = and this line has an off-by-one memory write problem.  2. There is also a correctness problem with this line. The "packet" variable is declared as "const unsigned char *packet" but the "payload" pointer tries to write to this "const packet" variable on the same line  3. For the same reproducer, "payload" is pointing to out-of-bounds memory after "payload = (unsigned char *)(packet + SIZE_ETHERNET + size_ip + size_proto)" line is executed. This leads to out-of-bounds memory read in the same function.  Here is a patch to fix both the off-by-one memory write problem, and the out-of-bounds access problem,  diff --git a/SIPdump.c b/SIPdump.c index --- a/SIPdump.c +++ b/SIPdump.c @@ @@ static void sniff_logins(unsigned char *args,    const struct udp_header *udp;    unsigned char *payload;    conn_t connection; -  size_t size_ip=0, size_proto=0, size_payload=0; +  size_t size_ip=0, size_proto=0; +  unsigned char *payload_copy; +  ssize_t size_payload=0;     /* Get ethernet header */   @@ @@ static void sniff_logins(unsigned char *args,     payload = (unsigned char *)(packet + SIZE_ETHERNET + size_ip + size_proto);    size_payload = ntohs(ip->ip_len) - (size_ip + size_proto); -  payload[size_payload] = + +  /* Bounds checking */ +  if (size_payload < 0 || SIZE_ETHERNET + size_ip + size_proto + size_payload> header->caplen) { +    return; +  }     /* If we have a payload send to payload and connection information to parser */     if(size_payload > 0) { -    parse_payload(&connection, payload, size_payload); +    payload_copy = malloc(size_payload + 1); +    if (!payload_copy) { +      printf("malformed packet?, malloc call failed!\n"); +      return; +    } +    memcpy(payload_copy, payload, size_payload); +    payload_copy[size_payload] = +    parse_payload(&connection, payload_copy, size_payload); +    free(payload_copy);    }     return;  The Common Vulnerabilities and Exposures (CVE) project has assigned the ID to this issue.  CVE ID: - memory safety issues in sipcrack  Summary: An out-of-bounds read and write flaw was found in the way sipcrack handled SIP traffic. A remote attacker could potentially use this flaw to crash the sipdump process under certain circumstances by generating specially crafted SIP traffic.  Attack Vectors,  Network: processing crafted network traffic, Local: opening a crafted .pcap file.   Bug 3 -----  $ ./sipdump -p /dev/null  ...  ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 1 at thread T0     #0 in sniff_logins     #1 in pcap_offline_read     #2 in pcap_loop     #3 in main     #4 in __libc_start_main     #5 in _start  is located 12 bytes to the right of 34-byte region allocated by thread T0 here:     #0 in malloc     #1 in pcap_check_header   line is "size_proto = TH_OFF(tcp)*4". This out-of-bounds read occurs because the program does not verify the actual packet length is enough (header->caplen) before reading the packet data.  The following patch fixes this problem,  diff --git a/SIPdump.c b/SIPdump.c index --- a/SIPdump.c +++ b/SIPdump.c @@ @@ static void sniff_logins(unsigned char *args,    switch(ip->ip_p)    {    case IPPROTO_TCP: +    if (SIZE_ETHERNET + size_ip + sizeof(struct tcp_header) > header->caplen) +      return;      tcp = (struct tcp_header *)(packet + SIZE_ETHERNET + size_ip);      size_proto = TH_OFF(tcp)*4;      if (size_proto < 20) {  NOTE: "case IPPROTO_UDP" has a similar bug which needs to be fixed too.  I did not request a CVE ID for this bug. I recommend fixing this memory safety bug though.   Memory leak bug ---------------  $ ./sipdump -p /dev/null ... * Using pcap file for sniffing  ================================================================= LeakSanitizer: detected memory leaks  Direct leak of 80 byte(s) in 1 object(s) allocated from:     #0 in realloc     #1 in stringtoarray   Here is a patch to fix this problem,  diff --git a/SIPcrack.c b/SIPcrack.c index --- a/SIPcrack.c +++ b/SIPcrack.c @@ @@ static int parse_sniffed_line(login_t *login, char *buffer)    }     /* Return */ +  free(lines);     if(num_lines != 12)      return -1;  diff --git a/SIPdump.c b/SIPdump.c index --- a/SIPdump.c +++ b/SIPdump.c @@ @@ static int parse_sip_proto(char *out,     if(error || (!found && lines[num_lines-1][0] == {      free(lines[num_lines - 1]); +    free(lines);      return -1;    }  @@ @@ static int parse_sip_proto(char *out,     if(found) {      free(lines[num_lines - 1]); +    free(lines);      return 1;    }  @@ @@ static int parse_sip_proto(char *out,    if(out_len - 1 < strlen(lines[num_lines - 1])) {      debug(("Buffer too small for line, ignoring..."));      free(lines[num_lines - 1]); +    free(lines);      return -1;    }  @@ @@ static int parse_sip_proto(char *out,    /* Free last line */    free(lines[num_lines - 1]);  +  free(lines); +    return 0;  }   The Common Vulnerabilities and Exposures (CVE) project has assigned the ID to this issue.  CVE ID: - memory leak in sipcrack  Summary: A memory leak was found in the way sipcrack handled processing of SIP traffic. A remote attacker could potentially use this flaw to crash long-running sipdump network sniffing sessions.  Vulnerability Type, Memory leak leading to denial of service due to memory exhaustion,  Attack Vectors, Network: processing crafted network traffic, Local: opening a crafted .pcap file.  --  Dhiru  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  Download attachment of type "application/octet-stream" bytes)  View attachment "combined-fixes.diff" of type "text/plain" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      