  oss-security - Libgcrypt fixes "Sliding right into disaster" RSA side-channel attack            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 6 Jul From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Libgcrypt fixes "Sliding right into disaster" RSA side-channel attack  Hi,  Last week, Libgcrypt was announced as follows:   | Noteworthy changes in version  | =================================== |  |  * Bug fixes: |  |    - Mitigate a flush+reload side-channel attack on RSA secret keys |      dubbed "Sliding right into disaster".  For details see |       |  |  | Note that this side-channel attack requires that the attacker can run | arbitrary software on the hardware where the private RSA key is used.  This affects versions of GnuPG 2 that bundle or otherwise use versions of Libgcrypt older than  In a discussion on gnupg-users, Werner Koch answered that GnuPG 1.4 (which does not yet use the separate Libgcrypt library) is "Maybe" vulnerable to this attack as well, "And probably also to a lot of other local side channel attacks":   As referenced further in that thread, Marcus Brinkmann came up with a backport of the fix from Libgcrypt   to GnuPG 1.4:   but it's unclear whether Werner would want to merge it and release an update of GnuPG 1.4 or not (there's a discussion in the comments at the URL above).  To keep the context recorded in here (in case any of the above URLs are gone later), here's the Libgcrypt commit, where the commit message helpfully quotes the paper's abstract:  | Authored by gniibe on Thu, Jun 29, AM. |  | Description |  | rsa: Add exponent blinding. |  | * cipher/rsa.c (secret_core_crt): Blind secret D with randomized | nonce R for mpi_powm computation. |  | The paper describing attack: |  | Sliding right into disaster: Left-to-right sliding windows leak | by Daniel J. Bernstein and Joachim Breitner and Daniel Genkin and | Leon Groot Bruinderink and Nadia Heninger and Tanja Lange and | Christine van Vredendaal and Yuval Yarom |  | It is well known that constant-time implementations of modular | exponentiation cannot use sliding windows. However, software | libraries such as Libgcrypt, used by GnuPG, continue to use sliding | windows. It is widely believed that, even if the complete pattern of | squarings and multiplications is observed through a side-channel | attack, the number of exponent bits leaked is not sufficient to | carry out a full key-recovery attack against RSA. Specifically, | 4-bit sliding windows leak only 40% of the bits, and 5-bit sliding | windows leak only 33% of the bits. |  | In this paper we demonstrate a complete break of as | implemented in Libgcrypt. Our attack makes essential use of the fact | that Libgcrypt uses the left-to-right method for computing the | sliding-window expansion. We show for the first time that the | direction of the encoding matters: the pattern of squarings and | multiplications in left-to-right sliding windows leaks significantly | more information about exponent bits than for right-to-left. We show | how to incorporate this additional information into the | Heninger-Shacham algorithm for partial key reconstruction, and use | it to obtain very efficient full key recovery for We also | provide strong evidence that the same attack works for with | only moderately more computation. |  | Exponent blinding is a kind of workaround to add noise. Signal (leak) | is still there for non-constant-time implementation. |  |     Co-authored-by: Werner Koch <wk@...pg.org> |     Signed-off-by: NIIBE Yutaka <gniibe@...j.org>  I've attached Marcus' patch for GnuPG 1.4 from referenced above.  Alexander  View attachment of type "text/plain" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      