  oss-security - libXcursor: heap overflows when parsing malicious  files            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 28 Nov From: Matthieu Herrb <matthieu.herrb@...s.fr> To: oss-security@...ts.openwall.com Subject: libXcursor: heap overflows when parsing malicious  files  Hi,  X.Org has just release libXcursor version which contains the following security fix:  Author:     Tobias Stoeckmann <tobias@...eckmann.org> AuthorDate: Sat Oct 21 Commit:     Matthieu Herrb <matthieu@...rb.eu> CommitDate: Sat Nov 25      Fix heap overflows when parsing malicious files.      It is possible to trigger heap overflows due to an integer overflow     while parsing images and a signedness issue while parsing comments.      The integer overflow occurs because the chosen limit for     dimensions is too large for 32 bit systems, because each pixel takes     4 bytes. Properly chosen values allow an overflow which in turn will     lead to less allocated memory than needed for subsequent reads.      The signedness bug is triggered by reading the length of a comment     as unsigned int, but casting it to int when calling the function     XcursorCommentCreate. Turning length into a negative value allows the     check against XCURSOR_COMMENT_MAX_LEN to pass, and the following     addition of sizeof (XcursorComment) + 1 makes it possible to allocate     less memory than needed for subsequent reads.  --  Matthieu Herrb  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      