  oss-security - Re: Fw: Security risk of vim swap files            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 5 Nov From: Jakub Wilk <jwilk@...lk.net> To: oss-security@...ts.openwall.com Subject: Re: Fw: Security risk of vim swap files  * Christian Brabandt <cb@...bit.org>, >>In general, what vim does (copying mode bits) in not enough to ensure  >>that the swapfile is readable only by the users who had access to the  >>original file. It would have to copy also group ownership and ACLs. >I think patch fixes  >the group ownership problem.  So the code in question looks like this:     /*     * If the group-read bit is set but not the world-read bit, then     * the group must be equal to the group of the original file.  If     * we can't make that happen then reset the group-read bit.  This     * avoids making the swap file readable to more users when the     * primary group of the user is too permissive.     */    if ((swap_mode & ==    {        stat_T	swap_st;         if (mch_stat((char *)swap_fname, &swap_st) >= 0        	&& st.st_gid != swap_st.st_gid        	&& fchown(curbuf->b_ml.ml_mfp->mf_fd, -1, st.st_gid)        							 == -1)            swap_mode &=    }     (void)mch_setperm(swap_fname, (long)swap_mode);  The logic here is based on the assumption that the bit in the mode  implies that everyone in the group can read the file. Somewhat  surprisingly, this assumption is incorrect in the world with ACLs:     $ id -gn    users     $ ls -l foo    -rw-r-----+ 1 root users 0 Nov  5 foo     $ cat foo    cat: foo: Permission denied     $ getfacl foo    # file: foo    # owner: root    # group: users    user::rw-    user:nobody:r--    group::---    mask::r--    other::---  I don't understand why this chmodding is needed at all. Couldn't vim create swapfiles with mode and be done with it?  --  Jakub Wilk  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      