  oss-security - Re: Security risk of server side text editing in general and vim.tiny specifically            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 3 Nov From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: Security risk of server side text editing in general and vim.tiny specifically  On Fri, Nov 03, at Solar Designer wrote: > I am not saying things are good as they are; I think they are not.  Like > I say, people neither know nor want to know this, and it means they > continue to do things insecurely.  I don't currently have a solution.  The closest to a solution I came up with so far (around year but still unimplemented) is two programs - call them give(1) and take(1) - for users to exchange files safely.  From users' perspective, these would go along with write(1) and talk(1).  From sysadmin's perspective, they'd be tools to use after using an unusually safe (allocating a new pty, filtering terminal escapes) implementation of su(1) (actually, it should become su(8), since no safe use of a "su" by a user is possible anyway) to access the user(s)' account(s) (to copy a file between two users, or between a user and root).  Implementation-wise, give(1) and take(1) could either rely on having a shared directory with /tmp-like permissions on the same filesystem with the users' home directories (and this would be rather specialized, not addressing the need to easily share files that are not on /home) and use of hard links, or they'd need a daemon like talkd(8) or reuse sshd(8).  And this last possibility brings us to what we can (and I sometimes do) use already - setting up temporary SSH keys with forced "cat < ..." or "cat > ..." commands, and using SSH for safely exchanging files by users of the same host, or of different hosts for this matter.  It's just manual setup each time, and we could want to provide convenient tools to automate that.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      