  oss-security - Re: Vixie/ISC Cron group crontab to root escalation            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 9 Jun From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Re: Vixie/ISC Cron group crontab to root escalation  On Fri, Jun 09, at Christos Zoulas wrote: > In this patch: > >  > Why do: >  > +	if (lstat(tabname, &lstatbuf) < OK) { > +		log_it(fname, getpid(), "CAN'T LSTAT", tabname); > +		goto next_crontab; > +	} > +	if (!S_ISREG(lstatbuf.st_mode)) { > +		log_it(fname, getpid(), "NOT REGULAR", tabname); > +		goto next_crontab; > +	} > +	if ((!pw && (lstatbuf.st_mode & != || > +	    (pw && (lstatbuf.st_mode & != { > +		log_it(fname, getpid(), "BAD FILE MODE", tabname); > +		goto next_crontab; > +	} > +	if (lstatbuf.st_nlink != 1) { > +		log_it(fname, getpid(), "BAD LINK COUNT", tabname); > +		goto next_crontab; > +	} > + >  	if ((crontab_fd = open(tabname, O_RDONLY|O_NONBLOCK|O_NOFOLLOW, 0)) < OK) { >  		/* crontab not accessible? >  		 */ >  > Instead of doing the open first and then fstat(2) to prevent TOCTOU?  Oh, I did in fact mention this in the private discussion, so I'll quote:  | Another detail: somehow in Owl we introduced lstat() prior to open, and | check lstat()'s struct for all the required properties before proceeding | with open() with O_NOFOLLOW.  Then we check that st_dev/st_ino stayed | the same.  We also kept the post-open() checks.  I don't recall exactly | why we added this, but maybe because of the possibility of side-effects | on open() for hard links to device files (like with tape drives).  And | it looks like we neglected to add the same for at jobs (perhaps didn't | revisit this when support for at jobs appeared via our update to later | OpenBSD code) - maybe we should.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      