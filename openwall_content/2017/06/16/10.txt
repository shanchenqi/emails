  oss-security - Re: two vulns in            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 16 Jun From: Kurt Seifried <kseifried@...hat.com> To: oss-security <oss-security@...ts.openwall.com> Subject: Re: two vulns in  On Fri, Jun 16, at PM, Seth Arnold <seth.arnold@...onical.com> wrote:  > On Fri, Jun 16, at fefe wrote: > > I found two vulns in  (https://uclibc.org/) > > [...] > > The poc code like: > > > >       if(regcomp (&regtmp,"(.+)upper\\1^", REG_EXTENDED|REG_ICASE | > REG_NOSUB )==0) > >       { > >               reg1match_t pmatch[1]; > >               regexec(&regtmp, "upperupperupperx",1, pmatch, 0); > >               regfree(&regtmp); > >       } > > > > [...] > > > > The poc code like: > > > >       if(regcomp > > REG_EXTENDED|REG_ICASE | REG_NOSUB )==0) > >       { > >               reg1match_t pmatch[1]; > >               regexec(&regtmp, pmatch, 0); > >               regfree(&regtmp); > >       } > > A question to the wider list: > > Does it make sense to assign CVEs to regex compilation? Very few toolkits > handle this well, and even given how many regex toolkits use backtracking, > even 'safe' regexes can lead to essentially unbounded execution time. >  I would say it depends, are they actually exploitable in a realistic sense by an attacker? (e.g. dir globbing on ftp servers should not let anonymous ftp users eat all the CPU/RAM).   > > Some regex engines like Rust's regex and Go's regex should handle > untrusted inputs well: they're non-backtracking engines and type-safe > languages.  Hypothetical crashes like this probably would qualify for > CVEs in either of these environments. But I'm less convinced it makes > sense with C-based engines to allow untrusted inputs. > > http://www.etalabs.net/compare_libcs.html suggests that uclibc's regex is > DFA-based thus it's probably intended to allow untrusted inputs -- but is > that explicitely stated as a goal anywhere? >  I would also suggest we look at common usage. E.g.:  https://docs.python.org/2/library/pickle.html  Warning   The pickle <https://docs.python.org/2/library/pickle.html#module-pickle> module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.   However:   http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=python+pickle   and if you search github for socket and pickle... well.. yeah.   > > Thanks >    --   Kurt Seifried -- Red Hat -- Product Security -- Cloud PGP A90B 66BF Red Hat Product Security contact: secalert@...hat.com   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      