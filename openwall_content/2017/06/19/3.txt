  oss-security - Re: Qualys Security Advisory - The Stack Clash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 19 Jun From: Daniel Micay <danielmicay@...il.com> To: oss-security@...ts.openwall.com, Qualys Security Advisory  <qsa@...lys.com> Subject: Re: Qualys Security Advisory - The Stack Clash  On Mon, at kseifried@...hat.com wrote: > On AM, Qualys Security Advisory wrote: > >  > > Qualys Security Advisory > >  > > The Stack Clash >  > I just want to publicly thank Qualys for working with the Open Source > community so we (Linux and *BSD) could all get this fixed properly. > There was a lot of work from everyone involved and it all went pretty > smoothly.  Fixing it properly would really also include fixing these:   and actually implementing -fstack-check as not just a no-op in Clang.  Windows has working stack probes, even in Windows XP and perhaps even earlier. LLVM has working stack probes there (not sure if GCC deals with it properly) yet doesn't make them available elsewhere.  Rust is 'memory safe' but has this same stack exhaustion issue. It didn't used to have the issue, since it kept around the LLVM segmented stack code generation after it dropped segmented stacks to check for stack overflow in function preludes. That got dropped for a 1-3% performance win from using stack probes instead... which was a good idea, but without implementing stack probes... making it a terrible idea. It was deferred to some later date. That was in July and 2 years later it's not done.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      