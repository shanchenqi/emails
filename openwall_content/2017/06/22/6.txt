  oss-security - stackguard fix in Red Hat and Ubuntu kernels            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 22 Jun From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: Vasily Averin <vvs@...tuozzo.com>, 	Konstantin Khorenko <khorenko@...tuozzo.com> Subject: stackguard fix in Red Hat and Ubuntu kernels  I think the below should be in here regardless of whether it was already known or not, so forwarding.  I've re-attached the reproducer program.  Thanks, Vasily and Konstantin.  (And yes, I've verified that both Vasily's and Konstantin's e-mail addresses here were already publicly known.  It's something everyone should do before forwarding stuff to a public mailing list.)  ----- Forwarded message from Vasily Averin <vvs@...tuozzo.com> -----  From: Vasily Averin <vvs@...tuozzo.com> To: Solar Designer <solar@...nwall.com> Cc: Konstantin Khorenko <khorenko@...tuozzo.com> Subject: stackguard fix in RedHat and Ubuntu kernels Date: Thu, 22 Jun  Dear Alexander, probably it is already known, otherwise please share it in oss-security@ I've noticed the problem on Red Hat kernels first, and reported to Red Hat already, but now I've found the same problem on Ubuntu kernels. It does not affect mainline patch "mm: larger stack guard gap, between vmas" but seems distributors have used some other incorrect patch (shared in linux-distros@ ??? )  Description of problem: mmap(MAP_GROUWSDOWN) works incorrectly on Red Hat and Ubuntu kernels with stackguard fix.  We have application that creates stack by using MAP_GROUWSDOWN , provide this area into clone(),  where it fails on access to mapped area.  Steps to Reproduce: execute attached reproducer. It maps 2 pages with MAP_GROUWSDOWN, an access to 2nd page mapped page triggers SIGBUS or SIGSEGV  Actual results: - access to end of mapped area generated SIGBUS or SIGSEGV - /proc/<pid>/maps shows incorrect start address for allocated area please see details below  Expected results: on previous Ubuntu/RHEL kernels this testcase works well without crashes         MAP_GROWSDOWN               This flag is used for stacks.  It indicates to the kernel               virtual memory system that the mapping should extend downward               in memory.  The return address is one page lower than the               memory area that is actually created in the process's virtual               address space.  Touching an address in the "guard" page below               the mapping will cause the mapping to grow by a page.  This               growth can be repeated until the mapping grows to within a               page of the high end of the next lower mapping, at which point               touching the "guard" page will result in a SIGSEGV signal.  On new Ubuntu kernel (with stackguard fix)  20	        unsigned char *stack = mmap(NULL, STACK_SIZE, PROT_READ | PROT_WRITE, (gdb) n  (changes in /proc/<pid>/maps)  rw-p 0   r-xp fc:00                      rw-p 0  rw-p 0  <<<< incorrect start address is shown here   rw-p 0   r--p 0                          [vvar]  r-xp 0                          [vdso]  23		printf("stack = %p\n", stack); (gdb) n stack = 24		end = stack + STACK_SIZE - 8; (gdb) n 25		printf("end = %p\n", end); (gdb) n end = 26		printf("write to *end\n"); (gdb) n write to *end 27		*end = 0; (gdb) n  Program received signal SIGSEGV, Segmentation fault. in main () at sk.c:27   on Ubuntu  -- works as expected  mmap return address of guard page, access to end of mapped area works works correctly, touch on guard page grows stack down, then touch of previous page grows stack down again.  20	        unsigned char *stack = mmap(NULL, STACK_SIZE, PROT_READ | PROT_WRITE, (gdb) n 23		printf("stack = %p\n", stack); (gdb) n stack =   rw-p 0   r-xp                    rw-p 0  rw-p 0   rw-p 0   r--p 0                          [vvar]  r-xp 0                          [vdso]  24		end = stack + STACK_SIZE - 8; (gdb) n 25		printf("end = %p\n", end); (gdb) n end = 26		printf("write to *end\n"); (gdb) n write to *end 27		*end = 0; (gdb) n 28		printf("write to *stack\n"); (gdb) n write to *stack 29		*(stack) = 0; (gdb) n  rw-p 0  rw-p 0   <<<< Stack grow down  30		printf("write to *(stack-1)\n"); (gdb) n write to *(stack-1) = 0; (gdb) n 32	}  rw-p 0  rw-p 0 <<<< Stack grows down again  ----- End forwarded message -----  View attachment "sk.c" of type "text/x-c" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      