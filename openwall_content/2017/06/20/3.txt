  oss-security - CVE-request: heap-buffer-overflow in jasper            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 20 Jun (CST) From: xiaoqixue_1 <xiaoqixue_1@....com> To: oss-security@...ts.openwall.com Subject: CVE-request: heap-buffer-overflow in jasper    Description: jasper is an open-source initiative to provide a free software-based reference  implementation of the codec specified in the Part-1 standard.   A crafted image causes a read overflow in the latest version  And this issue also exsits in the latest commit of github repo.  (https://github.com/mdadams/jasper)       The complete ASan output: # ./install/bin/jasper -f $FILE -F /tmp/1.pnm -T pnm ================================================================= AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 8 at thread T0     #0 in jp2_decode     #1 in jas_image_decode     #2 in main     #3 in __libc_start_main     #4   is located 0 bytes to the right of 24-byte region allocated by thread T0 here:     #0 in __interceptor_malloc     #1 in jas_malloc     #2 in jas_alloc2     #3 in jp2_cdef_getdata     #4 in jp2_box_get     #5 in jp2_decode     #6 in jas_image_decode     #7 in main     #8 in __libc_start_main   SUMMARY: AddressSanitizer: heap-buffer-overflow jp2_decode Shadow bytes around the buggy address:   fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd   fd fa fa fa fd fd fd fa fa fa fd fd fd fa fa fa   fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fa   fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd   fd fa fa fa fd fd fd fd fa fa fd fd fd fa fa fa 00 00 00[fa]fa fa 00 00 00 00 fa fa 00 00 00 00   fa fa 00 00 00 02 fa fa 00 00 07 fa fa fa 00 00   05 fa fa fa 00 00 07 fa fa fa 00 00 00 06 fa fa   00 00 00 06 fa fa 00 00 00 06 fa fa 00 00 06 fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07   Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Contiguous container OOB:fc   ASan internal:           fe       Affected version: the Latest version and also in the latest commit   Fixed version: N/A   Commit fix: N/A   Credit: the bug is found by Qixue Xiao and Kang Li.   CVE: N/A   Reproducer:   Timeline: bug discovered and reported upstream   Note: This bug was found with American Fuzzy Lop.     --  xiaoqixue_1@....com Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      