  oss-security - podofo: heap-based buffer overflow in PoDoFo::PdfPainter::ExpandTabs (PdfPainter.cpp)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sat, 1 Apr From: "Agostino Sarubbo" <ago@...too.org> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: podofo: heap-based buffer overflow in PoDoFo::PdfPainter::ExpandTabs (PdfPainter.cpp)  Description: podofo is a C++ library to work with the PDF file format.  A fuzz on it through the podofotxt2pdf command line tool reavealed an heap overflow. This post will be forwarded on the upstream mailing list.  The complete ASan output:  # podofotxt2pdf $FILE out.pdf AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 2 at thread T0     #0 in PoDoFo::PdfPainter::ExpandTabs(PoDoFo::PdfString const&, long) const     #1 in PoDoFo::PdfPainter::DrawText(double, double, PoDoFo::PdfString const&, long)     #2 in draw(char*, PoDoFo::PdfDocument*, bool, char const*)     #3 in init(char const*, char const*, bool, char const*)     #4 in main     #5 in __libc_start_main     #6 in _start  is located 0 bytes to the right of 72-byte region allocated by thread T0 here:     #0 in operator new(unsigned long)     #1 in PoDoFo::PdfRefCountedBuffer::ReallyResize(unsigned long)     #2 in PoDoFo::PdfRefCountedBuffer::Resize(unsigned long)     #3 in PoDoFo::PdfRefCountedBuffer::PdfRefCountedBuffer(unsigned long)     #4 in PoDoFo::PdfString::Init(char const*, long)     #5 in PoDoFo::PdfString::PdfString(char const*, PoDoFo::PdfEncoding const*)     #6 in draw(char*, PoDoFo::PdfDocument*, bool, char const*)     #7 in init(char const*, char const*, bool, char const*)     #8 in main     #9 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow in PoDoFo::PdfPainter::ExpandTabs(PoDoFo::PdfString  const&, long) const Shadow bytes around the buggy address:   fa fa 00 00 00 00 00 00 00 00 00 00 fa fa fa fa   00 00 00 00 00 00 00 00 00 fa fa fa fa fa fd fd   fd fd fd fd fd fd fd fa fa fa fa fa 00 00 00 00   00 00 00 00 00 fa fa fa fa fa 00 00 00 00 00 00   00 00 00 fa fa fa fa fa fd fd fd fd fd fd fd fd fd fa fa fa fa fa 00 00 00 00 00 00 00 00 00[fa]   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  Affected version:  Fixed version: N/A  Commit fix: N/A  Credit: This bug was discovered by Agostino Sarubbo of Gentoo.  CVE:  Reproducer:  Timeline: bug discovered and reported to upstream blog post about the issue CVE assigned  Note: This bug was found with American Fuzzy Lop.  Permalink:  -- Agostino Sarubbo Gentoo Linux Developer    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      