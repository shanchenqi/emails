  oss-security - TLS verification vulnerability in LibreSSL -            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 27 Apr From: Jakub Jirutka <jakub@...utka.cz> To: oss-security@...ts.openwall.com Subject: TLS verification vulnerability in LibreSSL -  Vulnerability Type: Missing TLS Certificate Validation Affected Product Code Base: LibreSSL - - Vendor of Product: OpenBSD Affected Component: SSL_set_verify, SSL_CTX_set_verify, SSL_get_verify_result   ## Summary  LibreSSL to lacks TLS certificate verification if SSL_get_verify_result is relied upon for a later check of a verification result, in a use case where a user-provided verification callback returns 1, as demonstrated by acceptance of invalid certificates by nginx.   ## Additional Information  LibreSSL versions from until suffer from a lack of TLS certificate verification if the user-provided callback for verification returns 1. This bug was introduced in commit [1] version and has not been fixed upstream yet.  If the user verification callback returns 1, LibreSSL will force the verification result to resulting in, contrary to the documentation, any later checks by the API user through SSL_get_verify_result() to be useless, as it will always return instead of any earlier error that occurred in the verification process.  As such, any API user that matches the following prerequisites:  * Installs a verification callback that always returns 1, or returns 1 even   when the first parameter (preverify_ok) is 0; * Intends to check the verification result later using SSL_get_verify_result()   in order to abort the connection at that point;  will be lead into thinking that the verification succeeded and thus possibly allow connections to peers with invalid certificates, despite this clearly not being the intention and in violation of the documentation of the original OpenSSL API:  > If verify_callback always returns 1, the TLS/SSL handshake will not be > terminated with respect to verification failures and the connection will be > established. The calling process can however retrieve the error code of the > last verification error using SSL_get_verify_result(3) or by maintaining > its own error storage managed by verify_callback. -- [2]  An example of real-world software affected by this is nginx [3], bypassing certificate verification entirely and InspIRCd [4], bypassing the option of requiring trusted clients upon connect (<connect requiressl="trusted">).  This issue was discovered by Jakub Jirutka <jakub@...utka.cz> from Alpine Linux using the nginx automated test suite [5] and further investigated by Duncan Overbruck <duncaen@...dlinux.eu> from Void Linux and Shiz <hi@...z.me> from Alpine Linux.  Not fixed upstream yet, verified by vendor here [6].  This issue got assigned [7].   ## Attack Vectors  Connect to an affected service over TLS using an arbitrary client certificate, or an affected client connecting to a service that presents an arbitrary server certificate.   ## References  [1]: [2]: https://wiki.openssl.org/index.php/Manual:SSL_CTX_set_verify(3) [3]: [4]: [5]: http://hg.nginx.org/nginx-tests/ [6]: [7]:   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      