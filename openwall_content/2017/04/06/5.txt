  oss-security - Re: libxslt math.random issue            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 6 Apr From: Marcus Meissner <meissner@...e.de> To: oss-security@...ts.openwall.com Subject: Re: libxslt math.random issue  On Thu, Apr 06, at Hanno Bรถck wrote: > Hi, >  > On Thu, 6 Apr > Marcus Meissner <meissner@...e.de> wrote: >  > > has been assigned to use of libexslt (in libxslt) usage > > of "math.random" without initializing the randomseed. > >  > > > > >  > I have some questions and comments: >  > 1. What's the use of the random number and what's the security impact > if it's not random? That's not explained > In case of the bugreport. > In case a cryptographically secure random number is required then using > rand()/srand() is a bad idea anyway. > (Unfortunately there's no secure random in the standard libc, but at > least glibc now has getrandom.).   It is a bit tricky to find out. I googled some use-cases.  - UUID generation was looked for by 1 stackoverflow user - some harmless randomness in XSLT conversion for selection random pictures  > 2. This part of the patch looks a bit strange: >  > +	seed = time(NULL); /* just in case /dev/urandom is not there */ > +	if (fd == -1) { > +		read (fd, &seed, sizeof(seed)); > +		close (fd); > +	} >  > You're calling time() unconditionally, although it's kinda just a > fallback. Why not > +	if (fd == -1) { > +		read (fd, &seed, sizeof(seed)); > +		close (fd); > +	} else { > +		seed = time(NULL); > +	} > ? >  > (obviously using time is not a secure way to do random numbers, if > secure numbers are required cross-plattform you need to do this > otherwise anyway)  it should be fd != -1 , my bad :/  Ciaop, Marcus  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      