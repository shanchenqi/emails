  oss-security - CVE Request - XStream: DoS when unmarshalling void            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 03 Apr From: Jรถrg Schaible <joerg.schaible@....de> To: oss-security@...ts.openwall.com Subject: CVE Request - XStream: DoS when unmarshalling void  Hello,  XStream is a Java library basically to marshal Java objects into XML and  back.  Huawei engineers reported a reproducible crash of the Java VM (DoS) feeding  XStream with a specially crafted XML (note, that Stream also supports JSON,  that one can be used equally).  Issue Description =================  The processed stream at unmarshalling type contains type information to  recreate the formerly written objects. XStream creates therefore new  instances based on these type information. The crash occurrs if this  information advices XStream to create an instance of the primitive type  'void'. This situation can only happen if an attacker was able to manipulate  the incoming data, since such an instance does not exist.  Steps to Reproduce: ===================  The simplest way to demonstrate the problem is with this snippet:  XStream xstream = new XStream(); xstream.fromXML("<void/>");  If XStream is configured to read JSON, the equivalent line is:  xstream.fromXML("{'void':null}");  However, the problematic type information can be injected at any position in  the provided stream, in XML just by adding a class attribute:  xstream.fromXML("<string class='void'>Hello, world!</string>");  Impact: ======= The vulnerability may allow a remote attacker to cause a crash on the target  system resulting in a denial of service only by manipulating the processed  input stream.  Affected Versions: ================== Currently all versions until and including version are affected, but  workarounds exist.  Workarounds: ============ XStream contains since version a security framework to prevent an  attack described in This framework can also be used to  suppress the current vulnerability by setting:  xstream.denyTypes(void.class, Void.class);  Users of older XStream releases can register an own converter for the 'void'  type, that also protects against this attack:  xstream.registerConverter(new Converter() {   public boolean canConvert(Class type) {     return Void.class == type || void.class == type;   }   public Object unmarshal(HierarchicalStreamReader reader,  UnmarshallingContext context) {     throw new ConversionException("Type void cannot have an instance");   }   public void marshal(Object source, HierarchicalStreamWriter writer,  MarshallingContext context) {     throw new ConversionException("Type void cannot have an instance");   } }, XStream.PRIORITY_VERY_HIGH);  Regards, Jรถrg Schaible  Maintainer of XStream.   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      