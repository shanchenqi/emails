  oss-security - CVE Request: php-gettext: Arbitrary code execution in select_string,  ngettext and npgettext count parameter            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 17 Jan From: Salvatore Bonaccorso <carnil@...ian.org> To: OSS Security Mailinglist <oss-security@...ts.openwall.com> Subject: CVE Request: php-gettext: Arbitrary code execution in select_string,  ngettext and npgettext count parameter  Hi  Could you please assign a CVE to the followign php-gettext[0] issue:  >From [1]: > A code injection vulnerability was found in php-gettext. Evaluating > the plural form formula in ngettext family of calls can execute > arbitrary code if number is passed unsanitized from the untrusted > user.  Which in Fedora was addressed by updating to cf [2]. Original report is found in [3]: > CERT ID - (pending since > Product - php-gettext > Company - Danilo Segan > Name - php-gettext php code execution > Versions - > Patched - > Ref: >  > Vulnerability - "code injection into the ngettext family of calls: > evaluating the plural form formula can execute arbitrary code if > number is passed unsanitized from the untrusted user." >  > Description - > In and lower the select_string function appears as the > following: >  >   /** >    * Detects which plural form to take >    * >    * @access private >    * @param n count >    * @return int array index of the right plural form >    */ >   function select_string($n) { >     $string = $this->get_plural_forms(); >     $string = str_replace('nplurals',"\$total",$string); >     $string = str_replace("n",$n,$string); >     $string = str_replace('plural',"\$plural",$string); >     $total = 0; >     $plural = 0; >     eval("$string"); >     if ($plural >= $total) $plural = $total - 1; >     return $plural; >   } >  > The vulnerability here lies in the fact that $string is evaluated as > PHP code. If the plural form contains an 'n', and the $n parameter > is exposed to a malicious user, PHP code can be added to the value > of $string before it is evaluated. For websites, this means that a > vulnerable application could allow an attacker to run PHP code on > your site and potentially gain control of it. >  >  > The $n parameter in select_string can also be exposed through > ngettext and npgettext as the $number parameter. >  >  > The new release was made available shortly after notification > in and resolves the issue by raising an exception during > non-numeric input to these parameters.   [0] https://launchpad.net/php-gettext/  [1]  [2]  [3]   Regards,  Salvatore  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      