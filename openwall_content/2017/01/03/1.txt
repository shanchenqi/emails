  oss-security - Re: Nagios Core < Root Privilege Escalation             Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Tue, 3 Jan From: Sebastian Krahmer <krahmer@...e.com> To: oss-security@...ts.openwall.com Cc: jfrickson@...ios.com Subject: Re: Nagios Core < Root Privilege Escalation   Hi  On Tue, Dec 20, at Dawid Golunski wrote: > Vulnerability: > Nagios Core <  Root Privilege Escalation >  > Discovered by: Dawid Golunski (@dawid_golunski) > https://legalhackers.com >  > Severity: High  [...]  >  > Nagios daemon was found to open the log file before dropping its root  > privileges on startup: >  >  open("/usr/local/nagios/var/nagios.log", > O_RDWR|O_CREAT|O_APPEND, = 4 >  fcntl(4, F_SETFD, FD_CLOEXEC)     = 0 >  fchown(4,             = 0 >  getegid()                         = 0 >                       = 0 >  geteuid()                         = 0 > [...]  I have had a look at the upstream patch:   I think the patch is insufficient in many ways.   Basically the patch is introducing a O_NOFOLLOW and an fstat() afterwards. O_NOFOLLOW only works for symlinks, but attackers may also create hardlinks (on the same FS, lets put Linux link restrictions aside since it may affects other OS's too).  The fstat() check comes too late, the open() already happened and may caused side-effects (driver files etc.). OTOH, a stat() before open would be racy. Then, any of the path components of the logdir may be nagios owned and flipped with symlinks inside subdirs, since O_NOFOLLOW only fails on the last component being a symlink.  Then, IMHO its not a good idea to have the fix_log_file_owner(uid, gid) call inside drop_privileges(), since when drop_privileges() fails, for example because nagios attacker is spawning many zombies, making setuid() fail, the following logit() call may be invoked as root, ending again in open_log_file():  if(drop_privileges(nagios_user, nagios_group) == ERROR) {      logit(NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR,...  Aborting.");  Also, the fix_log_file_owner(uid, gid); call may fail and no error is checked on return. The call may fail because its calling open_log_file(). IMHO, dropping privs and setting up the logfiles should really be separated.   There is also this prctl(PR_SET_DUMPABLE, 1) call which may be dangerous as its a potential attack vector for ptrace injections.  TL;DR: there is no safe way of creating/chowning files inside user owned directories when running as root. Theres almost in all cases a race, since you have no fix point. Or at least making some fix point creates a lot of effort and headache. Its much cleaner to drop to user and then doing the file-related work. Since the logdir is nagios owned anyway, I dont see why there is this root/chown approach.   Sebastian  --   ~ perl self.pl ~ ~ krahmer@...e.com - SuSE Security Team   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      