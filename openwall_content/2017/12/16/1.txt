  oss-security - net/ipv4/raw.c: raw_sendmsg() race condition            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Sat, 16 Dec From: Mohamed Ghannam <simo.ghannam@...il.com> To: oss-security@...ts.openwall.com Subject: net/ipv4/raw.c: raw_sendmsg() race condition  Hi,   This is an announcement for which is a race condition leads to uninitialized stack variable, this might be used to gain code execution.   The bug was introduced  here :  And fixed here :   #######   BUG DETAILS  ############   in net/ipv4/raw.c:  static int raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)  {  ...  struct raw_frag_vec rfv;  [1]  ...   ...  if (!inet->hdrincl) {  [2]  rfv.msg = msg;  rfv.hlen = 0;   err = raw_probe_proto_opt(&rfv, &fl4);  if (err)  goto done;  }  ...  ...  if (inet->hdrincl)  [3]  err = raw_send_hdrinc(sk, &fl4, msg, len,        &rt, msg->msg_flags, &ipc.sockc);    else {  sock_tx_timestamp(sk, ipc.sockc.tsflags, &ipc.tx_flags);   if (!ipc.addr)  ipc.addr = fl4.daddr;  lock_sock(sk);  err = ip_append_data(sk, &fl4, raw_getfrag,       &rfv, len, 0, [4]       &ipc, &rt, msg->msg_flags);  ...  }   [1] rfv is not initialized and contains a pointer to a msghdr header structure.  [2], [3] There are multiple checks against inet->hdrincl without a lock.   When we achieve (by racing inet->hdrincl via setsockopt()) inet->hdrincl=1 in [1], and inet->hdrincl=0 in [2], rfv variable remains uninitialized and used in [4].  By spraying the stack with controlled user data , we can take control of msg pointer which is used later in ip_append_data().   In attachment  : poc.c + kernel panic log   #######   CREDITS  ############  Mohamed GHANNAM  Content of type "text/html" skipped  Download attachment "panic.log" of type "application/octet-stream" bytes)  View attachment "poc.c" of type "text/x-csrc" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      