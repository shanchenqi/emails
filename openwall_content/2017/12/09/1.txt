  oss-security - Re: Re: signed integer overflow in common_timer_get  on linux            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Fri, 08 Dec From: Daniel Micay <danielmicay@...il.com> To: oss-security@...ts.openwall.com, Greg KH <greg@...ah.com> Cc: at zhou security@...nel.org,  secalert@...hat.com,  security@...e.com, tglx@...utronix.de,  linux-distros@...openwall.org Subject: Re: Re: signed integer overflow in common_timer_get  on linux  On Fri, at Dan Carpenter wrote: > On Thu, Dec 07, at Greg KH wrote: > > On Thu, Dec 07, at at zhou wrote: > > > Hi all, > > >  > > > credit   to   L5@...vulcan team > > >  > > > I fuzzed the linux kernel and find signed integer overflow on > > > linux > > > > > > the crash log can see below, the .config and the poc file ,please > > > see the > > > attachments. > >  > > Odd, doesn't seem to affect a 4.9 or kernel here on my > > machines, is there something specific in the .config that might be > > triggering this? > >  >  > Greg, you're running with UBSAN? >  > I've always wondered how UBSAN was going to work because there are > *so* > many harmless integer overflows in the kernel.  That's my main > challenge > with trying to use static analysis for integer overflows. >  > regards, > dan carpenter  There are options for marking intended overflows to start moving towards it being more useful. There's no_sanitize for marking intended overflow, etc. at a function scope. The overflow intrinsics bypass the checks so they can be used to mark specific operations as having intended overflow for more clarity and better coverage.  Of course, people would need to agree that it has enough value to be worth putting in this effort. It can improve code readability despite the extra verbosity in these cases too, especially with good taste when choosing no_sanitize vs. marking specific operations.  Android uses both signed + unsigned overflow checks in production for their media stack via the trapping mode (debugging mode used more broadly) so it can be quite successful and can go beyond just using it for debugging.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      