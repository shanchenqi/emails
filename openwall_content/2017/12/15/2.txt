  oss-security - Re: vlc: type conversion vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Fri, 15 Dec From: Stiepan <stie@....swiss> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Cc: "bugtraq@...urityfocus.com" <bugtraq@...urityfocus.com>, "fulldisclosure@...lists.org" <fulldisclosure@...lists.org> Subject: Re: vlc: type conversion vulnerability  Nice job! By the way, when is back-porting of the fix to the current stable version(s) envisioned? (I doubt most oss OS distributions use the "HEAD of the VLC master branch", nor that most Windows or Mac users use the latest bleeding-edge build, leaving a potentially large window for exploitation if former versions don't get fixed; knowing VLC's popularity, I think that the question should be seriously considered) And is there a standalone patch or workaround that could be used for older versions (besides not opening mp4 videos anymore)?  > -------- Original Message -------- > Subject: [oss-security] vlc: type conversion vulnerability > Local Time: December 15, AM > UTC Time: December 15, AM > From: hji@...topia.com > To: oss-security@...ts.openwall.com, bugtraq@...urityfocus.com, fulldisclosure@...lists.org > > About > > A type conversion vulnerability exist in the MP4 demux module in VLC > This issue has been assigned and it could be > used to cause an arbitrary free. > > Details > > MP4 is a container format for video, audio, subtitles and images. The > various parts of an .mp4 are organized as hierarchical boxes/atoms in > big-endian byte ordering [1]. > > VLC processes these boxes by using a lookup table: > > > ,---- > | static const struct > | { > | uint32_t i_type; > | int (*MP4_ReadBox_function )( stream_t *p_stream, MP4_Box_t *p_box ); > | void (*MP4_FreeBox_function )( MP4_Box_t p_box ); > | uint32_t i_parent; / set parent to restrict, duplicating if needed; 0 for any / > | } MP4_Box_Function [] = > | { > | / Containers / > | { ATOM_moov, MP4_ReadBoxContainer, MP4_FreeBox_Common, 0 }, > | { ATOM_trak, MP4_ReadBoxContainer, MP4_FreeBox_Common, ATOM_moov }, > | .... > | / Last entry */ > | { 0, MP4_ReadBox_default, NULL, 0 } > | }; > ---- ,---- | static MP4_Box_t *MP4_ReadBox( stream_t *p_stream, MP4_Box_t *p_father ) | { | MP4_Box_t *p_box = calloc( 1, sizeof( MP4_Box_t ) ); /* Needed to ensure simple on error handler */ | unsigned int i_index; | .... | if( !MP4_ReadBoxCommon( p_stream, p_box ) ) | { | .... | } | .... | /* Now search function to call */ | for( i_index = 0; ; i_index++ ) | { | .... | if( ( MP4_Box_Function[i_index].i_type == p_box->i_type )|| | ( MP4_Box_Function[i_index].i_type == 0 ) ) | { | break; | } | } | | if( !(MP4_Box_Function[i_index].MP4_ReadBox_function)( p_stream, p_box ) ) | { | MP4_BoxFree( p_stream, p_box ); | return NULL; | } | | return p_box; | }---- > > MP4_ReadBox() allocates a MP4_Box_t structure and invokes > MP4_ReadBoxCommon() to read the properties common to all mp4 boxes; > i_size' andi_type' (and optionally an extended size). Afterwards, > MP4_Box_Function is used to dispatch further parsing to a suitable > function based on its i_type'. When VLC is done with the boxes, they are freed with MP4_BoxFree(): ,---- | void MP4_BoxFree( stream_t *s, MP4_Box_t *p_box ) | { | unsigned int i_index; | .... | /* Now search function to call */ | if( p_box->data.p_payload ) | { | for( i_index = 0; ; i_index++ ) | { | .... | if( ( MP4_Box_Function[i_index].i_type == p_box->i_type )|| | ( MP4_Box_Function[i_index].i_type == 0 ) ) | { | break; | } | } | if( MP4_Box_Function[i_index].MP4_FreeBox_function == NULL ) | { | .... | } | else | { | MP4_Box_Function[i_index].MP4_FreeBox_function( p_box ); | } | .... | }---- > > Again, i_type' is used to find a suitable free-function. The reason this may be problematic is thati_type' could be changed > when VLC handles sinf' andfrma' boxes in TrackCreateES() -- meaning > that a box may be read as one type, and freed as another. > > sinf' is the "Protection Scheme Information Box" and it's used for protected/encrypted media.frma' is the "Original Format Box" and it's > used to declare the format of the unprotected media. > > If a sinf/frma is found underneath a sample box, the i_type' of that sample is replaced with the original format declared in thefrma': > > > ,---- > | static int TrackCreateES( demux_t *p_demux, mp4_track_t *p_track, > | unsigned int i_chunk, es_out_id_t **pp_es ) > | { > | .... > | p_sample = MP4_BoxGet( p_track->p_stsd, "[%d]", > | i_sample_description_index - 1 ); > | .... > | p_track->p_sample = p_sample; > | > | if( ( p_frma = MP4_BoxGet( p_track->p_sample, "sinf/frma" ) ) && p_frma->data.p_frma ) > | { > | msg_Warn( p_demux, "Original Format Box: %4.4s", (char *)&p_frma->data.p_frma->i_type ); > | > | p_sample->i_type = p_frma->data.p_frma->i_type; > | } > | .... > ---- No sanity check is done to make sure that the MP4_FreeBox_function associated with the newi_type' is compatible with the old > MP4_ReadBox_function. > > Example > > One way to abuse the type change is to have asoun' changed to avide'. This results in a 72-byte allocation for the > p_sample_soun' member of the p_box->data union when the box is read: ,---- | static int MP4_ReadBox_sample_soun( stream_t *p_stream, MP4_Box_t *p_box ) | { | p_box->i_handler = ATOM_soun; | MP4_READBOX_ENTER( MP4_Box_data_sample_soun_t ); | ....---- > > > ,---- > | #define MP4_READBOX_ENTER( MP4_Box_data_TYPE_t ) > | .... > | if( !( p_box->data.p_payload = calloc( 1, sizeof( MP4_Box_data_TYPE_t ) ) ) ) > | { > | .... > | } > ---- wherep_box' is MP4_Box_t: > > > ,---- > | typedef struct MP4_Box_s > | { > | .... > | MP4_Box_data_t data; /* union of pointers on extended data depending > | on i_type (or i_usertype) */ > | .... > | } MP4_Box_t; > ---- and MP4_Box_data_t: ,---- | typedef union MP4_Box_data_s | { | .... | MP4_Box_data_sample_vide_t *p_sample_vide; | MP4_Box_data_sample_soun_t *p_sample_soun; | .... | void *p_payload; /* for unknow type */ | } MP4_Box_data_t;---- > > ,---- > | (gdb) p sizeof(MP4_Box_data_sample_soun_t) > | $1 = 72 > ---- After the box has had its type changed tovide' and it's later freed, > the p_sample_vide' member of the p_box->data union is used: ,---- | void MP4_FreeBox_sample_vide( MP4_Box_t *p_box ) | { | FREENULL( p_box->data.p_sample_vide->p_qt_image_description ); | }---- > > ,---- > | (gdb) p sizeof(MP4_Box_data_sample_vide_t) > | $2 = 96 > | (gdb) > ---- ,---- | typedef struct MP4_Box_data_sample_vide_s | { | ... | uint8_t *p_qt_image_description; | | } MP4_Box_data_sample_vide_t;---- > > p_sample_vide' is 24 bytes larger thanp_sample_soun', and > p_qt_image_description' is at the end of the vide struct; i.e. the pointer to be free()d is read out-of-bounds from potentially user-controlled memory. mkmp4.py' at [2] > > ,---- > | $ uname -imrs > | FreeBSD amd64 GENERIC > | $ ./mkmp4.py file.mp4 > | $ vlc --version > | VLC media player Weatherwax (revision > | $ gdb -q --args vlc file.mp4 > | (gdb) set breakpoint pending on > | (gdb) b > | No source file named libmp4.c. > | Breakpoint 1 pending. > | (gdb) b > | No source file named libmp4.c. > | Breakpoint 2 pending. > | (gdb) r > | [...] > | Breakpoint 3, MP4_ReadBox_sample_soun at > | p_box->data.p_sample_soun->p_qt_description = NULL; > | (gdb) p p_box->data.p_sample_soun > | $1 = (MP4_Box_data_sample_soun_t *) > | (gdb) c > | Continuing. > | > | Breakpoint 4, MP4_FreeBox_sample_vide at > | FREENULL( p_box->data.p_sample_vide->p_qt_image_description ); > | (gdb) p p_box->data.p_sample_vide > | $2 = (MP4_Box_data_sample_vide_t *) > | (gdb) p p_box->data.p_sample_vide->p_qt_image_description > | $3 = (uint8_t ) <Error reading address Bad address> > | (gdb) b free > | Breakpoint 5 at > | (gdb) c > | Continuing. > | > | Breakpoint 5, in free () from /lib/libc.so.7 > | (gdb) p/x $rdi > | $4 = > | (gdb) c > | Continuing. > | > | Program received signal SIGBUS, Bus error. > | in realloc () from /lib/libc.so.7 > | (gdb) x/i $rip > | mov rbx,QWORD PTR > | (gdb) i r > | rax > | rbx > | rcx 0x5a 90 > | [...] > | (gdb) bt 4 > | #0 in realloc () from /lib/libc.so.7 > | #1 in free () from /lib/libc.so.7 > | #2 in MP4_FreeBox_sample_vide at > | #3 in MP4_BoxFree at > `---- > > Solution > > This issue does not affect the HEAD of the VLC master branch. > > Footnotes > --------------------------------------------------------------- > > [1] [http://xhelmboyx.tripod.com/formats/mp4-layout.txt] > > [2] > > hji Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      