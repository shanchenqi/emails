  oss-security - Re: terminal emulators' processing of escape sequences            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 3 May From: Guido Berhoerster <guido+openwall.com@...hoerster.name> To: oss-security@...ts.openwall.com Subject: Re: terminal emulators' processing of escape sequences  * Solar Designer <solar@...nwall.com> > On Mon, May 01, at Solar Designer wrote: > > It is a well-known feature, previously discussed in here, that data > > printed to a terminal (emulator) may control that terminal, including > > making it effectively unusable until reset, and in some cases even > > pasting characters as if they were typed by the user.  Also as discussed > > what characters may be pasted varies by terminal - sometimes they can be > > arbitrary (e.g., if the terminal supports macro recording and playback > > via escape sequences) and sometimes not so (like a terminal reporting > > back its status, usually not followed by a linefeed, so not yet > > executing a shell command until further user assistance).  Here are some > > relevant threads: > >  > > > > > > > >  > > (I link to messages that started these threads, not necessarily to most > > informative messages in the threads.  So you might want to go through > > the threads with the "thread-next" links.) >  > Adding to the above older sub-topic of (mis)features rather than bugs, > here's a particularly relevant one, quoting excerpts from: >  > http://invisible-island.net/xterm/ctlseqs/ctlseqs.html >  > | Operating System Commands > |  > | OSC Ps ; Pt BEL > | OSC Ps ; Pt ST > [...] > |  > |             Ps = 5 2  -> Manipulate Selection Data.  These controls may > |           be disabled using the allowWindowOps resource.  The parameter > |           Pt is parsed as > |                Pc; Pd > |           The first, Pc, may contain zero or more characters from the > |           set c  p  s  0  1  2  3  4  5  6  7 .  It is used to construct > |           a list of selection parameters for clipboard, primary, select, > |           or cut buffers 0 through 7 respectively, in the order given. > |           If the parameter is empty, xterm uses s 0 , to specify the > |           configurable primary/clipboard selection and cut buffer 0. > |           The second parameter, Pd, gives the selection data.  Normally > |           this is a string encoded in base64.  The data becomes the new > |           selection, which is then available for pasting by other appli- > |           cations. > |           If the second parameter is a ? , xterm replies to the host > |           with the selection data encoded using the same protocol. > |           If the second parameter is neither a base64 string nor ? , > |           then the selection is cleared. >  > The potential for use in attacks is mitigated by the fact that the reply > triggered by setting the second parameter to ? is "encoded using the > same protocol", so its string portion is in base64 and thus in its > encoded form won't contain a linefeed.  However, altering X clipboard's > content is nevertheless nasty and perhaps unexpected by a user.  If the > user pastes the clipboard into a terminal, perhaps thinking there's > still an intended command they had saved in there before, the replaced > content's embedded linefeed(s) will be pasted as such, thereby > immediately executing the attacker's command(s). >  > The feature is in fact present and working in xterm when allowWindowOps > is enabled (even though the clipboard isn't specific to one "window"), > and is non-working when it's disabled.  (I've just tested.)  The window operations setting is not binary though, if allowWindowOps is enabled you can blacklist certain functionality via disallowedWindowOps, e.g.  allowWindowOps: true disallowedWindowOps: GetSelection,SetSelection  will disallow interference with the selection while still allowing other window ops. Note also that distributions such as Debian/Ubuntu disallow everything by default. --  Guido Berhoerster  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      