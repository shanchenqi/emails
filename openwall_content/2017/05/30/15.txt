  oss-security - Re: Linux kernel: stack buffer overflow with  controlled payload in get_options() function            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 30 May From: "kseifried@...hat.com" <kseifried@...hat.com> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel: stack buffer overflow with  controlled payload in get_options() function  On AM, Simon McVittie wrote: > On Tue, 30 May at Ilya Matveychikov wrote: >> When using get_options() it's possible to specify a range of numbers, >> like The problem is that it doesn't track array size while >> calling internally to get_range() which iterates over the range and >> fills the memory with numbers. >  > Is there a realistic way in which an attacker can provide Linux kernel > command-line arguments, without being able to achieve arbitrary code > execution via those command-line arguments? >  > In other words, is this a security vulnerability, or just a bug? >  > (If the attacker can already achieve arbitrary code execution then > this bug does not give them any capability they do not already have.) >  >     S  Here's my response from the initial assignment:  For the purposes of CVE this is a vulnerability (secureboot says you won't be monkeying with the kernel in general). In general: the promise of secureboot is not a fully secure system, the promise of secureboot is a secured bootchain, so for example the kernel itself is trusted and secure, once it goes to user space, then things go to "it depends" (e.g. if you have signed binaries that are secure, you would in theory have a secure userland, if you boot to unsigned binaries, then good luck and have fun). But code execution within the kernel is generally a definite no-no.  Please use for this issue.   --   Kurt Seifried -- Red Hat -- Product Security -- Cloud PGP A90B 66BF Red Hat Product Security contact: secalert@...hat.com  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      