  oss-security - Linux kernel: stack buffer overflow with controlled payload in get_options() function            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 30 May From: Ilya Matveychikov <matvejchikov@...il.com> To: oss-security@...ts.openwall.com Cc: Roee Hay <roeehay@...il.com> Subject: Linux kernel: stack buffer overflow with controlled payload in get_options() function  Hello,  I’ve found the bug in get_options() function which is used for parsing kernel’s cmdline string. The bug is similar to described by Roee Hay  Details =======  When using get_options() it's possible to specify a range of numbers, like The problem is that it doesn't track array size while calling internally to get_range() which iterates over the range and fills the memory with numbers.  Given that one can use “netdev=min-max” option to cause stack overflow with controlled payload. Here are some simple steps to reproduce the problem in QEMU-based virtual environment:  1) Run kernel in QEMU and wait for system halt:    $ -no-reboot -no-shutdown -kernel \     -append  2) After the system halt enter in QEMU console by pressing Ctrl-Alt-2 and dump   all the guest's machine memory:    compat_monitor0 console   QEMU monitor - type 'help' for more information   (qemu) dump-gest-memory dump <ENTER>   (qemu) quit <ENTER>  3) Look for pair of magic numbers (deadbeef,deadbef0) in "dump" file:    $ hexdump -C dump | grep "ef be ad de f0 be ad de"    ef be ad de f0 be ad de  f1 be ad de f2 be ad de  |................|  4) Follow address in hexdump:     ef be ad de f0 be ad de  f1 be ad de f2 be ad de  |................|    f3 be ad de f4 be ad de  f5 be ad de f6 be ad de  |................|    f7 be ad de f8 be ad de  f9 be ad de fa be ad de  |................|    fb be ad de fc be ad de  fd be ad de fe be ad de  |................|    ff be ad de 00 bf ad de  01 bf ad de 02 bf ad de  |................|    03 bf ad de 04 bf ad de  05 bf ad de 06 bf ad de  |................|    07 bf ad de 08 bf ad de  09 bf ad de 0a bf ad de  |................|    0b bf ad de 0c bf ad de  0d bf ad de 0e bf ad de  |................|    0f bf ad de 10 bf ad de  11 bf ad de 12 bf ad de  |................|    13 bf ad de 14 bf ad de  15 bf ad de 16 bf ad de  |................|    17 bf ad de 18 bf ad de  19 bf ad de 1a bf ad de  |................|    1b bf ad de 1c bf ad de  1d bf ad de 1e bf ad de  |................|    1f bf ad de 20 bf ad de  21 bf ad de 22 bf ad de  |.... ...!..."...|    23 bf ad de 24 bf ad de  25 bf ad de 26 bf ad de  |#...$...%...&...|    27 bf ad de 28 bf ad de  29 bf ad de 2a bf ad de  |'...(...)...*...|    2b bf ad de 2c bf ad de  2d bf ad de 2e bf ad de  |+...,...-.......|    2f bf ad de 30 bf ad de  31 bf ad de 32 bf ad de     33 bf ad de 34 bf ad de  35 bf ad de 36 bf ad de     37 bf ad de 38 bf ad de  39 bf ad de 3a bf ad de     3b bf ad de 3c bf ad de  3d bf ad de 3e bf ad de  |;...<...=...>...|    3f bf ad de 40 bf ad de  41 bf ad de 42 bf ad de  |?...@...A...B...|    43 bf ad de 44 bf ad de  45 bf ad de 46 bf ad de  |C...D...E...F...|    47 bf ad de 48 bf ad de  49 bf ad de 4a bf ad de  |G...H...I...J...|    4b bf ad de 4c bf ad de  4d bf ad de 4e bf ad de  |K...L...M...N...|    4f bf ad de 50 bf ad de  51 bf ad de 52 bf ad de  |O...P...Q...R...|    53 bf ad de 54 bf ad de  55 bf ad de 56 bf ad de  |S...T...U...V...|    57 bf ad de 58 bf ad de  59 bf ad de 5a bf ad de  |W...X...Y...Z...|    5b bf ad de 5c bf ad de  5d bf ad de 5e bf ad de  |[...\...]...^...|    5f bf ad de 60 bf ad de  61 bf ad de 62 bf ad de  |_...`...a...b...|    63 bf ad de 64 bf ad de  65 bf ad de 66 bf ad de  |c...d...e...f...|    67 bf ad de 68 bf ad de  69 bf ad de 6a bf ad de  |g...h...i...j...|    6b bf ad de 6c bf ad de  6d bf ad de 6e bf ad de  |k...l...m...n...|    6f bf ad de 70 bf ad de  71 bf ad de 72 bf ad de  |o...p...q...r...|    73 bf ad de 74 bf ad de  75 bf ad de 76 bf ad de  |s...t...u...v...|    77 bf ad de 78 bf ad de  79 bf ad de 7a bf ad de  |w...x...y...z...|    7b bf ad de 7c bf ad de  7d bf ad de 7e bf ad de  |{...|...}...~...|    7f bf ad de 80 bf ad de  81 bf ad de 82 bf ad de  |................|    83 bf ad de 84 bf ad de  85 bf ad de 86 bf ad de  |................|    87 bf ad de 88 bf ad de  89 bf ad de 8a bf ad de  |................|    8b bf ad de 8c bf ad de  8d bf ad de 8e bf ad de  |................|   ...  The patch for the bug was submitted by me to LKML list recently:  This was reported to security@...nel.org, also.  Ilya Matveychikov Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      