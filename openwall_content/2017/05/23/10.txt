  oss-security - qpdf: three infinite loop in libqpdf            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 23 May From: "Agostino Sarubbo" <ago@...too.org> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: qpdf: three infinite loop in libqpdf  Description: qpdf QPDF is a command-line program that does structural, content-preserving transformations on PDF files.  I discovered three infinite loop. Upstream didnâ€™t provide a feedback, so they might have the same root cause.  # qpdf $FILE - AddressSanitizer: stack-overflow on address (pc bp sp T0)     #0 in QPDFObjectHandle::assertInitialized() const     #1 in QPDFObjectHandle::isIndirect()     #2 in QPDFObjectHandle::releaseResolved()     #3 in QPDFObjectHandle::ReleaseResolver::releaseResolved(QPDFObjectHandle&)     #4 in QPDF_Array::releaseResolved()     #5 in QPDFObject::ObjAccessor::releaseResolved(QPDFObject*)     #6 in QPDFObjectHandle::releaseResolved()     #7 in QPDFObjectHandle::ReleaseResolver::releaseResolved(QPDFObjectHandle&)     #8 in QPDF_Dictionary::releaseResolved()     #9 in QPDFObject::ObjAccessor::releaseResolved(QPDFObject*)     #10 in QPDFObjectHandle::releaseResolved()     #11 in QPDFObjectHandle::ReleaseResolver::releaseResolved(QPDFObjectHandle&)     #12 in QPDF_Dictionary::releaseResolved() Reproducer: CVE:  ############################  # qpdf $FILE -     #0 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)     #1 in operator new(unsigned long)     #2 in std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator const&)     #3 in std::string::_Rep::_M_clone(std::allocator const&, unsigned long)     #4 in std::string::reserve(unsigned long)     #5 in std::string::push_back(char)     #6 in std::string::operator+=(char)     #7 in QPDFTokenizer::presentCharacter(char)     #8 in QPDFTokenizer::readToken(PointerHolder, std::string const&)     #9 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool)     #10 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool)     #11 in QPDFObjectHandle::parse(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*)     #12 in QPDF::readObject(PointerHolder, std::string const&, int, int, bool)     #13 in QPDF::reconstruct_xref(QPDFExc&)     #14 in QPDF::readObjectAtOffset(bool, long long, std::string const&, int, int, int&, int&)     #15 in QPDF::resolve(int, int)     #16 in QPDF::Resolver::resolve(QPDF*, int, int)     #17 in QPDFObjectHandle::dereference()     #18 in QPDFObjectHandle::isName()     #19 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool)     #20 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool)     #21 in QPDFObjectHandle::parse(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*)     #22 in QPDF::readObject(PointerHolder, std::string const&, int, int, bool)     #23 in QPDF::reconstruct_xref(QPDFExc&)     #24 in QPDF::readObjectAtOffset(bool, long long, std::string const&, int, int, int&, int&)     #25 in QPDF::resolve(int, int)     #26 in QPDF::Resolver::resolve(QPDF*, int, int)     #27 in QPDFObjectHandle::dereference()     #28 in QPDFObjectHandle::isName()     #29 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool)     #30 in QPDFObjectHandle::parseInternal(PointerHolder, std::string const&, QPDFTokenizer&, bool&, QPDFObjectHandle::StringDecrypter*, QPDF*, bool, bool, bool) Reproducer: CVE:  ############################  # qpdf $FILE - AddressSanitizer: stack-overflow on address (pc bp sp T0)     #0 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)     #1 in operator new(unsigned long)     #2 in std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator const&)     #3 in std::string::_Rep::_M_clone(std::allocator const&, unsigned long)     #4 in std::string::reserve(unsigned long)     #5 in std::string::push_back(char)     #6 in std::string::operator+=(char)     #7 in QPDF_Name::normalizeName(std::string const&)     #8 in QPDF_Dictionary::unparse()     #9 in QPDFObjectHandle::unparseResolved()     #10 in QPDFObjectHandle::unparse()     #11 in QPDF_Array::unparse()     #12 in QPDFObjectHandle::unparseResolved()     #13 in QPDFObjectHandle::unparse()     #14 in QPDF_Dictionary::unparse()     #15 in QPDFObjectHandle::unparseResolved()     #16 in QPDFObjectHandle::unparse()     #17 in QPDF_Array::unparse()     #18 in QPDFObjectHandle::unparseResolved()     #19 in QPDFObjectHandle::unparse()     #20 in QPDF_Dictionary::unparse() Reproducer: CVE:  ############################  Affected version:  Fixed version: N/A  Commit fix: N/A  Credit: These bugs were discovered by Agostino Sarubbo of Gentoo.  Timeline: bug discovered and reported to upstream blog post about the issue CVE assigned  Note: These bugs were found with American Fuzzy Lop.  Permalink:  -- Agostino Sarubbo Gentoo Linux Developer    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      