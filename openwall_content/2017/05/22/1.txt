  oss-security - Re: Invalid writes and reads in libxml2            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 22 May From: Manh Dung Nguyen <dungnguy@...p.nus.edu.sg> To: Marcel Bรถhme <boehme.marcel@...il.com> Cc: oss-security@...ts.openwall.com, Thuan Pham <thuanpv.nus@...il.com>,  	veillard@...hat.com Subject: Re: Invalid writes and reads in libxml2  Dear All,  Please find below the CVEs that have been assigned by MITRE.  1) BUG - STACK OVERFLOW IN VALID.C:  2) BUG - ANOTHER STACK OVERFLOW in VALID.C:  3) BUG - HEAP-BASED BUFFER OVERFLOW IN xmlDictComputeFastKey:  4) BUG - HEAP-BASED BUFFER OVERFLOW IN xmlDictAddString:  Thanks, Manh Dung    On 15 May at Marcel Bรถhme <boehme.marcel@...il.com> wrote:  > Dear all, > > In a fuzzing session with AFLGo, a directed version of AFL/AFLFast, we > found four crashers (two invalid writes and two invalid reads) in LibXML2. > These were reported to the maintainers one month ago. We provided analysis > and patches and sent several email-reminders, explaining our intend to > disclose, but there has been no response. The bug reports are currently not > public. So, in the spirit of full disclosure, we attach the bug reports > with analysis and patches here. Using the record of this email, we are > going to request CVEs from MITRE. > > We can reproduce these vulns in the DOM-validator of PHP ( > and recommend to apply the patches > provided below to prevent exploitation. Patches were checked against the > regression test suite of PHP and LibXML2. However, these patches have *not* > been reviewed, yet. > > Credits for finding, analysing, and patching the errors go to Marcel Bรถhme > and Van-Thuan Pham of TSUNAMi Security Research Centre, National University > of Singapore. > We thank Manh-Dung Nguyen for preparing this disclosure notice. > > +++++++++++++++++++++++++++++++++++++++++++++++ > +  1) BUG - STACK OVERFLOW IN VALID.C > +  > +++++++++++++++++++++++++++++++++++++++++++++++ > > Here is a quick analysis: > The function xmlSnprintfElementContent in valid.c is supposed to > recursively dump the element content definition into a char buffer 'buf' of > size 'size'. The variable len is assigned strlen(buf). If the content->type > is XML_ELEMENT_CONTENT_ELEMENT, then (i) the content->prefix is appended to > buf (if it actually fits) whereupon (ii) content->name is written to the > buffer. However, the check whether the content->name actually fits also > uses 'len' rather than the updated buffer length strlen(buf). This allows > us to write about "size" many bytes beyond the allocated memory. > > $ ./xmllint --version > /src/libxml2/.libs/lt-xmllint: using libxml version > >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > > How to reproduce: > $ s=$(printf "0") > $ t=$(printf "0") > $ echo '<!DOCTYPEa[<!ELEMENT a (F'"${s// /0}:${t// /0}"')><!ATTLIST > a><!ELEMENT b EMPTY><!ATTLIST b s CDATA #IMPLIED>]><a/>' > bug1.xml > $ ./xmllint --valid bug1.xml > ================================================================= > AddressSanitizer: stack-buffer-overflow on address > at pc bp sp > WRITE of size at thread T0 >    #0 in xmlSnprintfElementContent__internal_alias > >    #1 in xmlValidateElementContent > >    #2 in xmlValidateOneElement__internal_alias > >    #3 in xmlSAX2EndElementNs__internal_alias > >    #4 in xmlParseElement__internal_alias > >    #5 in xmlParseDocument__internal_alias > >    #6 in xmlDoRead >    #7 in xmlCtxtReadFile__internal_alias > >    #8 in parseAndPrintFile >    #9 in main >    #10 in __libc_start_main > >    #11 in _start > > Address is located in stack of thread T0 at offset in > frame >    #0 in xmlValidateOneElement__internal_alias > > > This frame has 5 object(s): >     [32, 82) 'fn.i' (line >     'expr.i' (line >     'list.i' (line <== Memory access at offset > partially underflows this variable >     'extsubset' (line >     'fn' (line > > PATCHED BY: > --- a/valid.c > +++ a/valid.c > @@ @@ xmlSnprintfElementContent(char *buf, int size, > xmlElementContentPtr content, int >                 } >                 strcat(buf, (char *) content->prefix); >                 strcat(buf, ":"); > +               len += xmlStrlen(content->prefix); >             } >             if (size - len < xmlStrlen(content->name) + 10) { >                 strcat(buf, " ..."); > > +++++++++++++++++++++++++++++++++++++++++++++++ > +  BUG - ANOTHER STACK OVERFLOW in VALID.C > +  https://bugzilla.gnome.org/show_bug.cgi?id= > +++++++++++++++++++++++++++++++++++++++++++++++ > > Here is a quick analysis: > The bug is related to but different from Bug Function > xmlSnprintfElementContent in valid.c is supposed to recursively dump the > element content definition into a char buffer 'buf' of size 'size'. At the > end of the routine, the function may strcat two more characters without > checking whether the current strlen(buf) + 2 < size. > > $ ./xmllint --version > /src/libxml2/.libs/lt-xmllint: using libxml version > >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > > How to reproduce: > $ ./xmllint --valid bug2.xml > AddressSanitizer: stack-buffer-overflow on address > at pc bp sp > WRITE of size 2 at thread T0 >    #0 in xmlSnprintfElementContent__internal_alias > /src/libxml2/valid.c >    #1 in xmlValidateElementContent > >    #2 in xmlValidateOneElement__internal_alias > >    #3 in xmlSAX2EndElementNs__internal_alias > >    #4 in xmlParseEndTag2 >    #5 in xmlParseElement__internal_alias > >    #6 in xmlParseDocument__internal_alias > >    #7 in xmlDoRead >    #8 in xmlCtxtReadFile__internal_alias > >    #9 in parseAndPrintFile >    #10 in main >    #11 in __libc_start_main > >    #12 in _start > > Address is located in stack of thread T0 at offset in > frame >    #0 in xmlValidateOneElement__internal_alias > > >  This frame has 5 object(s): >    [32, 82) 'fn.i' (line >    'expr.i' (line <== Memory access at offset > overflows this variable >    'list.i' (line >    'extsubset' (line >    'fn' (line > HINT: this may be a false positive if your program uses some custom > stack unwind mechanism or swapcontext >      (longjmp and C++ exceptions *are* supported) > SUMMARY: AddressSanitizer: stack-buffer-overflow /src/libxml2/valid.c > in xmlSnprintfElementContent__internal_alias > > PATCHED BY: > --- a/valid.c > +++ a/valid.c > @@ @@ xmlSnprintfElementContent(char *buf, int size, > xmlElementContentPtr content, int >                 xmlSnprintfElementContent(buf, size, content->c2, 0); >             break; >      } > +    if (size - strlen(buf) <= 2) return; >      if (englob) >          strcat(buf, ")"); >      switch (content->ocur) { > > +++++++++++++++++++++++++++++++++++++++++++++++ > +  BUG - HEAP-BASED BUFFER OVERFLOW IN xmlDictComputeFastKey (NEW) > +  https://bugzilla.gnome.org/show_bug.cgi?id= > +++++++++++++++++++++++++++++++++++++++++++++++ > > We understand that a similar bug report (non-public) was filed before: > > and fixed about a year ago in git revision > > > > However, the patch was apparently incomplete. > > How to reproduce with xmllint: > $ ./xmllint --version > /src/libxml2/.libs/lt-xmllint: using libxml version > >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > > > $ printf '<?l?><!DOCTYPED[<!ENTITY' '%' > > bug3.xml > $ ./xmlint --memory --oldxml10 bug3.xml > > ASAN says (for libxml2 in trunk): > ================================================================= > AddressSanitizer: heap-buffer-overflow on address > at pc bp sp > READ of size 1 at thread T0 >    #0 in xmlDictComputeFastKey >    #1 in xmlDictLookup__internal_alias > >    #2 in xmlParseNameComplex /src/libxml2/parser.c >    #3 in xmlParseName__internal_alias > >    #4 in xmlParseQName >    #5 in xmlParseStartTag2 >    #6 in xmlParseElement__internal_alias > >    #7 in xmlParseDocument__internal_alias > >    #8 in xmlDoRead >    #9 in xmlReadMemory__internal_alias > >    #10 in parseAndPrintFile >    #11 in main >    #12 in __libc_start_main > >    #13 in _start > > is located 1 bytes to the left of 6-byte region > > allocated by thread T0 here: >    #0 in malloc /src/llvm/projects/compiler- > rt/lib/asan/asan_malloc_linux.cc:66 >    #1 in xmlNewBlanksWrapperInputStream > >    #2 in xmlParsePEReference__internal_alias > >    #3 in xmlParseMarkupDecl__internal_alias > >    #4 in xmlParseInternalSubset >    #5 in xmlParseDocument__internal_alias > >    #6 in xmlDoRead >    #7 in xmlReadMemory__internal_alias > >    #8 in parseAndPrintFile >    #9 in main >    #10 in __libc_start_main > > > SUMMARY: AddressSanitizer: heap-buffer-overflow > in xmlDictComputeFastKey > > Valgrind says (for my installed version of xmllint) > $  xmllint --version > xmllint: using libxml version >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > Zlib Lzma > > Invalid read of size 1 >    at xmlDictLookup (in > >    by xmlParseName (in > >    by ??? (in > >    by ??? (in > >    by xmlParseElement (in > >    by xmlParseDocument (in > >    by xmlReadMemory (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) >  Address is 1 bytes before a block of size 6 alloc'd >    at malloc (in /usr/lib/valgrind/vgpreload_ > memcheck-amd64-linux.so) >    by ??? (in > >    by ??? (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadMemory (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) > > Invalid read of size 1 >    at (in > /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so) >    by ??? (in > >    by xmlDictLookup (in > >    by xmlParseName (in > >    by ??? (in > >    by ??? (in > >    by xmlParseElement (in > >    by xmlParseDocument (in > >    by xmlReadMemory (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) >  Address is 1 bytes before a block of size 6 alloc'd >    at malloc (in /usr/lib/valgrind/vgpreload_ > memcheck-amd64-linux.so) >    by ??? (in > >    by ??? (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadMemory (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) > > > PATCHED BY: > --- a/parser.c > +++ a/parser.c > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >      int len = 0, l; >      int c; >      int count = 0; > +    size_t startPosition = 0; > >  #ifdef DEBUG >      nbParseNameComplex++; > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >      GROW; >      if (ctxt->instate == XML_PARSER_EOF) >          return(NULL); > +    startPosition = CUR_PTR - BASE_PTR; >      c = CUR_CHAR(l); >      if ((ctxt->options & XML_PARSE_OLD10) == 0) { >          /* > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >          xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "Name"); >          return(NULL); >      } > -    if ((*ctxt->input->cur == '\n') && (ctxt->input->cur[-1] == '\r')) > -        return(xmlDictLookup(ctxt->dict, ctxt->input->cur - (len + 1), > len)); > -    return(xmlDictLookup(ctxt->dict, ctxt->input->cur - len, len)); > + > +    if (BASE_PTR + startPosition + len > ctxt->input->end) > +      return(NULL); > + > +    return(xmlDictLookup(ctxt->dict, BASE_PTR + startPosition, len)); >  } > >  /** > > +++++++++++++++++++++++++++++++++++++++++++++++ > +  BUG - HEAP-BASED BUFFER OVERFLOW IN xmlDictAddString > +  https://bugzilla.gnome.org/show_bug.cgi?id= > +++++++++++++++++++++++++++++++++++++++++++++++ > > Again, we understand that a similar bug report was filed before: > > and fixed about a year ago in git revision > https://git.gnome.org/browse/libxml2/commit/?id= > > > However, this patch was apparently incomplete, as well. > > LIBXML version: > $ ./xmllint --version > /src/libxml2/.libs/lt-xmllint: using libxml version > >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > > How to reproduce: > $ ./xmllint --oldxml10 bug4.xml > > ASAN says: > ================================================================= > AddressSanitizer: heap-buffer-overflow on address > at pc bp sp > > READ of size at thread T0 >    #0 in __asan_memcpy /src/llvm/projects/compiler- > >    #1 in xmlDictAddString >    #2 in xmlDictLookup__internal_alias > >    #3 in xmlParseNameComplex /src/libxml2/parser.c >    #4 in xmlParseName__internal_alias > >    #5 in xmlParseElementDecl__internal_alias > >    #6 in xmlParseMarkupDecl__internal_alias > >    #7 in xmlParseInternalSubset >    #8 in xmlParseDocument__internal_alias > >    #9 in xmlDoRead >    #10 in xmlReadFile__internal_alias > >    #11 in parseAndPrintFile >    #12 in main >    #13 in __libc_start_main > >    #14 in _start > > is located 0 bytes to the right of 32-byte region > > allocated by thread T0 here: >    #0 in malloc /src/llvm/projects/compiler- > rt/lib/asan/asan_malloc_linux.cc:66 >    #1 in xmlDictLookup__internal_alias > >    #2 in xmlDetectSAX2 >    #3 in xmlParseDocument__internal_alias > >    #4 in xmlDoRead >    #5 in xmlReadFile__internal_alias > >    #6 in parseAndPrintFile >    #7 in main >    #8 in __libc_start_main > > > > For the version of libxml that comes pre-installed on Ubuntu > $ xmllint --version > xmllint: using libxml version >   compiled with: Threads Tree Output Push Reader Patterns Writer SAXv1 FTP > HTTP DTDValid HTML Legacy C14N Catalog XPath XPointer XInclude Iconv > Unicode Regexps Automata Expr Schemas Schematron Modules Debug > Zlib Lzma > > VALGRIND says: > ERROR SUMMARY: errors from 2 contexts (suppressed: 0 from 0) > > 54 errors in context 1 of 2: > Invalid read of size 1 >    at (in > /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so) >    by ??? (in > >    by xmlDictLookup (in > >    by xmlParseName (in > >    by xmlParseElementDecl (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadFile (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) >  Address is 0 bytes after a block of size alloc'd >    at malloc (in /usr/lib/valgrind/vgpreload_ > memcheck-amd64-linux.so) >    by xmlNewInputStream (in > >    by ??? (in > >    by ??? (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadFile (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) > > > errors in context 2 of 2: > Invalid read of size 1 >    at (in > /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so) >    by ??? (in > >    by xmlDictLookup (in > >    by xmlParseName (in > >    by xmlParseElementDecl (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadFile (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) >  Address is 1 bytes after a block of size alloc'd >    at malloc (in /usr/lib/valgrind/vgpreload_ > memcheck-amd64-linux.so) >    by xmlNewInputStream (in > >    by ??? (in > >    by ??? (in > >    by xmlParseMarkupDecl (in > >    by ??? (in > >    by xmlParseDocument (in > >    by xmlReadFile (in > >    by ??? (in /usr/bin/xmllint) >    by ??? (in /usr/bin/xmllint) >    by (below main) > > ERROR SUMMARY: errors from 2 contexts (suppressed: 0 from 0) > > PATCHED BY: > --- a/parser.c > +++ a/parser.c > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >      int len = 0, l; >      int c; >      int count = 0; > +    size_t startPosition = 0; > >  #ifdef DEBUG >      nbParseNameComplex++; > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >      GROW; >      if (ctxt->instate == XML_PARSER_EOF) >          return(NULL); > +    startPosition = CUR_PTR - BASE_PTR; >      c = CUR_CHAR(l); >      if ((ctxt->options & XML_PARSE_OLD10) == 0) { >          /* > @@ @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) { >          xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "Name"); >          return(NULL); >      } > -    if ((*ctxt->input->cur == '\n') && (ctxt->input->cur[-1] == '\r')) > -        return(xmlDictLookup(ctxt->dict, ctxt->input->cur - (len + 1), > len)); > -    return(xmlDictLookup(ctxt->dict, ctxt->input->cur - len, len)); > + > +    if (BASE_PTR + startPosition + len > ctxt->input->end) > +      return(NULL); > + > +    return(xmlDictLookup(ctxt->dict, BASE_PTR + startPosition, len)); >  } > >  /** > Best regards, > - Marcel > > --- > Marcel Boehme > Postdoctoral Research Fellow > TSUNAMi Security Research Centre > National University of Singapore   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      