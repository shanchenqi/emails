  oss-security - binutils: multiple crashes            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 18 May From: "Agostino Sarubbo" <ago@...too.org> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: binutils: multiple crashes  Description: binutils are a collection of binary tools necessary to build programs.  After the post on oss-security from Thuan Pham I was interested too into the fuzz of binutils to see what will happenâŚHere are the partial  results (I didnât run the fuzzers against all command-line tools):  # readelf -a $FILE AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 1 at thread T0     #0 in byte_get_little_endian     #1 in process_mips_specific     #2 in process_arch_specific     #3 in process_object     #4 in process_file     #5 in main     #6 in __libc_start_main     #7 in dl_iterate_phdr  is located 0 bytes to the right of 9-byte region allocated by thread T0 here:     #0 in malloc     #1 in get_data     #2 in process_mips_specific     #3 in process_arch_specific     #4 in process_object     #5 in process_file     #6 in main     #7 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow in  byte_get_little_endian Affected version: Fixed version: N/A Reproducer: Commit fix: CVE:  ###########################################  # readelf -a $FILE AddressSanitizer failed to allocate bytes of LargeMmapAllocator (error code: 12) [...] CHECK failed:  "((0 && "unable to  mmap")) != (0)" (0x0, 0x0) [...]     #8 in xmalloc     #9 in cmalloc     #10 in get_program_headers     #11 in process_program_headers     #12 in process_object     #13 in process_file     #14 in main     #15 in __libc_start_main     #16 in getenv Affected version: Fixed version: N/A Reproducer: Commit fix: CVE:  ###########################################  # readelf -a $FILE AddressSanitizer failed to allocate bytes allocator is terminating the process instead of returning 0 you don't like this behavior set allocator_may_return_null=1 CHECK failed:  "((0)) != (0)"  (0x0, 0x0) [...]     #6 in xmalloc     #7 in cmalloc     #8 in process_mips_specific     #9 in process_arch_specific     #10 in process_object     #11 in process_file     #12 in main     #13 in __libc_start_main     #14 in getenv Affected version: master after commit which fixed the bug above Fixed version: N/A Reproducer: Commit fix: CVE: ###########################################  # readelf -a $FILE AddressSanitizer: heap-buffer-overflow on address at pc bp sp READ of size 1 at thread T0     #0 in byte_get_little_endian     #1 in process_mips_specific     #2 in process_arch_specific     #3 in process_object     #4 in process_file     #5 in main     #6 in __libc_start_main     #7 in getenv  is located 0 bytes to the right of 9-byte region allocated by thread T0 here:     #0 in malloc     #1 in get_data     #2 in process_mips_specific     #3 in process_arch_specific     #4 in process_object     #5 in process_file     #6 in main     #7 in __libc_start_main  SUMMARY: AddressSanitizer: heap-buffer-overflow in  byte_get_little_endian Affected version: Fixed version: N/A Reproducer: Commit fix: CVE:  ###########################################  # readelf -a $FILE runtime error: signed integer overflow: -  cannot be represented in type 'long' Affected version: master at (dunno about other versions) Fixed version: N/A Reproducer: Commit fix: CVE:  ###########################################  # readelf -a $FILE runtime error: shift exponent 64 is too large for 64-bit type  'unsigned long' Affected version: master at (dunno about other versions) Fixed version: N/A Reproducer: Commit fix: CVE:  ###########################################  # readelf -a $FILE AddressSanitizer: SEGV on unknown address (pc bp sp T0) signal is caused by a READ memory access. address points to the zero page.     #0 in print_symbol_for_build_attribute     #1 in process_note     #2 in process_notes_at     #3 in process_corefile_note_segments     #4 in process_object     #5 in process_file     #6 in main     #7 in __libc_start_main     #8 in getenv  AddressSanitizer can not provide additional info. SUMMARY: AddressSanitizer: SEGV in  print_symbol_for_build_attribute Affected version: master at (dunno about other versions) Fixed version: N/A Reproducer: Commit fix: N/A, seems to be fixed by one of the previous commits. CVE:  ###########################################  Credit: These bugs were discovered by Agostino Sarubbo of Gentoo.  Timeline: first bug discovered and reported to upstream blog post about the issue CVE assigned  Note: These bugs were found with American Fuzzy Lop.  Permalink:  -- Agostino Sarubbo Gentoo Linux Developer    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      