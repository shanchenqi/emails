  oss-security - terminal emulators' processing of escape sequences            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 1 May From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: terminal emulators' processing of escape sequences  Hi,  It is a well-known feature, previously discussed in here, that data printed to a terminal (emulator) may control that terminal, including making it effectively unusable until reset, and in some cases even pasting characters as if they were typed by the user.  Also as discussed what characters may be pasted varies by terminal - sometimes they can be arbitrary (e.g., if the terminal supports macro recording and playback via escape sequences) and sometimes not so (like a terminal reporting back its status, usually not followed by a linefeed, so not yet executing a shell command until further user assistance).  Here are some relevant threads:   (I link to messages that started these threads, not necessarily to most informative messages in the threads.  So you might want to go through the threads with the "thread-next" links.)  Besides (mis)features, there may also be implementation bugs.  A couple of weeks ago, I brought in here vulnerabilities in terminal escape handling in minicom and prl-vzvncserver (both already fixed in latest versions by then):   I already knew this wouldn't be the end of the story as some other terminal emulators exhibited suspicious behavior when targeted with streams of unusual escape sequences involving large or negative integer parameters.  I sent the following to the distros list on April 17, presented here with updates reflecting the current status.  I wrote a script, and indeed there are crashes:  --- #!/usr/bin/perl  # List of numbers stolen from vncrush.pl @numbers = ('0', '-0', '1', '-1',                                           '0x3fffffff', '0x7ffffffe', '0x7fffffff', '0xffff', '0xfffffffe', '0xfffffff', '0xffffffff',                sub test { 	local $what = shift; 	print "Testing CSI $what\n"; 	print . $what . "first\nsecond\n"; #	print . $what . "first\nsecond\n"; }  foreach $n1 (@numbers) { 	for ($c = 0; $c < $c++) { 		test($n1 . chr($c)); 		foreach $n2 (@numbers) { 			test($n1 . ";" . $n2 . chr($c)); 		} 	} } ---  rxvt:  --- Program received signal SIGSEGV, Segmentation fault. in rxvt_scroll_text.part () (gdb) bt #0  in rxvt_scroll_text.part () #1  in rxvt_process_csi_seq () #2  in rxvt_main_loop () #3  in main ()        %r15,%rbp                    %ecx,%ecx            %cx,(%rdx,%rax,1)       =>    (%rdx,%rbp,1),%rcx                         (%rdx,%rbp,1),%rcx                    (gdb) p/x $rdx $1 = (gdb) p/x $rbp $2 = ---  I did not investigate this closely.  Jason A. Donenfeld of Gentoo volunteered to investigate it, and came up with findings that he's to post to oss-security on his own.  xfce4-terminal:  --- Gdk-ERROR **: The program 'xfce4-terminal' received an X Window System error. This probably reflects a bug in the program. The error was 'BadAlloc (insufficient resources for operation)'.   (Details: serial error_code 11 request_code 12 minor_code 0)   (Note to programmers: normally, X errors are reported asynchronously;    that is, you will receive the error a while after causing it.    To debug your program, run it with the --sync command line    option to change this behavior. You can then get a meaningful    backtrace from your debugger if you break on the gdk_x_error() function.)  Program received signal SIGTRAP, Trace/breakpoint trap. in g_logv () from (gdb) bt #0  in g_logv () at #1  in g_log () at #2  in gdk_x_error () at #3  in _XError () at #4  in handle_error () at #5  in handle_response () at #6  in _XEventsQueued () at #7  in XPending () at #8  in gdk_event_check () at #9  in g_main_context_check () at #10 in g_main_context_iterate.isra () at #11 in g_main_loop_run () at #12 in gtk_main () at #13 in main () ---  and gnome-terminal looks similar, also taking down the parent ghome-terminal (perhaps via their shared server).  Again I did not investigate this, but unlike rxvt these crashes look only indirectly related to the escapes.  Yves-Alexis Perez of Debian pointed out that whether these crashes occur or not may be related to the version of vte.  I'll leave it up to him to post a follow-up on that.  terminology:  --- _handle_esc_csi() unhandled CSI 'x': _handle_esc_csi() unhandled CSI 'x': _handle_esc_csi() unhandled CSI 'x': ---  and so on, where it effectively locks up (is stuck re-processing this same escape sequence in an endless loop?)  Before reaching this point, it plays funny music.  Several others sort of passed the test - no crash, but then it's typical to see something injected onto the shell command line, e.g. in lilyterm it's where I omitted (denoted with "[...]") many other repeats of and many more "x" characters.  I've seen similar injected strings from running this script on many other terminals.  There was no automatic shell command execution - the person would still need to press Enter in order to be fully trapped.  Note that my trivial script does not test for an equivalent to minicom's escparms[] array overflow - that would need to be tested separately. Also, many more orderings of the escape commands (e.g., setting up a scroll region and then moving the cursor) and many more integer values may be tested.  Unfortunately, I did not record which terminal emulators did not crash for me.  However, Jason recorded both kinds of results for him, coming up with:  Konsole: no crash Xterm: no crash rxvt: crash Yakuake: no crash Mosh (which is a terminal emulator, after all): no crash Screen: CPU usage --> DoS rxvt-unicode: no crash Qterminal: no crash putty: no crash  This adds "screen" to terminal emulators with problematic processing of terminal escapes.  Due to minor known impact, we did not handle this under embargo - it should be investigated and fixed now, in public.  For testing minicom, which sort of passed the test (short for the known escparms[] buffer overflow), I used a different revision of the script:  --- #!/usr/bin/perl  # List of numbers stolen from vncrush.pl @numbers = ('0', '-0', '1', '-1',                                           '0x3fffffff', '0x7ffffffe', '0x7fffffff', '0xffff', '0xfffffffe', '0xfffffff', '0xffffffff',                sub test { 	local $what = shift; 	print STDERR "Testing CSI $what\n"; 	do { 		open(PIPE, "> fifo") || die; 		print PIPE . $what . "first\nsecond\n"; 	} until (close(PIPE)); #	select undef, undef, undef, }  $SIG{'PIPE'} = 'IGNORE';  foreach $n1 (@numbers) { 	for ($c = 0; $c < $c++) { 		test($n1 . chr($c)); 		foreach $n2 (@numbers) { 			test($n1 . ";" . $n2 . chr($c)); 		} 	} } ---  In my testing, this script sometimes unintentionally triggers the escparms[] overflow in minicom.  I guess this is because of its non-perfect handling of the named pipe's buffer filling up (partial data from a previous write gets concatenated with attempted next write). This also means that occasionally it will miss testing some of the sequences as intended.  I am saying this now primarily so that none of you get alarmed by unpatched minicom crashing on some runs of that script - this does not necessarily indicate the script triggers another issue of this kind, even though it does not probe for the escparms[] overflow explicitly.  One thing we mostly haven't tried yet (except on prl-vzvncserver) is applying this kind of fuzzing/testing to ASan-enabled builds of terminals; doing so may reveal dormant issues, which with some code review and better targeted attacks could be awoken in regular builds as well.  Another thing we mostly haven't tried yet (except for prl-vzvncserver and to a lesser extent minicom) is old-fashioned manual code review.  This too may result in findings that a specific script would miss.  I'll stop here, expecting that Jason and Yves-Alexis will post follow-ups, and the wider oss-security community will do some more testing and fuzzing of terminal escapes, as well as hopefully code reviews, likely finding more issues.  Thanks,  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      