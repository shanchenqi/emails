  oss-security - lrzip: use-after-free in read_stream (stream.c)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 9 May From: "Agostino Sarubbo" <ago@...too.org> To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com> Subject: lrzip: use-after-free in read_stream (stream.c)  Description: lrzip is a compression utility that excels at compressing large files.  The complete ASan output of the issue:  # lrzip -t $FILE AddressSanitizer: heap-use-after-free on address at pc bp sp READ of size 1 at thread T0     #0 in __asan_memcpy     #1 in read_stream     #2 in read_vchars     #3 in unzip_match     #4 in runzip_chunk     #5 in runzip_fd     #6 in decompress_file     #7 in main     #8 in __libc_start_main     #9 in _init  is located 0 bytes inside of region freed by thread T0 here:     #0 in free     #1 in fill_buffer     #2 in read_stream     #3 in read_vchars     #4 in unzip_match     #5 in runzip_chunk     #6 in runzip_fd     #7 in decompress_file     #8 in main     #9 in __libc_start_main  previously allocated by thread T1 here:     #0 in malloc     #1 in lzma_decompress_buf     #2 in ucompthread     #3 in start_thread  Thread T1 created by T0 here:     #0 in pthread_create     #1 in create_pthread     #2 in fill_buffer     #3 in read_stream     #4 in read_u8     #5 in read_header     #6 in runzip_chunk     #7 in runzip_fd     #8 in decompress_file     #9 in main     #10 in __libc_start_main  SUMMARY: AddressSanitizer: heap-use-after-free  in __asan_memcpy Shadow bytes around the buggy address:   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa   fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd fd fd   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd   fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd Shadow byte legend (one shadow byte represents 8 application bytes):   Addressable:           00   Partially addressable: 01 02 03 04 05 06 07    Heap left redzone:       fa   Heap right redzone:      fb   Freed heap region:       fd   Stack left redzone:      f1   Stack mid redzone:       f2   Stack right redzone:     f3   Stack partial redzone:   f4   Stack after return:      f5   Stack use after scope:   f8   Global redzone:          f9   Global init order:       f6   Poisoned by user:        f7   Container overflow:      fc   Array cookie:            ac   Intra object redzone:    bb   ASan internal:           fe   Left alloca redzone:     ca   Right alloca redzone:    cb  Affected version:  Fixed version: N/A  Commit fix: N/A  Credit: This bug was discovered by Agostino Sarubbo of Gentoo.  CVE:  Reproducer:  Timeline: bug discovered and reported to upstream blog post about the issue CVE assigned  Note: This bug was found with American Fuzzy Lop.  Permalink:  -- Agostino Sarubbo Gentoo Linux Developer    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      