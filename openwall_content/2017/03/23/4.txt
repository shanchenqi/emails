  oss-security - EON 5.0 Multiple SQL Injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 23 Mar From: Sydream Labs <labs@...dream.com> To: oss-security@...ts.openwall.com Subject: EON 5.0 Multiple SQL Injection  # EON 5.0 Multiple SQL Injection  ## Description  EyesOfNetwork ("EON") is an OpenSource network monitoring solution.  ## SQL injection (authenticated)  The Eonweb code does not correctly filter arguments, allowing authenticated users to inject arbitrary SQL requests.  **CVE ID**:  **Access Vector**: remote  **Security Risk**: medium  **Vulnerability**: CWE-89  **CVSS Base Score**: 6.0  **CVSS Vector String**: CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:L  ### Proof of Concept 1 (root privileges)  The following HTTP request allows an attacker (connected as administrator) to dump the database contents using SQL injections inside either the `bp_name` or the `display` parameter. These requests are executed with MySQL root privileges.  ```  ```  #### Vulnerable code  The vulnerable code can be found inside the `module/monitoring_ged/ged_functions.php` file, line  ``` function list_process($bp,$display,$bdd){     $sql = "select name from bp where is_define = 1 and name!='".$bp."' and priority = '" . $display . "'";     $req = $bdd->query($sql);     $process = $req->fetchall();      echo json_encode($process); } ```  ### Proof of Concept 2  The following HTTP request allows an attacker to dump the database contents using SQL injections inside the `type` parameter:  ``` ```  #### Vulnerable code  The vulnerable code can be found inside the `module/monitoring_ged/ajax.php` file, line 64:  ``` if($_GET["type"] == 0){   $ged_where = "WHERE pkt_type_id!='0'"; } else {   $ged_where = "WHERE pkt_type_id='".$_GET["type"]."'"; } $gedsql_result1=sqlrequest($database_ged,"SELECT pkt_type_id,pkt_type_name FROM pkt_type $ged_where AND ```  ### Proof of Concept 3  The following HTTP request allows an attacker to dump the database contents using SQL injections inside the `search` parameter:  ``` ```   #### Vulnerable code  The vulnerable code can be found inside the `module/monitoring_ged/ged_functions.php` file, line  ``` if($search != ""){     $like = "";     if( substr($search, 0, 1) === '*' ){         $like .= "%";     }     $like .= trim($search, '*');     if ( substr($search, -1) === '*' ) {         $like .= "%";     }      $where_clause .= " AND $filter LIKE '$like'"; } ```   ### Proof of Concept 4  The following HTTP request allows an attacker to dump the database contents using SQL injections inside the `equipment` parameter:  ``` https://eonweb.local/module/monitoring_ged/ged_actions.php?action=advancedFilterSearch&filter=(select+user_passwd+from+eonweb.users+limit 1)&queue=history ```   #### Vulnerable code  The vulnerable code can be found inside the `module/monitoring_ged/ged_functions.php` file, line  ``` $gedsql_result1=sqlrequest($database_ged,"SELECT pkt_type_id,pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND   while($ged_type = mysqli_fetch_assoc($gedsql_result1)){     $sql = "SELECT DISTINCT $filter FROM ".$ged_type["pkt_type_name"]."_queue_".$queue;      $results = sqlrequest($database_ged, $sql);     while($result = mysqli_fetch_array($results)){         if( !in_array($result[$filter], $datas) && $result[$filter] != "" ){             array_push($datas, $result[$filter]);         }     } } ```   ## Timeline (dd/mm/yyyy)  * : Initial discovery. * : Fisrt contact with vendor. * : Technical details sent to the security contact. * : Vendor akwnoledgement and first patching attempt. * : New tests done on release candidate 5.1. Fix confirmed. * : 5.1 release. Waiting for 2 weeks according to our repsonsible disclosure agreement. * : Public disclosure.  Thank you to EON for the fast response.  ## Solution  Update to version 5.1.  ## Affected versions  * Version <= 5.0  ## Credits  * Nicolas SERRA <n.serra@...dream.com>  --  SYSDREAM Labs <labs@...dream.com>  GPG : C43E 2A2E 8EB4 8CD9 D5B2  * Website: https://sysdream.com/ * Twitter: @sysdream      Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      