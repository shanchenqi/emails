  oss-security - Tuleap <= 9.6 Second-Order PHP Object Injection  Vulnerability            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 23 Oct From: Egidio Romano <research@...mainsecurity.com> To: bugtraq@...urityfocus.com, fulldisclosure@...lists.org,  oss-security@...ts.openwall.com Subject: Tuleap <= 9.6 Second-Order PHP Object Injection  Vulnerability  ------------------------------------------------------------- Tuleap <= 9.6 Second-Order PHP Object Injection Vulnerability -------------------------------------------------------------   [-] Software Links:  https://www.tuleap.org https://www.enalean.com   [-] Affected Versions:  All versions from 5.0 to 9.6.   [-] Vulnerability Description:  The vulnerable code can be triggered through the User::getRecentElements() method defined in /src/common/user/User.class.php:      public function getRecentElements() {        if ($recent_elements = $this->getPreference(self::PREFERENCE_RECENT_ELEMENTS)) {            if ($recent_elements = unserialize($recent_elements)) {                if (is_array($recent_elements)) {                    return $recent_elements;                }            }            //somthing wrong happen. Delete the preference            $this->delPreference(self::PREFERENCE_RECENT_ELEMENTS);        }        return array();    }  The vulnerability exists because this method is using the unserialize() function with a value that can be arbitrarily manipulated by a user through the REST API interface. This can be exploited to inject arbitrary PHP objects into the application scope, and could allow authenticated attackers to execute arbitrary PHP code via specially crafted serialized objects. Successful exploitation of this vulnerability requires an user account with permissions to create or access artifacts in a tracker.   [-] Solution:  Update to version 9.7 or later.   [-] Disclosure Timeline:  - Vendor notified - Vendor acknowledgement - Vendor submitted artifact: - CVE number requested - CVE number assigned - Vulnerability fixed on the git repository: https://goo.gl/X2AT4z - Version 9.7 released - Publication of this advisory   [-] CVE Reference:  The Common Vulnerabilities and Exposures project (cve.mitre.org) has assigned the name to this vulnerability.   [-] Credits:  Vulnerability discovered by Egidio Romano.   [-] Original Advisory:   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      