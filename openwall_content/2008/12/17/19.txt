  oss-security - Re: CVE request: phpMyAdmin < (SQL injection  through XSRF on several pages )            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 17 Dec From: Tomas Hoger <thoger@...hat.com> To: oss-security@...ts.openwall.com Cc: coley@...us.mitre.org Subject: Re: CVE request: phpMyAdmin < (SQL injection  through XSRF on several pages )  On Tue, 16 Dec (EST) "Steven M. Christey" <coley@...us.mitre.org> wrote:  > Two separate CVE's are assigned, one for the original milw0rm exploit > and the other for the unspecified vectors implied by the implied > "XSRF on several pages" in the advisory.  Are those really separate issues?  I believe that was assigned because of the following mention in the upstream ChangeLog:   - [security] possible XSRF on several pages  However, that ChangeLog entry was added as a not too good description of the fix for the SQL injection described in milw0rm  Upstream commit is referenced in the  I think that the wording here is bit confusing.  I think this kind of flaw would normally be described "privileged / logged-in user SQL injection".  Though as this is SQL DB management application, once you are logged in, you can execute SQL commands using the standard application features, rather than having to find some privileged user SQL injection flaw.   Hence this is only exploitable via CSRF-like methods.  Not sure if the CSRF term is right there, as this "CSRF" does not seem to do any harm without SQL injection flaw.  Or were there any other reasons for split?  --  Tomas Hoger / Red Hat Security Response Team  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      