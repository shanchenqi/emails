  oss-security - CVE Request (ruby -- DNS spoofing vulnerability in 	resolv.rb)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Wed, 03 Sep From: Jan Lieskovsky <jlieskov@...hat.com> To: coley@...re.org Cc: oss-security@...ts.openwall.com Subject: CVE Request (ruby -- DNS spoofing vulnerability in 	resolv.rb)  Hello Steve,    could you please allocate an another CVE id for the DNS spoofing vulnerability in Ruby resolv.rb code.   (part DNS spoofing vulnerability in resolv.rb)  Original  The DNS protocol, as implemented in (1) BIND 8 and 9 before and (2) Microsoft DNS in Windows SP4, XP SP2 and SP3, and Server SP1 and SP2; and other implementations allow remote attackers to spoof DNS traffic via a birthday attack that uses in-bailiwick referrals to conduct cache poisoning against recursive resolvers, related to insufficient randomness of DNS transaction IDs and source ports, aka "DNS Insufficient Socket Entropy Vulnerability" or "the Kaminsky bug."   The Ruby problem is slightly different from the original problem. It is also insufficient randomization of transaction IDs and source ports, but:  1, speaks nothing about Ruby 2, Part "spoof DNS traffic via a birthday attack that uses in-bailiwick referrals to conduct cache poisoning against recursive resolvers" is applicable only to caching resolvers.  Proof of Concept: ================  IP > *.*.*.*.domain:  0+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  0 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  1+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  1 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  2+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  2 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  3+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  3 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  4+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  4 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  5+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  5 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  6+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  6 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  7+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  7 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  8+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  8 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host. IP > *.*.*.*.domain:  9+ A? www.ruby-lang.org. (35)  IP *.*.*.*.domain >  9 CNAME carbon.ruby-lang.org., A IP > *.*.*.*.domain:  PTR? rev.dns.rec.some.name.of.the.host.in-addr.arpa. (43) IP *.*.*.*.domain >  PTR some.name.of.the.host.  The transaction IDs are assigned in sequential (n+1 order) and the source ports are always the same.  Scenario: =========  1, First tty:  tcpdump -i eth0 -n udp port 53 2, Another tty: ./resolv_test.rb (resolv_test.rb attached).  Thank you in advance  Kind regards Jan iankko Lieskovsky RH Security Response Team  Download attachment "resolv_test.rb" of type "application/x-ruby" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      