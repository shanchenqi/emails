  oss-security - exploitability of off-by-one in motion webserver            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 10 Jun From: Nico Golde <oss-security+ml@...lde.de> To: oss-security@...ts.openwall.com Subject: exploitability of off-by-one in motion webserver  Hi, in I  reported an off-by-one programming error in motion:  static int read_client(int client_socket, void *userdata, char *auth) ....         int ret = 1;         char = {'\0'};         int length = ....                 int nread = 0, readb = -1;                  nread = read (client_socket, buffer, length);                 if (nread <= 0) {                         motion_log(LOG_ERR, 1, "httpd First read");                         pthread_mutex_unlock(&httpd_mutex);                         return -1;                  }                    else {                         char method[sizeof (buffer)];                         char url[sizeof (buffer)];                         char protocol[sizeof (buffer)];                         char *authentication=NULL;                         buffer[nread] = '\0'; ....         return ret;   If the clients sends or more bytes this leads to an off-by-one writing to However I am unsure about the exploitability at the moment. Overwriting the frame pointer should be not possible since there are variables on the stack before buffer.  However it should be possible to overwrite ret with 0 which is used in line as the return value of the function (normal termination returns 1).  The value of ret is used as a check for a while loop which handles the incoming connections:         while ((client_sent_quit_message!=0) && (!closehttpd)) {                   client_socket_fd = acceptnonblocking(sd, 1);                  if (client_socket_fd<0) { ....                 } else {                         /* Get the Client request */                         client_sent_quit_message = read_client (client_socket_fd, cnt, authentication); ....                         if (client_socket_fd)                                 close(client_socket_fd);                 }         }  So if read_client will be evaluated to 0 the while condition in should be evaluated to false which causes the server to not accept connections on the http port anymore.  This is the theoretical point but I was not able to reproduce this on a 64bit system. Does anyone have an idea why this could be the case or is even able to reproduce this?  Install motion and send an arbitrary HTTP request to port with a lengt >=  Opinions?  Cheers Nico --  Nico Golde - http://www.ngolde.de - nion@...ber.ccc.de - GPG: For security reasons, all text in this mail is double-rot13 encrypted.  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      