  oss-security - Re: CVE request: overflow issues            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 12 Aug (EDT) From: "Steven M. Christey" <coley@...us.mitre.org> To: oss-security@...ts.openwall.com cc: coley@...re.org Subject: Re: CVE request: overflow issues   On Fri, 8 Aug Christian Hoffmann wrote:  > two security issues, which might possibly allow for arbitrary code > execution (afaik nobody has analyzed the details...), but at least DoS > (think of FastCGI setups), were silently fixed in PHP again: > >    * Overflow in ext/gd's imageloadfont() function [1] [2] [3]  Use to be filled in later - I'm assuming this is a distinct component that doesn't just affect PHP.  >    * Overflow in php's internal memnstr() function which is exposed >      to userspace as "explode()" [1] [2] [4] [5]  Use  For the FastCGI "foo..php" issue, use  These will be filled in later.  > As those functions might take user-supplied data in certain webapps > (which is a valid use case at least in case of explode()), those issues > should probably expected to be remotely exploitable.  We use the term "context-dependent" to cover cases where the reachability and remote/local nature of the issue can vary widely, depending on how the product is used.  This term typically applies to libraries or interpreters that are used by third-party applications.  - Steve  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      