  oss-security - Re: More arbitrary code executions in Netrw version Vim            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 07 Jul From: Bram Moolenaar <Bram@...lenaar.net> To: Jonathan Smith <smithj@...ethemallocs.com> CC: "Charles E Campbell, Jr" <drchip@...pbellfamily.biz>,         oss-security@...ts.openwall.com Subject: Re: More arbitrary code executions in Netrw version Vim   Jonathan -  > -----BEGIN PGP SIGNED MESSAGE----- > Hash: >  > Forgive the double-post; my first message was blocked by the vim_dev > mailing list due to not being subscribed (which is very odd, given that > I am subscribed). This one is being sent directly to Bram instead. >  > 	smithj >  > Jan MinÃ¡Å wrote: > > Following my recent advisory on Vim vulnerabilities, here goes a followup: many > > more vulnerabile statements in Netrw.  Although Netrw has been updated with > > the new fnameescape() and shellescape() functions, it doesn't use them > > consistently.  It is difficult *not* to find vulnerable code in Netrw. > > > > This writeup can be found at: > > 	``http://www.rdancer.org/vulnerablevim-netrw.html'' > > The archive with code that we're using can be found at: > > 	``http://www.rdancer.org/vulnerablevim-netrw.tar.bz2''. > > > > Best results are achieved by running ``make test'' in the root > > directory of the abovementioned archive: > > > > 	$ make test > > 	[...] > >         ------------------------------------------- > >         -------- Test results below --------------- > >         ------------------------------------------- > >         filetype.vim > >         tarplugin.updated: VULNERABLE > >         zipplugin : VULNERABLE > >     --> netrw.v2  : VULNERABLE > >     --> netrw.v3  : VULNERABLE > >     --> netrw.v4  : VULNERABLE > > > > > > 1. Compression and Decompression (The ``mz'' Command) > > > > Invoking the ``mz'' command upon a file with a crafted file name can lead to > > arbitrary code execution. > > > > > > 1.1 Vulnerability > > > > In many places, Netrw ($VIMRUNTIME/autoload/netrw.vim) fails to sanitize file > > names used as shell arguments. > > > > In function s:NetrwMarkFileExe() (The ``mx'' command): ``apply command to marked > > files.  Substitute: filename -> % If no %, then append a space and the filename > > to the command'': > > > >            for fname in s:netrwmarkfilelist_{curbufnr} > >             if a:islocal > >              if g:netrw_keepdir > >               let fname= s:ComposePath(curdir,fname) > >              endif > >             else > >              let fname= b:netrw_curdir.fname > >             endif > >             if cmd =~ '%' > >              let xcmd= substitute(cmd,'%',fname,'g') > >             else > >              let xcmd= cmd.' '.fname > >             endif > >             if a:islocal > >         "     call Decho("local: xcmd<".xcmd.">") > >     -->      let ret= system(xcmd) > >             else > >         "     call Decho("remote: xcmd<".xcmd.">") > >     -->      let ret= s:RemoteSystem(xcmd) > > > > Following code in function s:NetrwMarkFileCompress() is run when the ``mz'' > > (compress/decompress) command is invoked.  The variable > > ``s:netrwmarkfilelist_{curbufnr}'' holds the marked files list.: > > > > 	 if !exists("g:netrw_decompress") > > 	  let g:netrw_decompress= { ".gz" : "gunzip" , ".bz2" : "bunzip2" > > , ".zip" : "unzip" , ".tar" : "tar -xf"} > > 	 endif > > 	[...] > >            for fname in s:netrwmarkfilelist_{curbufnr} > >             " for every filename in the marked list > >             for sfx in sort(keys(g:netrw_decompress)) > >              if fname =~ '\'.sfx.'$' > >               " fname has a suffix indicating that its > > compressed; apply associated decompression routine > >               let exe= g:netrw_decompress[sfx] > >         "      call Decho("fname<".fname."> is compressed so > > decompress with <".exe.">") > >               if a:islocal > >                if g:netrw_keepdir > >                 let fname= s:ComposePath(curdir,fname) > >                endif > >               else > >                let fname= b:netrw_curdir.fname > >               endif > >               if executable(exe) > >                if a:islocal > >     -->         call system(exe." ".fname) > > > > > > 1.2. Exploit > > > > We exploit the statement on line > > > > Run ``make demo'' or ``make test'' in the netrw.v2 directory.  Note: ``make > > test'' may hang when run from within vim. > > > > > > 2. Copying Files (The ``mc'' Command) > > > > Invoking the ``mc'' command inside a directory with a crafted directory name > > can lead to arbitrary code execution. > > > > > > 2.1. Vulnerability > > > > Netrw inappropriately uses shellescape() in many places to sanitize > > arguments of the > > ``execute'' command. > > > >           exe s:netrw_silentxfer."!".g:netrw_rcp_cmd." > > ".s:netrw_rcpmode." > > ".shellescape(uid_machine.":".escape(b:netrw_fname,' ?&;')." > > ".tmpfile) > >            exe s:netrw_silentxfer."!".g:netrw_scp_cmd.useport." > > ".shellescape(g:netrw_machine.":".escape(b:netrw_fname,g:netrw_fname_escape))." > > ".tmpfile > >             exe s:netrw_silentxfer."!".g:netrw_http_cmd." > > ".shellescape(tmpfile)." > > ".shellescape("http://".g:netrw_machine.netrw_fname) > >             exe s:netrw_silentxfer."!".g:netrw_http_cmd." > > ".shellescape(tmpfile)." > > ".shellescape("http://".g:netrw_machine.netrw_html) > >            exe s:netrw_silentxfer."!".g:netrw_rsync_cmd." > > ".shellescape(g:netrw_machine.":".netrw_fname)." ".tmpfile > >             exe s:netrw_silentxfer."!".g:netrw_fetch_cmd." > > ".tmpfile." ".shellescape(netrw_option."://".g:netrw_uid.':'.s:netrw_passwd.'@'.g:netrw_machine."/".netrw_fname) > >             exe s:netrw_silentxfer."!".g:netrw_fetch_cmd." > > ".tmpfile." ".shellescape(netrw_option."://".g:netrw_machine."/".netrw_fname) > >            exe s:netrw_silentxfer."!".g:netrw_sftp_cmd." > > ".shellescape(g:netrw_machine.":".netrw_fname)." ".tmpfile > >            exe s:netrw_silentxfer."!".g:netrw_rcp_cmd." > > ".s:netrw_rcpmode." ".shellescape(tmpfile)." > > ".shellescape(uid_machine.":".netrw_fname) > >            exe s:netrw_silentxfer."!".g:netrw_scp_cmd.useport." > > ".shellescape(tmpfile)." > > ".shellescape(g:netrw_machine.":".netrw_fname) > >           exe "silent !".viewer." ".viewopt.shellescape(fname).redir > >           exe 'silent !start rundll32 url.dll,FileProtocolHandler > > '.shellescape(fname) > >           exe "silent !gnome-open ".shellescape(fname).redir > >           exe "silent !kfmclient exec ".shellescape(fname)." ".redir > >           exe "silent !open ".shellescape(fname)." ".redir > >            exe "silent! !".g:netrw_local_mkdir.' '.shellescape(newdirname) > >           exe "silent! !".mkdircmd." ".shellescape(newdirname) > >            exe "silent! !".g:netrw_local_mkdir.' '.shellescape(tmpdir) > >            exe s:netrw_silentxfer."!".g:netrw_scp_cmd.useport." > > ".filelist." ".shellescape(tgtdir) > >            exe s:netrw_silentxfer."!".g:netrw_scp_cmd.useport." > > ".args." ".shellescape(machine.":".escape(tgt,g:netrw_fname_escape)) > >            exe "silent r! ".listcmd.shellescape(s:path) > >             exe "silent r! ".listcmd.' "'.shellescape(s:path).'"' > > > > > >            let args= > > join(map(copy(s:netrwmarkfilelist_{bufnr('%')}),"b:netrw_curdir.\"/\".shellescape(v:val)")) > >         "   call Decho("system(".g:netrw_localcopycmd." ".args." > > ".shellescape(s:netrwmftgt).")") > >     -->    call system(g:netrw_localcopycmd." ".args." > > ".shellescape(s:netrwmftgt)) > > > > 2.2. Exploit > > > > Run ``make demo'' or ``make test'' in the netrw.v3 directory.  Note: ``make > > test'' may hang when run from within vim. > > > > > > 2.3. Patch > > > > --- /usr/local/share/vim/vim72a/autoload/netrw.vim      > > > > +++ -   > > @@ @@ > >    if      a:islocal &&  s:netrwmftgt_islocal > >        " Copy marked files, local directory to local directory > >         "   call Decho("copy from local to local") > >         -   let args= > > join(map(copy(s:netrwmarkfilelist_{bufnr('%')}),"b:netrw_curdir.\"/\".shellescape(v:val)")) > >         +   let args= > > join(map(copy(s:netrwmarkfilelist_{bufnr('%')}),"shellescape(b:netrw_curdir).\"/\".shellescape(v:val)")) > >          "   call Decho("system(".g:netrw_localcopycmd." ".args." > > ".shellescape(s:netrwmftgt).")") > >              call system(g:netrw_localcopycmd." ".args." > > ".shellescape(s:netrwmftgt)) > > > > > > > > 3. Deleting Files (The ``D'' Command) > > > > Applying the ``D'' to a file with a crafted file name, or inside a directory > > with a crafted directory name, can lead to arbitrary code execution. > > > > > > 3.1 Vulnerability > > > > Netrw fails to properly sanitize arguments passed to the s:System() function, > > which is a wrapper for the ``execute'' command: > > > >            fun! s:System(cmd,path) > >         [...] > >              let path = a:path > >         [...] > >                exe "let result= ".a:cmd."('".path."')" > > > > In  function s:NetrwLocalRmFile(): > > > >         s:NetrwLocalRmFile(path,fname,all) > >         [...] > >          let rmfile= s:ComposePath(a:path,a:fname) > >         [...] > >     -->    let ret= s:System("delete",rmfile) > >         [...] > >     -->    call s:System("system",g:netrw_local_rmdir.' > > '.shellescape(rmfile)) > >         [...] > >     -->     let errcode= s:System("delete",rmfile) > >         [...] > >     -->       call s:System("system","rm ".shellescape(rmfile)) > > > > In function s:NetrwLocalRmFile(): > >           let rmfile= s:ComposePath(a:path,a:fname) > >         [...] > >     -->     let ret= s:System("delete",rmfile) > >         [...] > >     -->     call s:System("system",g:netrw_local_rmdir.' > > '.shellescape(rmfile)) > >         "    call Decho("v:shell_error=".v:shell_error) > >         > >             if v:shell_error != 0 > >         "     call Decho("2nd attempt to remove directory<".rmfile.">") > >     -->      let errcode= s:System("delete",rmfile) > >         "     call Decho("errcode=".errcode) > >         > >              if errcode != 0 > >               if has("unix") > >         "       call Decho("3rd attempt to remove directory<".rmfile.">") > >     -->        call s:System("system","rm ".shellescape(rmfile)) > > > > > > 3.2 Exploit > > > > We exploit the statement on the line  Run ``make demo'' or ``make test'' > > in the netrw.v4 directory.  Note: ``make test'' may hang when run from within > > vim.  We use the TIOCSTY ioctl to simulate keyboard input in ``make test'' -- > > avoid touching the keyboard while ``make test'' is running. >  >  > Steve, could we get CVEs assigned, please? I'd imagine we'd need three; > one for the tarplugin issue, one for the zipplugin, and one for the > netrw issues (which are similar enough to probably justify lumping them > together). >  > Bram, have you had a chance to look at this yet? The advisory included a > patch for one of the issues, but not others.  The problem in the zip plugin has already been fixed, but the file wasn't distributed yet.  It's now on ftp://ftp.vim.org/pub/vim/runtime/autoload/zip.vim  Charles is working on further problems with the netrw plugin.  I'm waiting for this to make the Vim 7.2b BETA release.  - Bram  --          Very funny, Scotty.  Now beam down my clothes.   /// Bram Moolenaar -- Bram@...lenaar.net -- http://www.Moolenaar.net   \\\ ///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\ \\\        download, build and distribute -- http://www.A-A-P.org        ///  \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      