  oss-security - Re: Linux kernel user namespace bug            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 17 Jun From: Andy Lutomirski <luto@...capital.net> To: oss-security@...ts.openwall.com Subject: Re: Linux kernel user namespace bug  On Tue, Jun 10, at PM, Andy Lutomirski <luto@...capital.net> wrote: > The internal function inode_capable was used inappropriately. > Depending on configuration, this may be usable to escalate privileges. > A cursory inspection of my Fedora box suggests that it is not > vulnerable to the obvious way to exploit this bug. > > The fix should appear in Linus' -master shortly, and it's tagged for > stable.  In the mean time, I've attached it here. >  The commit that fixes this is:   The bug is that, if you created a user namespace and retained capabilities in that namespace, then you could use chmod to set the setgid bit on any file you owned, including files with, say, group 0.  The impact depends on what files are available that have gids that shouldn't be available to the users who own the file.  For example, the existence of a uid != 0, gid == 0 file would allow that uid to escalate privileges to gid 0, which is likely good enough for full root.  --Andy  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      