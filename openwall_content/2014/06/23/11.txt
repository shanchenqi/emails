  oss-security - Re: TMP flaw in rackspace jclouds?            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 23 Jun From: Andrew Gaul <gaul@...che.org> To: oss-security@...ts.openwall.com, Kurt Seifried <kseifried@...hat.com> Subject: Re: TMP flaw in rackspace jclouds?  [bcc: jclouds private list]  Since oss-security@...ts.openwall.com is a public list I reported the issue and submitted a pull request:   On Thu, Jun 19, at Andrew Gaul wrote: > [bcc: jclouds private list] >  > I attached a patch which changes ScriptBuilder to use the "mktemp -d" > approach that Ignasi suggested.  I verified this against the ec2 live > tests, specifically testCreateAndRunAService, as well as the > scriptbuilder unit tests.  I encourage someone more familiar with > compute to test this since I have limited experience with those > services. >  > The code runs on the target node as Ignasi describes and thus it poses > no risk to the master jclouds application.  However, users could run > untrusted software on their target nodes and we should address this in > the next minor release.  I estimate a low severity to this issue and > prefer to continue discussion on the public bug tracker.  Does anyone > have a different understanding of this flaw? >  > On Thu, Jun 19, at Ignasi Barrera wrote: > > Take into account that the "statement" list will be rendered to a String, > > composed with other script fragments into a final bash script, uploaded to > > a node, and executed there locally as a bash script. > >  > > That code won't be executed in the machine running jclouds, but as a bash > > script in the provisioned node, so the name of the temporal directory > > should better be generated in the script itself. A good approach would be > > to directly use the "mktemp"command. > > El "Andrew Gaul" <gaul@...che.org> escribiรณ: > >  > > > Kurt, thank you for bringing this flaw to my attention and I will > > > address it tomorrow.  I do not have a security background; can you > > > estimate the severity and whether we can continue discussion on the > > > public bug tracker?  For now I have bcc the Apache jclouds private > > > mailing list.  Also note that jclouds is an Apache project not a > > > Rackspace project and the canonical URLs are: > > > > > > https://github.com/jclouds/jclouds > > > https://issues.apache.org/jira/browse/JCLOUDS > > > > > > On Wed, Jun 18, at Kurt Seifried wrote: > > > > -----BEGIN PGP SIGNED MESSAGE----- > > > > Hash: SHA1 > > > > > > > > https://github.com/rackspace/jclouds/ > > > > > > > > So CC'ing Andrew, he's a consistent contributor, I can't file an issue > > > > in Github (no link to it) so posting here and CC'ing him. > > > > > > > > > > > https://github.com/rackspace/jclouds/blob/master/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/Statements.java > > > > > > > >   public static Statement extractTargzAndFlattenIntoDirectory(URI tgz, > > > > String dest) { > > > >       return new StatementList(ImmutableSet.<Statement> builder() > > > >             .add(exec("mkdir /tmp/$$")) > > > >             .add(extractTargzIntoDirectory(tgz, "/tmp/$$")) > > > >             .add(exec("mkdir -p " + dest)) > > > >             .add(exec("mv /tmp/$$/*/* " + dest)) > > > >             .add(exec("rm -rf /tmp/$$")).build()); > > > >    } > > > > > > > > > > > > This is insecure, $$ == PID == predictable > > > > > > > > > > > > > > > > use java.io.File.createTempFile() ? some interesting info at > > > > > > > > > > > > > > > for directories there is a helpful posting at > > > > > > > > > > > > > > > Thanks. > > > > > > > > > > > > - -- > > > > Kurt Seifried -- Red Hat -- Product Security -- Cloud > > > > PGP A90B 66BF > > > > -----BEGIN PGP SIGNATURE----- > > > > Version: GnuPG v1 > > > > Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > WjPZ/O4oOj0FVWoeyQUN > > > > =SUf5 > > > > -----END PGP SIGNATURE----- > > > > > > -- > > > Andrew Gaul > > > http://gaul.org/ > > > >  > --  > Andrew Gaul > http://gaul.org/  > commit > Author: Andrew Gaul <gaul@...che.org> > Date:   Thu Jun 19 >  >     Securely create temporary directories >      >     This commit addresses a potential security issue where an attacker >     could hijack the ScriptBuilder payload by predicting the temporary >     directory name. >  > diff --git a/compute/src/test/resources/initscript_with_jetty.sh b/compute/src/test/resources/initscript_with_jetty.sh > index > --- a/compute/src/test/resources/initscript_with_jetty.sh > +++ b/compute/src/test/resources/initscript_with_jetty.sh > @@ @@ END_OF_JCLOUDS_SCRIPT >  	installOpenJDK || return 1 >  	iptables -I INPUT 1 -p tcp --dport -j ACCEPT >  	iptables-save > -	mkdir /tmp/$$ > -	curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p /tmp/$$ &&cd /tmp/$$ &&tar -xpzf -) > +	export TAR_TEMP="$(mktemp -d)" > +	curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p "${TAR_TEMP}" &&cd "${TAR_TEMP}" &&tar -xpzf -) >  	mkdir -p /usr/local/jetty > -	mv /tmp/$$/*/* /usr/local/jetty > -	rm -rf /tmp/$$ > +	mv "${TAR_TEMP}"/*/* /usr/local/jetty > +	rm -rf "${TAR_TEMP}" >  	chown -R web /usr/local/jetty >  	 >  END_OF_JCLOUDS_SCRIPT > diff --git a/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/Statements.java b/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/Statements.java > index > --- a/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/Statements.java > +++ b/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/Statements.java > @@ @@ public class Statements { >      */ >     public static Statement extractTargzAndFlattenIntoDirectory(URI tgz, String dest) { >        return new StatementList(ImmutableSet.<Statement> builder() > -            .add(exec("mkdir /tmp/$$")) > -            .add(extractTargzIntoDirectory(tgz, "/tmp/$$")) > +            .add(exec("export TAR_TEMP=\"$(mktemp -d)\"")) > +            .add(extractTargzIntoDirectory(tgz, "\"${TAR_TEMP}\"")) >              .add(exec("mkdir -p " + dest)) > -            .add(exec("mv /tmp/$$/*/* " + dest)) > -            .add(exec("rm -rf /tmp/$$")).build()); > +            .add(exec("mv \"${TAR_TEMP}\"/*/* " + dest)) > +            .add(exec("rm -rf \"${TAR_TEMP}\"")) > +            .build()); >     } >      >     public static Statement extractTargzIntoDirectory(URI targz, String directory) { > diff --git a/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/domain/StatementsTest.java b/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/domain/StatementsTest.java > index > --- a/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/domain/StatementsTest.java > +++ b/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/domain/StatementsTest.java > @@ @@ public class StatementsTest { >                    "/usr/local/maven"); >        assertEquals( >              save.render(OsFamily.UNIX), > -            "mkdir /tmp/$$\n" + > -            "curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p /tmp/$$ &&cd /tmp/$$ &&tar -xpzf -)\n" + > +            "export TAR_TEMP=\"$(mktemp -d)\"\n" + > +            "curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p \"${TAR_TEMP}\" &&cd \"${TAR_TEMP}\" &&tar -xpzf -)\n" + >              "mkdir -p /usr/local/maven\n" + > -            "mv /tmp/$$/*/* /usr/local/maven\n" + > -            "rm -rf /tmp/$$\n"); > +            "mv \"${TAR_TEMP}\"/*/* /usr/local/maven\n" + > +            "rm -rf \"${TAR_TEMP}\"\n"); >     } >   >   > diff --git a/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/statements/ruby/InstallRubyGemsTest.java b/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/statements/ruby/InstallRubyGemsTest.java > index > --- a/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/statements/ruby/InstallRubyGemsTest.java > +++ b/scriptbuilder/src/test/java/org/jclouds/scriptbuilder/statements/ruby/InstallRubyGemsTest.java > @@ @@ public class InstallRubyGemsTest { >     private static String installRubyGems(String version) { >        String script = "if ! hash gem 2>/dev/null; then\n" >              + "(\n" > -            + "mkdir /tmp/$$\n" > +            + "export TAR_TEMP=\"$(mktemp -d)\"\n" >              + "curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  http://production.cf.rubygems.org/rubygems/rubygems-" > -            + version + ".tgz |(mkdir -p /tmp/$$ &&cd /tmp/$$ &&tar -xpzf -)\n" + "mkdir -p /tmp/rubygems\n" > -            + "mv /tmp/$$/*/* /tmp/rubygems\n" + "rm -rf /tmp/$$\n" + "cd /tmp/rubygems\n" > +            + version + ".tgz |(mkdir -p \"${TAR_TEMP}\" &&cd \"${TAR_TEMP}\" &&tar -xpzf -)\n" + "mkdir -p /tmp/rubygems\n" > +            + "mv \"${TAR_TEMP}\"/*/* /tmp/rubygems\n" + "rm -rf \"${TAR_TEMP}\"\n" + "cd /tmp/rubygems\n" >              + "ruby setup.rb --no-format-executable\n" // >              + "rm -fr /tmp/rubygems\n" + // >              ")\n" + // > diff --git a/scriptbuilder/src/test/resources/test_install_rubygems.sh b/scriptbuilder/src/test/resources/test_install_rubygems.sh > index > --- a/scriptbuilder/src/test/resources/test_install_rubygems.sh > +++ b/scriptbuilder/src/test/resources/test_install_rubygems.sh > @@ @@ >  if ! hash gem 2>/dev/null; then >  ( > -mkdir /tmp/$$ > -curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p /tmp/$$ &&cd /tmp/$$ &&tar -xpzf -) > +export TAR_TEMP="$(mktemp -d)" > +curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p "${TAR_TEMP}" &&cd "${TAR_TEMP}" &&tar -xpzf -) >  mkdir -p /tmp/rubygems > -mv /tmp/$$/*/* /tmp/rubygems > -rm -rf /tmp/$$ > +mv "${TAR_TEMP}"/*/* /tmp/rubygems > +rm -rf "${TAR_TEMP}" >  cd /tmp/rubygems >  ruby setup.rb --no-format-executable >  rm -fr /tmp/rubygems > diff --git a/scriptbuilder/src/test/resources/test_install_rubygems_scriptbuilder.sh b/scriptbuilder/src/test/resources/test_install_rubygems_scriptbuilder.sh > index > --- a/scriptbuilder/src/test/resources/test_install_rubygems_scriptbuilder.sh > +++ b/scriptbuilder/src/test/resources/test_install_rubygems_scriptbuilder.sh > @@ @@ END_OF_JCLOUDS_SCRIPT >  	trap 'echo $?>$INSTANCE_HOME/rc' 0 1 2 3 15 >  	if ! hash gem 2>/dev/null; then >  	( > -	mkdir /tmp/$$ > -	curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p /tmp/$$ &&cd /tmp/$$ &&tar -xpzf -) > +	export TAR_TEMP="$(mktemp -d)" > +	curl -q -s -S -L --connect-timeout 10 --max-time --retry 20 -X GET  |(mkdir -p "${TAR_TEMP}" &&cd "${TAR_TEMP}" &&tar -xpzf -) >  	mkdir -p /tmp/rubygems > -	mv /tmp/$$/*/* /tmp/rubygems > -	rm -rf /tmp/$$ > +	mv "${TAR_TEMP}"/*/* /tmp/rubygems > +	rm -rf "${TAR_TEMP}" >  	cd /tmp/rubygems >  	ruby setup.rb --no-format-executable >  	rm -fr /tmp/rubygems   --  Andrew Gaul http://gaul.org/  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      