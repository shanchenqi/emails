  oss-security - Linux kernel: fs: fix get_dumpable() incorrect tests            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Fri, 31 Jan From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Subject: Linux kernel: fs: fix get_dumpable() incorrect tests  I'm afraid the issue below was never brought to oss-security (as it must have been).  The fix was committed on November 13:   including detailed description and the reference.  So it was clearly disclosed as a security issue, yet bringing it to oss-security specifically seems to have falled through the cracks. :-(  Kees' posting to linux-distros:  ----- Forwarded message from Kees Cook <kees@...flux.net> -----  From: Kees Cook <kees@...flux.net> Subject: [PATCH] fs: fix get_dumpable() incorrect tests Date: Tue, 22 Oct  The get_dumpable() return value is not boolean. Most users of the function actually want to be testing for SUID_DUMP_USER rather than non-zero.  Without this patch, if the system had set the sysctl fs/suid_dumpable=2, a user was able to ptrace attach to processes that had dropped privileges to that user. (This may have been partially mitigated if Yama was enabled.)   Reported-by: Vasily Kulikov <segoon@...nwall.com> Signed-off-by: Kees Cook <keescook@...omium.org> Cc: stable@...r.kernel.org --- I plan to send this to security@...nel.org on Monday, unless anyone would like to push that a bit. Also note, I do not have ia64 cross compilers available, so I used the "1" literal instead of adding binfmts.h to the ia64 code. ---  arch/ia64/include/asm/processor.h |    2 +-  fs/exec.c                         |    6 ++++++  kernel/ptrace.c                   |    4 +++-  3 files changed, 10 insertions(+), 2 deletions(-)  diff --git a/arch/ia64/include/asm/processor.h b/arch/ia64/include/asm/processor.h index --- a/arch/ia64/include/asm/processor.h +++ b/arch/ia64/include/asm/processor.h @@ @@ struct thread_struct {  	regs->loadrs = 0;									\  	regs->r8 = get_dumpable(current->mm);	/* set "don't zap registers" flag */		\  	regs->r12 = new_sp - 16;	/* allocate 16 byte scratch area */			\ -	if (unlikely(!get_dumpable(current->mm))) {							\ +	if (unlikely(get_dumpable(current->mm) != 1)) {	\  		/*										\  		 * Zap scratch regs to avoid leaking bits between processes with different	\  		 * uid/privileges.								\ diff --git a/fs/exec.c b/fs/exec.c index --- a/fs/exec.c +++ b/fs/exec.c @@ @@ int __get_dumpable(unsigned long mm_flags)  	return (ret > SUID_DUMP_USER) ? SUID_DUMP_ROOT : ret;  }   +/* + * This returns the actual value of the suid_dumpable flag. For things + * that are using this for checking for privilege transitions, it must + * test against SUID_DUMP_USER rather than treating it as a boolean + * value. + */  int get_dumpable(struct mm_struct *mm)  {  	return __get_dumpable(mm->flags); diff --git a/kernel/ptrace.c b/kernel/ptrace.c index --- a/kernel/ptrace.c +++ b/kernel/ptrace.c @@ @@  #include <linux/hw_breakpoint.h>  #include <linux/cn_proc.h>  #include <linux/compat.h> +#include <linux/binfmts.h>      static int ptrace_trapping_sleep_fn(void *flags) @@ @@ ok:  	if (task->mm)  		dumpable = get_dumpable(task->mm);  	rcu_read_lock(); -	if (!dumpable && !ptrace_has_cap(__task_cred(task)->user_ns, mode)) { +	if (dumpable != SUID_DUMP_USER && +	    !ptrace_has_cap(__task_cred(task)->user_ns, mode)) {  		rcu_read_unlock();  		return -EPERM;  	} --    --  Kees Cook                                            @outflux.net  ----- End forwarded message -----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      