  oss-security - Re: CVE request: temporary file issue in Passenger rubygem            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 29 Jan From: Raphael Geissert <geissert@...ian.org> To: oss-security@...ts.openwall.com Cc: "support@...sion.nl" <support@...sion.nl>, Jakub Wilk <jwilk@...ian.org> Subject: Re: CVE request: temporary file issue in Passenger rubygem  Hi,  On 29 January Vincent Danen <vdanen@...hat.com> wrote: > Phusion Passenger creates a "server instance directory" in /tmp during startup, > which is a temporary directory that Phusion Passenger uses to store working files. > This directory is deleted after Phusion Passenger exits. For various technical > reasons, this directory must have a semi-predictable filename. If a local attacker > can predict this filename, and precreates a symlink with the same filename that > points to an arbitrary directory with mode owner root and group root, then > the attacker will succeed in making Phusion Passenger write files and create > subdirectories inside that target directory.  Ah, nice catch Jakub. Needless to say, this is related to but different from  One thing to notice, however, is that there's a race condition between the stat check introduced in The following sequence still triggers the bogus behaviour:  <user> mkdir $dir <phusion> lstat() (getFileTypeNoFollowSymlinks) <user> rmdir $dir <user> ln -s /target $dir <phusion> stat() (from verifyDirectoryPermissions) ...  Cheers, --  Raphael Geissert - Debian Developer www.debian.org - get.debian.net  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      