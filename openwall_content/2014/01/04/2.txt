  oss-security - Re: kwallet crypto misuse            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 4 Jan From: gremlin@...mlin.ru To: oss-security@...ts.openwall.com Subject: Re: kwallet crypto misuse  On Daniel Kahn Gillmor wrote:   >>> UTF-16 encoding combined with Blowfish's 64 bit block size  >>> means there are just four password characters per block.   >> But this is: any and all passwords, being used for encryption  >> key generation, must be hashed, then salted, then hashed  >> again. may be a good choice for generating Blowfish  >> key this way.   > what kind of hashing and salting are you talking about?  I'm talting about that very kind of hashing and salting which is normally used to generate an encryption key for symmetric cipher from the supplied password.   > i don't think hashing and salting makes sense in the context  > that you were quoting above. Are you aware that kwallet stores  > a database of passwords that need to be able to be produced back  > for the user (or the user's applications) in the clear?  Are you aware that database of passwords is just user's data, which may be virtually anything?  Suppose you want to generate a password for some resource and store it safely. One of the easiest methods to do that is running  `mkpassphrase | gpg -ea > some_resource.gpg`  but let's suppose you don't want to keep a keypair on that machine, so most likely you'll run  `mkpassphrase | gpg -ca > some_resource.gpg`  GPG will ask you (twice) for a password and produce the output like  -----BEGIN PGP MESSAGE-----  +E0TCzY= =9DoC -----END PGP MESSAGE-----  Now, once you need to access the data (generated password in this exemple), you may run  `gpg < some_resource.gpg`  provide the encryption password (try "Rent/Author!film2Cool") and get back the previously generated password: Sticky5scum0robust#Comic  So, please don't mess the encryption password (key source) and stored password (user's data).   --  Alexey V. Vissarionov aka Gremlin from Kremlin <gremlin ПРИ gremlin ТЧК ru> GPG: @ hkp://keys.gnupg.net  Content of type "application/pgp-signature" skipped  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      