  oss-security - Vulnerability Report for Ruby Gem            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon,  7 Jul (EDT) From: larry0@...com (Larry W. Cashdollar) To: <oss-security@...ts.openwall.com> Subject: Vulnerability Report for Ruby Gem  Title: Vulnerability Report for Ruby Gem  Author: Larry W. Cashdollar, @_larry0  Date:  OSVDB:  CVE:Please Assign  Download: http://rubygems.org/gems/cap-strap  Gem Author:  aaronjensen@...il.com  From:  User supplied input isn't properly sanitized for #{user} and #{password} This can lead to command injection if this gem is used in the context of a rails application.  Secondly the password is exposed to the process table listing.   The password crypt hash is also going to have the same 'sa' salt every time.  create_user(user, password) 23-  unless user_exists?(user) 24-    command = "useradd -s /bin/bash -d /home/#{user}" 25:    command << " -p `perl -e print crypt(#{password}, salt)`" unless password.empty? 26-    command << " -m #{user}" 27-    run "#{sudo} #{command}" 28-  end   Advisory:  Title: Vulnerability Report for Ruby Gem  Author: Larry W. Cashdollar, @_larry0  Date:  OSVDB:  CVE:Please Assign  Download: http://rubygems.org/gems/cap-strap  Gem Author:  aaronjensen@...il.com  From:  User supplied input isn't properly sanitized for #{user} and #{password} This can lead to command injection if this gem is used in the context of a rails application.  Secondly the password is exposed to the process table listing.   The password crypt hash is also going to have the same 'sa' salt every time.  create_user(user, password) 23-  unless user_exists?(user) 24-    command = "useradd -s /bin/bash -d /home/#{user}" 25:    command << " -p `perl -e print crypt(#{password}, salt)`" unless password.empty? 26-    command << " -m #{user}" 27-    run "#{sudo} #{command}" 28-  end   Advisory:   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      