  oss-security - Re: CVE request: python-gnupg before shell injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 9 Feb (EST) From: cve-assign@...re.org To: hanno@...eck.de Cc: cve-assign@...re.org, oss-security@...ts.openwall.com Subject: Re: CVE request: python-gnupg before shell injection  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  > CVE request is still pending. I think we now need two: > 1. Shell injection partly fixed in > 2. Incomplete fix for shell injection fixed in  We think either 3 or 4 may be a better number of CVEs.  First, it seems that the shell_quote function in version has two fundamentally different problems with different flaw types and different discoverers. The code in question is:    elif len(s) >= 2 and (s[0], s[-1]) == ("'", "'"):       result = '"%s"' % s.replace('"', r'\"')  The first problem, noted by Florian Weimer, is that this type of attempt to quote ' characters by using " characters is inherently wrong because the " and ' characters are not equivalent in the shell. In his example, the input ends up surrounded by " characters, but the string inside has a $( command substitution, and thus the command will be executed. In other words, using " characters simply cannot work correctly because "$(command)" is unsafe whereas '$(command)' is safe.  The second problem, noted by Matthew Daley, is that arbitrary insertion of a \ character into a string is unsafe because it can convert a single command into a list. This is independent of the non-equivalence of " and ' in the shell. In particular, the same list vulnerability can be seen with this code variant:    elif len(s) >= 2 and (s[0], s[-1]) == ('"', '"'):       result = "'%s'" % s.replace("'", r"\'")  along with the analogous variant of the Python input. The only difference is that the shell prints a different number of \ characters. In each case, the erroneous \ insertion separates the string into a list of two commands, and the touch command is executed.  Specifically, using the original code:    >>> print shell_quote("'\\\"; touch foo #'")   "'\\"; touch foo #'"    % ls foo   ls: cannot access foo: No such file or directory   % echo "'\\"; touch foo #'"   '\   % ls foo   foo  Using the above code variant:    >>> print shell_quote('"\\\'; touch foo #"')   '"\\'; touch foo #"'    % rm foo   % ls foo   ls: cannot access foo: No such file or directory   % echo '"\\'; touch foo #"'   "\\   % ls foo   foo  So, the CVE assignments for these issues are:    Unrestricted use of unquoted strings in a shell,                 within version    Erroneous assumptions about the usability of "                 characters within version leading to attacks                 such as $( command substitution within a "-quoted                 string    Erroneous insertion of a \ character within version                 leading to attacks involving command lists                 (such as lists separated by a ; character)  Second, and have a series of differences in handling of command-line arguments. This seems to be most likely a reaction to Florian Weimer's observation of "you need to make sure that you prevent option injection through positional arguments." Does anyone believe that option injection was impossible in If not, we will make a fourth CVE assignment.  - --  CVE assignment team, MITRE CVE Numbering Authority M/S Burlington Road, Bedford, MA USA [ PGP key available through http://cve.mitre.org/cve/request_id.html ] -----BEGIN PGP SIGNATURE----- Version: GnuPG (SunOS)  =G9KN -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      