  oss-security - Re: CVE request: python-gnupg before shell  injection            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Tue, 4 Feb From: Henri Salo <henri@...v.fi> To: oss-security@...ts.openwall.com Subject: Re: CVE request: python-gnupg before shell  injection  On Tue, Feb 04, at Hanno Bรถck wrote: > python-gnupg lists in the changelog: > "Added improved shell quoting to guard against shell injection." >  > Sounds like a severe security issue, but further info is lacking.  Diff attached. New function shell_quote() seems to represent major changes to shell input quoting against unsafe input.  +# We use the test below because it works for Jython as well as CPython +if os.path.__name__ == 'ntpath': +    # On Windows, we don't need shell quoting, other than worrying about +    # paths with spaces in them. +    def shell_quote(s): +        return '"%s"' % s +else: +    # Section copied from sarge + +    # This regex determines which shell input needs quoting +    # because it may be unsafe +    UNSAFE = re.compile(r'[^\w%+,./:=@-]') + +    def shell_quote(s): +        """ +        Quote text so that it is safe for Posix command shells. + +        For example, "*.py" would be converted to "'*.py'". If the text is +        considered safe it is returned unquoted. + +        :param s: The value to quote +        :type s: str (or unicode on 2.x) +        :return: A safe version of the input, from the point of view of Posix +                 command shells +        :rtype: The passed-in type +        """ +        if not isinstance(s, string_types): +            raise TypeError('Expected string type, got %s' % type(s)) +        if not s: +            result = "''" +        elif len(s) >= 2 and (s[0], s[-1]) == ("'", "'"): +            result = '"%s"' % s.replace('"', r'\"') +        elif not UNSAFE.search(s): +            result = s +        else: +            result = "'%s'" % s.replace("'", "'\"'\"'") +        return result + +    # end of sarge code  --- Henri Salo  View attachment "python-gnupg.diff" of type "text/x-diff" bytes)  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      