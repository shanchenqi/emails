  oss-security - Re: CVE request: PLOGGER multiple vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 27 Feb From: Damien Cauquil <d.cauquil@...dream.com> To: cve-assign@...re.org CC: oss-security@...ts.openwall.com Subject: Re: CVE request: PLOGGER multiple vulnerabilities  > Can you explain the race condition? For example: without the true > image file, would the product extract the .php file but then delete it > very soon afterward?  The zip file must at least contains a non-empty image file with a name including a valid extension, and of course the exploit php file. Once the zip uploaded, the web application tells the user it has found one or many images, and asks for a validation. If this validation step is not performed, all the unzipped files remain and the php file can be called directly with a web browser.   Le cve-assign@...re.org a écrit : >> We found two vulnerabilities in PLOGGER version including: >  >  >> 1. Authenticated Arbitrary file upload vulnerability affecting PLOGGER >> version >  >> This vulnerability allows an authenticated user to upload an arbitrary >> PHP file on the remote web server in an accessible path, by sending a >> specifically crafted zip file. >  >> session.post('http://' + HOST + "/plog-admin/plog-upload.php", >  >> ## Add true image file to block the race condition (mandatory not >> null) >  > Use >  > Can you explain the race condition? For example: without the true > image file, would the product extract the .php file but then delete it > very soon afterward? >  >  >  >> 2. CAPTCHA bypass vulnerability >  >> A theme called "Lucid" provided in PLOGGER version implements a >> weak CAPTCHA prone to a replay attack. By abusing this vulnerability, >> an unauthenticated user may be able to post a huge number of comments. >  >> The script generating the CAPTCHA image inserts a code in the current >> user session, but this value is not unset while processing the form, >> thus allowing an attacker to submit multiple times the form with >> always the same captcha and associated code. >  >> The vulnerable code is located in plog-comment.php, line >  > Use >  >   --  Damien Cauquil Directeur Recherche & Développement CHFI | CEH | ECSA | CEI  Sysdream avenue Gabriel Péri Saint Ouen Tel: +33 (0) 1 78 76 58 21 www.sysdream.com   Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      