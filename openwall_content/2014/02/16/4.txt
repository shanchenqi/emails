  oss-security - Re: Vendor adoption of PIE oss-security            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 16 Feb From: Stuart Henderson <stu@...cehopper.org> To: oss-security@...ts.openwall.com Cc: "CERT(R) Coordination Center" <cert@...t.org> Subject: Re: Vendor adoption of PIE oss-security  On Solar Designer wrote: > Hi Will and all, >  > On Tue, Feb 11, at CERT(R) Coordination Center wrote: > > Thoughts?  What is stopping you from enabling PIE for everything, at > > least on the platform? >  > Laziness, other priorities.  We should do it. >  > There might be examples of runtime generated (JIT) code or > bytecode-alike caching across program invocations, where the generated > code would reference functions/callbacks in the main program and would > thus depend on the program staying where it was during code generation - > but I am unaware of specific examples of that.  Anyhow, this is going to > be very rare and it's not a reason not to build a distro's packages as > PIE by default (exceptions may then be made).  By the way, OpenBSD has switched compilers to generating PIE code by default on the majority of architectures, various arch's over the last couple of releases, but as of a couple of months ago we've also done this for (x86) too, so I can give some specific examples of where you can expect to run into problems.  On amd64 fallout has been mostly limited to compilers and a couple of other programs, e.g. emacs, qemu, clisp, erlang, ghc, sbcl, which we are building with PIE disabled.  Additionally for there have been problems with register pressure on programs with their own asm code (mostly games), in particular code doing cpuid checks often doesn't save/restore %ebx, but there have been some others. In one case there was code for x86 OSX which avoids scribbling on %ebx which we've been able to borrow, and I think there were one or two where we've switched from asm to a generic C implementation. Of course, shared libraries already have to take this into account so not too much trouble there.  Everything else, base system and ports, is built with PIE. On the whole, experiences have been pretty good. Obviously there is some performance impact but we haven't yet had any reports of this causing major problems (though we will probably know more about this after 5.5 is released when the average user will first see packages built with PIE by default).   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      