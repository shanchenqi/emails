  oss-security - CVE request and heads-up on insecure temp file handling in  (OpenJDK, Oracle Java)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Mon, 03 Feb From: "Vincent Danen" <vdanen@...hat.com> To: "OSS Security List" <oss-security@...ts.openwall.com> Cc: secalert_us@...cle.com Subject: CVE request and heads-up on insecure temp file handling in  (OpenJDK, Oracle Java)  I don't believe a CVE has been assigned or requested for this yet.  Spotted this on Debian's bug tracker and filed our own bug, the description of which follows which should serve to describe the issue.  I'm not sure if this affects IBM's JDK, but it seems to affect Oracle's (based on a quick test on my mac), so cc'ing Oracle here.  I'm not sure if MITRE will be handling the assignment or if Oracle will, but as this had already been reported publicly to the Debian BTS, I didn't think there was a point in _not_ sending this to oss-sec.  Thanks.    Jakub Wilk reported in a Debian bug report that the program included in OpenJDK did not properly handle the logfile properly.  If the the log file was unable to be opened, it would create /tmp/unpack.log instead as the fallback, but do so in an insecure manner, as shown in unpack.cpp (the below is from OpenJDK 6):  void unpacker::redirect_stdio() { ... #else     sprintf(tmpdir,"/tmp");     sprintf(log_file_name, "/tmp/unpack.log"); #endif     if ((errstrm = fopen(log_file_name, "a+")) != NULL) {       log_file = errstrm_name = saveStr(log_file_name);       return ;     }     char *tname = tempnam(tmpdir,"#upkg");     sprintf(log_file_name, "%s", tname);     if ((errstrm = fopen(log_file_name, "a+")) != NULL) {       log_file = errstrm_name = saveStr(log_file_name);       return ;     }  The same exists in OpenJDK 7 and 8.  This could allow a malicious local attacker to conduct local attacks, such as symlink attacks, where a file could be overwritten if the user running had write permissions.   References:  --  Vincent Danen / Red Hat Security Response Team Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      