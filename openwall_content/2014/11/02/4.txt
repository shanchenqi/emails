  oss-security - Re: Re: strings / libbfd crasher            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 03 Nov From: Alexander Cherepanov <cherepan@...me.ru> To: oss-security@...ts.openwall.com Subject: Re: Re: strings / libbfd crasher  On cve-assign@...re.org wrote:  Thanks for assigning CVEs for these issues but I have a couple of  questions regarding CVE-worthiness of various things. And some questions  for the community.  >> a crasher in the PE parser, I don't know if this is the same one, but >> I reported it upstream: >> >> >> As this is a write to uninitialized memory it seems to me a CVE is >> deserved. >> >> > > Use for the > issue.  AddressSanitizer said "stack-buffer-overflow" and then "WRITE of size  8". Ok.  >> >> >> Seems to be different from the previous crasher. >> >> >> >> objdump-pe-crasher2 gives a heap overflow > > Use for the objdump-pe-crasher2 issue.  Here, AddressSanitizer said "heap-buffer-overflow" and then "READ of  size 1".  Why this crasher is judged as CVE worthy? Is it oversight or are invalid  reads assumed to be exploitable by default?  Another possibility is to treat all crashes in all libraries as CVE  worthy. We don't know how these libraries are used ITW and any crash in  any of them could potentially lead to data loss in some application. But...  > [ The post > suggests that there isn't a known way to exploit objdump-elf-crasher > or objdump-pe-crasher for code execution. There are currently no CVE > IDs associated with objdump-elf-crasher or objdump-pe-crasher. ]  ...it seems libbfd is not treated as a library any crash in which is CVE  worthy.  >> >> > > Use for this ihex parser issue.  Again "READ of size 1".  BTW is there a method to quickly sort out crashes (or other bad  behavior) into potentially exploitable and presumably non-exploitable,  i.e. separate security issues from non-security ones? For instance, to  run it through valgrind and sort out errors as follows:  Presumably non-exploitable: - Invalid read of size ... - Use of uninitialised value of size ... - Conditional jump or move depends on uninitialised value(s) - Syscall param write(buf) points to uninitialised byte(s) - Stack overflow in thread ...  Potentially exploitable: - Invalid write of size ...    (straight buffer overrun?) - Argument 'size' of function malloc has a fishy (possibly negative)  value: ...    (integer overflow?) - Jump to the invalid address stated on the next line    (corrupted stack?)  Simple fuzzing of objdump with zzuf (not even afl) quickly gives out  tens and hundreds of different cases of mentioned errors (mostly from  the first group:-). Now what?  Bonus:   $ printf -2 '' > test.a $ objdump -x test.a Segmentation fault  At least and head are affected. ar, size, strip etc. are also  affected.  valgrind on head shows:  Invalid write of size 8    at memset    by bfd_zalloc    by _bfd_slurp_extended_name_table    by bfd_generic_archive_p    by bfd_check_format_matches    by display_any_bfd    by display_file    by main  Address is 0 bytes after a block of size alloc'd    at malloc    by objalloc_create (objalloc.c:95)    by _bfd_new_bfd (opncls.c:73)    by bfd_fopen    by display_file    by main  This is "Invalid write", hence potentially exploitable? Is further  analysis required before deciding if this is a security issue? Or, more  strictly, is further analysis required before deciding if this issue is  CVE worthy?  --  Alexander Cherepanov  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      