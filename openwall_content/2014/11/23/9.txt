  oss-security - Re: so, can we do something about lesspipe? (+ a cpio  bug to back up the argument)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 23 Nov From: Lionel Debroux <lionel_debroux@...oo.fr> To: oss-security@...ts.openwall.com Subject: Re: so, can we do something about lesspipe? (+ a cpio  bug to back up the argument)  I hope that no distro is configured to let lesspipe call programs which parse Berkeley DBs, because that's not robust either:  1) I've just experienced corruption of the database used by the "moc" ncurses-based console audio player, certainly after I used the power button on my computer without being able to sync first. Now, as long as that corrupt database is in ~/.moc/cache/tags.db, even with any corresponding DB log file, moc hangs on startup, pegging one core at for minutes (that is, until I run `killall -9 mocp`). Attaching to the process through GDB and peeking through backtraces every few seconds always shows something below __bam_search -> __db_lget -> __lock_vec.  However: * db5.3_verify prints several error messages and exits with a status code of 1, as it should; * db5.3_dump -d a is happy as well with that file, exiting with a status code of 0. The only thing wrong with that database seems to be a fully zero-ed page.  2) that gave me the idea to fuzz db5.3_verify on Debian sid amd64, using a trivial test database: $ rm -f test.db $ echo -e "test\ntest" | db5.3_load -T -t hash test.db $ zzuf -U 10 -C 10 db5.3_verify test.db signal 9 (memory exceeded?) signal 9 (memory exceeded?) signal 9 (memory exceeded?) signal 9 (memory exceeded?) signal 8 (SIGFPE) signal 9 (memory exceeded?) $ zzuf -C 10 db5.3_dump -d a test.db signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE) signal 8 (SIGFPE)   Lionel.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      