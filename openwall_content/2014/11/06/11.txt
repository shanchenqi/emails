  oss-security - Exploitable issues in Linux perf/ftrace subsystems            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Thu, 6 Nov From: Robert ĹwiÄcki <robert@...ecki.net> To: oss-security@...ts.openwall.com Subject: Exploitable issues in Linux perf/ftrace subsystems  1. Perf subsystem oob read in supervisor mode (local DoS) - =====================================================================  The syscall_nr variable is not verified against the upper limit (NR_syscalls) in the  perf_syscall_enter()/perf_syscall_exit() functions, making it possible for the subsequent test_bit() function to fail when trying to access non-present memory pages.   The impact of this bug depends on the value of kernel.panic_on_oops sysctl. When equal to 1, it becomes local DoS. For other values it can still aid an attacker with mapping the kernel address space layout under systems with kASLR enabled.  This issue has been fixed with in the kernel's mainline tree with:    Author: Rabin Vincent <rabin@....in>  Date:   Wed Oct 29    2. Ftrace subsystem supervisor mode code execution - =====================================================================  As a precondition this attack scenario requires system administrators to enable ftrace-level system tracing (e.g. with 'trace-cmd record -e syscalls:sys_enter_write' command) on the local system, at the time of attack taking place. Likewise, the problem stems from an incorrect upper boundary check of the syscall_nr variable inside ftrace_syscall_enter()/ftrace_syscall_exit() functions. However, unlike with here a user-controlled pointer inside the 'struct ftrace_event_file' structure can be called through the ftrace_trigger_soft_disabled() -> event_triggers_call() function call-chain (http://lxr.free-electrons.com/source/kernel/trace/trace_events_trigger.c#L77)  leading to supervisor mode code execution of user-controlled code (under systems w/o SMEP/SMAP-type protections enabled).  This issue has been fixed with the same patch:    Author: Rabin Vincent <rabin@....in>  Date:   Wed Oct 29   3. Misc ===================================================================== These issues were independetly discovered by Rabin Vincent and Robert Swiecki, and the exploitation scenarios were independently developed by Russell King and Robert Swiecki  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      