  oss-security - Re: Re: Fuzzing objdump (PR and readelf (PR            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Mon, 17 Nov From: Robert Święcki <robert@...ecki.net> To: oss-security@...ts.openwall.com Subject: Re: Re: Fuzzing objdump (PR and readelf (PR  >>> This looks rather impressive.  Have you considered automatically >>> detecting >>> duplicates by e.g. analyzing stacktraces? >> >> >> Feel free to take a look at honggfuzz - >> https://code.google.com/p/honggfuzz/ >> >> It provides a crude version of unification on the basis of offending >> program counter (as well as simple disassembly of the offending >> instruction). > > > Is it really interesting? For objdump many crashes are in quite generic > functions like bfd_getl16 and PC will not differentiate between them. Using > full stacktrace is probably too much but using only PC seems to be too > coarse.  It's actually a combination of signal/PC/fault_address/orig_file and "code value", which is very specific to Linux/arch, but under x86 it can quickly indicate you what kind of fault it was (execution of non-executable page, read, write etc.). It also disassembles the faulting instruction, so it's easy to quickly estimate severity.  >From personal experience - and for limited fuzzing (i.e. less than dozen or so of machines) where one needs to sort through the output manually anyway - very useful - e.g. (example output file from a non-related to libbdf fuzzing)   ...looks very promising (PC was set to a non-mapped page, if that address is controlled then it's an instant *win*:), as opposed to..   ...which is just a nul-ptr read.  As mentioned above - for fuzzing on one or one couple of PCs it's just fine. For cluster fuzzing, indeed a more specialized (in many aspects) fuzzer is needed.  >> It also disables address randomization to get repeatable >> crashes. Example output (from testing strings-multiarch): > > > BTW is there a publicly available corpus of binaries from various > architectures?  I don't think so - I'd start with rpm/deb search engines and extract ELFs for interesting architectures, then would use a search engine to find other remaining file formats. Also, objcopy converts between some of those formats (esp. when compiled with multiarch support).  --  Robert Święcki  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      