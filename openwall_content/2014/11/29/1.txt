  oss-security - Re: Re: libyaml / YAML-LibYAML DoS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 29 Nov From: DÄvis MosÄns <davispuh@...il.com> To: oss-security@...ts.openwall.com Subject: Re: Re: libyaml / YAML-LibYAML DoS  Ruby is also affected. See  YAML.load_file('test.yaml')   File: ./yaml/scanner.c, Line  Expression: parser->simple_key_allowed || !required  This application has requested the Runtime to terminate it in an unusual way. Please contact the application's support team for more information.    <cve-assign@...re.org>:  > -----BEGIN PGP SIGNED MESSAGE----- > Hash: SHA1 > > > a crash/denial of service with untrusted yaml input. > > > > https://bitbucket.org/xi/libyaml/issue/10/wrapped-strings-cause-assert-failure > > > > > > Use for this Reachable Assertion issue in the libyaml > scanner.c file. > > Our understanding is that YAML-XS is a Perl wrapper module for the > libyaml C library, and that there isn't separate Perl code in > question. The rest of this message is a discussion of Python that > does not affect the Jonathan Gray CVE request. > > > > Date: Fri, 28 Nov > > From: John Haxby <john.haxby@...cle.com> > > For what it's worth PyYAML and have exactly the same assertion: > > For PyYAML, however, it appears that the report is about the > scanner.py file, e.g., > >   def save_possible_simple_key(self): >   ... >       # A simple key is required only if it is the first token in the > current >       # line. Therefore it is always allowed. >       assert self.allow_simple_key or not required > > This Python code is apparently intended to correspond directly to the > yaml_parser_save_simple_key C code. However, because it's in a > different programming language, we would typically consider it a > separate codebase, eligible for its own CVE IDs. Here, "assert > self.allow_simple_key or not required" is not within the scope of > > > One question is whether identifying a security-relevant DoS caused by > an assert in C code means that there is also a security-relevant DoS > caused by an assert in corresponding Python code. In other words, > should the threat model be considered the same: the assert within > scanner.c might cause an outage of a C application that was intended > to remain available for processing YAML from other clients, and the > assert within scanner.py might cause an outage of a Python application > that was intended to remain available for processing YAML from other > clients? Or should the latter be considered much less plausible? If > the threat model is largely the same, we will assign a second CVE ID > for the scanner.py issue. > > A second question is whether a Reachable Assertion in Python should be > considered substantially different from a Reachable Assertion in C, > because Python is a scripting language that potentially makes it much > easier to ignore assert statements. (This question might not affect > the current CVE assignments.) > > In other words, for a product written in C, the author could argue (or > even document) that an assert line is supposed to be there, and the > end user is not supposed to be compiling the program with NDEBUG. > Similarly, the product can be shipped with specific build scripts that > do not use NDEBUG. However, for a Python script, is the end user > typically considered free to use -O if desired? The -O documentation > at https://docs.python.org/3/using/cmdline.html says "-O Turn on basic > optimizations" but the assert documentation at > https://docs.python.org/3/reference/simple_stmts.html says "(command > line option -O). The current code generator emits no code for an > assert statement when optimization is requested at compile time." It's > perhaps unclear whether ignoring assert statements is something that > would obviously be part of "basic optimizations." (This issue doesn't > apply to cases where there's a specific build process for .pyc files > or the end user is supposed to install shipped .pyc files.) > > To give two specific examples: > >   1. A C program's author uses assert to prevent reaching code that, >      in cases where the assert expression is false, has a remote code >      execution vulnerability. The author documents that aborting the >      program is the intended behavior, and the author provides a >      specific build/installation process without NDEBUG. > >   2. A Python script's author uses assert to prevent reaching code >      that, in cases where the assert expression is false, has a remote >      code execution vulnerability. Because Python is a scripting >      language, the end user doesn't separately need to build anything. >      The end user looks at the cmdline.html documentation, chooses to >      enable optimization with -O, and therefore the assert statement >      is ignored. > > Is it fair to conclude that example 2 has a vulnerability but example > 1 does not? > > - -- > CVE assignment team, MITRE CVE Numbering Authority > M/S > Burlington Road, Bedford, MA USA > [ PGP key available through http://cve.mitre.org/cve/request_id.html ] > -----BEGIN PGP SIGNATURE----- > Version: GnuPG (SunOS) > > > > > > > pxLCqHonpo0XnEMGMQRkSfkkyoFperqLpeBLR+ZNlSNYNzZlkhBuvTpGA5NyNIc= > =hUlY > -----END PGP SIGNATURE----- >   Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      