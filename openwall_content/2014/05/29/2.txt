  oss-security - Re: CVE request: Linux kernel DoS with syscall auditing            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 28 May From: Andy Lutomirski <luto@...capital.net> To: Steve Grubb <sgrubb@...hat.com> Cc: oss-security@...ts.openwall.com Subject: Re: CVE request: Linux kernel DoS with syscall auditing  On Wed, May 28, at PM, Steve Grubb <sgrubb@...hat.com> wrote: > On Wednesday, May 28, PM Andy Lutomirski wrote: >> Issuing a system call with a random large number will OOPS, depending >> on configuration.  A configuration that will enable this bug is: >> >> # auditctl -a exit,always -S open >> >> No privilege whatsoever is required to trigger the OOPS. > > Do you have more information about this? I don't get an oops and I run with > the audit system on all the time.  It's on lkml -- see:    You need to pass a fairly large bogus syscall number.  The auditsc code is completely missing any bounds checking on the syscall numbers.  > > >> It's possible that this can be extended to more than just a DoS -- >> with some care and willingness to exploit timing attacks, this is a >> read of arbitrary single bits in kernel memory. > > What platform? Where do the arbitrary bits go? What syscall are we talking > about?  The audit system decides whether to log a syscall depending on a bit in the audit_krule mask.  Since the mask read isn't bounds-checked, the caller can force it to read any bit, relative to the audit_krule. Anything that can tell the attacker the outcome of the filter decision will reveal the value of that bit.  > > There is a linux-audit mail list which seems to not have any emails about this > problem. That is really the best place to discuss any issues with this > subsystem and get it fixed.  There's already a patch on lkml.  I'll cc linux-audit for the v2 patches.  --Andy  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      