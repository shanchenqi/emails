  oss-security - Re: Fwd: Non-upstream patches for bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 27 Sep From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: Chet Ramey <chet.ramey@...e.edu> Subject: Re: Fwd: Non-upstream patches for bash  On Sat, Sep 27, at Solar Designer wrote: > I took a look at the code in 3.1, and it looked just as vulnerable.  So > I tried harder, and was able to trigger both issues that you're patching > with parser-oob-3.2.patch on 3.1. >  > For the redir_stack issue, I had to use many more <<EOF's, and I > actually closed those EOF's.  In fact, I used of them (both opening > and closing).  This gave me a segfault.  With parser-oob-3.2.patch applied to my (with other patches), this problem is gone, and EOF's (as well as commands that follow the one using opening and closing EOF's) work as expected.  > For the nested blocks (for loops in this case), I also used as many as > of them, and got this: >  > $ bash test-script.sh  > test-script.sh: line syntax error near unexpected token `newline' > test-script.sh: line `for in ; do :' >  > And this remains exactly line when I try or nested > loops.  With "only" nested loops, this symptom goes away - but I > guess those loops are not actually processed correctly, see below.  This weird behavior, including the magic number, remained even with parser-oob-3.2.patch applied (which, as it relates to this issue, contains only the off-by-one one-liner).  The same magic number works for both 32- and 64-bit builds, so it's not a memory layout thing. I am able to change it to (and change the error message as well) by editing the command from:  (for x in ; do echo "for x$x in ; do :"; done; for x in ; do echo done ; done) > test-script.sh  to:  (for x in ; do echo "for x$x in x; do :"; done; for x in ; do echo done ; done) > test-script.sh  Notice the added "x" before a semicolon.  Changing the size of this token, or the number of values listed in that for loop (e.g., to "x y z") does not affect the observed behavior (it's still line  Specifically:  $ (for x in ; do echo "for x$x in; do :"; done; for x in ; do echo done ; done) > test-script.sh; bash test-script.sh  test-script.sh: line syntax error near unexpected token `newline' test-script.sh: line `for in; do :' $ (for x in ; do echo "for x$x in x; do :"; done; for x in ; do echo done ; done) > test-script.sh; bash test-script.sh  test-script.sh: line syntax error near unexpected token `in' test-script.sh: line `for in x; do :' $ (for x in ; do echo "for x$x in more stuff here; do :"; done; for x in ; do echo done ; done) > test-script.sh; bash test-script.sh  test-script.sh: line syntax error near unexpected token `in' test-script.sh: line `for in more stuff here; do :'  I guess some other buffer fills up.  Anyway, with (a port of) the variables-affix-3.0.patch applied as well (which works fine for me), I consider the above a non-security issue.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      