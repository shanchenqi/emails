  oss-security - Re: Re: remote code execution through bash (3rd vulnerability)            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 27 Sep From: christos@...las.com (Christos Zoulas) To: chet.ramey@...e.edu, John Haxby <john.haxby@...cle.com>,  	oss-security@...ts.openwall.com Subject: Re: Re: remote code execution through bash (3rd vulnerability)  On Sep 27,  chet.ramey@...e.edu (Chet Ramey) wrote: -- Subject: Re: [oss-security] Re: remote code execution throu  | I think function exports are used more widely than you think, and I am not | willing to break backwards compatibility that much by disabling function | exports by default.  Let's think this through for a minute:  - subshells are just the results of fork() so they just work (functions   are still loaded in memory). - sourced scripts again are in the process image and just work.  So we are talking about functions that are inherited during exec, either directly (by executing another bash script from the shell, or running bash again.) or indirectly (some other command runs a bash shell or script) or remotely (if you are passing function definitions in your ssh environment).  Lets assume that we want to import for interactive shells, because we want the user to have his familiar working setup; we can easily do that because we know when the shell is interactive.  For non-interactive shell scripts, I'd say that the default behavior should be off. If you want it on, turn it on explicitly. It is a dangerous feature (being able to override commands in a way the script does not expect). This was recognized before, this is why it is off when you are setuid. Let's correct it.  You don't want to be affecting the shell in such an intrusive way before the user is given control and a choice. Let the people who want to use the feature to have to turn it on explicitly.  I think some stuff might break, but it will be easily fixable and worth the extra work because:  	- we would not be exposing the parser anymore 	- we would be starting up scripts in a more controlled environment  christos  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      