  oss-security - Re: remote code execution through bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 25 Sep From: Solar Designer <solar@...nwall.com> To: Chet Ramey <chet.ramey@...e.edu> Cc: oss-security@...ts.openwall.com Subject: Re: remote code execution through bash  On Wed, Sep 24, at Chet Ramey wrote: > There are several options for making shell functions inherited via the > environment more robust, none of them backwards compatible.  I will > choose one and implement it for a future bash version.  While we're at it, I think it's preferable not to output error messages triggerable by untrusted input, e.g.:  $ ssh -o 'rsaauthentication yes' 0 '() { ignored; }; /usr/bin/id'  bash: warning: SSH_ORIGINAL_COMMAND: ignoring function definition attempt bash: error importing function definition for `SSH_ORIGINAL_COMMAND'  (as seen with the current bash patches).  This might be unnecessarily revealing or/and it might confuse whatever other program was invoking something via bash, resulting in attacker-triggerable unintended behavior in that caller program.  Yes, there are numerous other error conditions anyway - such as running out of memory - which may result in messages printed to stderr.  Yet we might want to avoid printing error messages for environment variable value parsing errors (ideally, we'd avoid the parsing itself as well), unless a debugging or a verbose mode is enabled locally (in a way that can't realistically be triggered via an unsuspecting network service).  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      