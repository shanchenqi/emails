  oss-security - Re: remote code execution through bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 25 Sep From: Solar Designer <solar@...nwall.com> To: Chet Ramey <chet.ramey@...e.edu> Cc: oss-security@...ts.openwall.com Subject: Re: remote code execution through bash  On Wed, Sep 24, at Chet Ramey wrote: > There are several options for making shell functions inherited via the > environment more robust, none of them backwards compatible.  I will > choose one and implement it for a future bash version. >  > The leading candidates both raise the bar by requiring a potential > attacker to be able to create arbitrarily-named environment variables as > well as environment variables with specific values. >  > I considered (and implemented) a blacklist approach that would have > protected against a set of commonly-named variables (HTTP_*, CGI_*, > SSH_*, LC_*, and so on), but the consensus was that that was too easily > circumvented.  I removed it from the distributed patches.  What about no longer inheriting functions with names that don't contain any lowercase letters?  I guess typical function names use some lowercase letters (are all-lowercase, or also contain non-letters, or use CamelCaps), whereas typical names of environment variables set by network services do not contain any lowercase letters (usually consist of uppercase letters and underscore only).  This is not pretty, but it isn't as limited as a blacklist of specific prefixes would be, so maybe it'd work reasonably well for an interim period until you're able to break backwards compatibility to a greater degree?  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      