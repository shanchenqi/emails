  oss-security - Re: remote code execution through  bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 25 Sep From: Jason Cooper <osssecurity@...edaemon.net> To: Solar Designer <solar@...nwall.com> Cc: oss-security@...ts.openwall.com, chet.ramey@...e.edu Subject: Re: remote code execution through  bash  On Thu, Sep 25, at Solar Designer wrote: > On Thu, Sep 25, at Jason Cooper wrote: > > On Thu, Sep 25, at Solar Designer wrote: > > > On Wed, Sep 24, at Jason Cooper wrote: > > > > [jason@...alhost] $ ssh -i .ssh/test_key -o 'rsaauthentication yes' 0 '() { ignored; }; /usr/bin/id' > > > > > > > > [jason@...alhost] $ # add 'command=/path/to/secsh -f /path/to/test.rc' in .ssh/authorized_keys on server > > > > [jason@...alhost] $ ssh -i .ssh/test_key -o 'rsaauthentication yes' 0 '() { ignored; }; /usr/bin/id' > > > > secsh access denied. > > >  > > > This is puzzling.  I tried: > > >  > > > command="/bin/env - date" > > >  > > > and: > > >  > > > command="exec /bin/env - date" > > >  > > > and neither prevents exploitation of the issue as above (I get the > > > output of "id", not of "date"), which is not surprising given that the > > > command is run via the shell before it reaches "env". > > >  > > > Maybe your target user account's login shell is not bash?  That would > > > explain it, but it's also the easier case where the issue had been > > > exposed via a subshell only (does your test.rc explicitly use bash?) > >  > > Nope, login shell is /bin/bash.  Please look at the code in > >  > >   http://git.infradead.org/users/jcooper/secsh.git/blob/HEAD:/match.c >  > I expected your code to be irrelevant, because the shell gets invoked > first (to invoke your code).  I tested this with "env -".  Dammit.  You're right.  In do_child(), session.c, line          /*          * Execute the command using the user's shell.  This uses the -c          * option to execute the command.          */         argv[0] = (char *) shell0;         argv[1] = "-c";         argv[2] = (char *) command;         argv[3] = NULL;         execve(shell, argv, env);         perror(shell);         exit(1); }  > > While tinkering with this, I discovered that if you force ssh to provide > > a pty (ssh -t ...), even with secsh locked down, the hack works.  You > > *must* set 'no-pty' after 'command=' in your authorized_keys file to > > prevent ssh from launching a shell. :-/ >  > Oh, so you're saying that your sshd does not use the shell when you > specify no-pty?  This isn't the case here.  What version/package of > OpenSSH are you using?  >From debian wheezy:  Package: openssh-server Source: openssh Version:  > I do have a habit to specify no-pty whenever I use "command=", but I > also have a habit to start the actual command with "exec ..." > specifically because the shell is invoked anyway (the "exec" then saves > some memory on not keeping that shell around while the actual program > runs).  I've tried specifying /full/path/to/program, like you do, but > this does not prevent invocation going via the shell here.  My OpenSSH > is rather old, though (with lots of patches).   Hmmm, I wonder if they would consider a 'no-user-shell' option?  Could you try the attached patch and see if that fixes it for you?  thx,  Jason.   ------------------>8------------------------------- diff --git a/auth-options.c b/auth-options.c index --- a/auth-options.c +++ b/auth-options.c @@ @@ int no_agent_forwarding_flag = 0;  int no_x11_forwarding_flag = 0;  int no_pty_flag = 0;  int no_user_rc = 0; +int no_user_shell = 0;  int key_is_cert_authority = 0;    /* "command=" option. */ @@ @@ auth_clear_options(void)  	no_pty_flag = 0;  	no_x11_forwarding_flag = 0;  	no_user_rc = 0; +	no_user_shell = 0;  	key_is_cert_authority = 0;  	while (custom_environment) {  		struct envstring *ce = custom_environment; @@ @@ auth_parse_options(struct passwd *pw, char *opts, char *file, u_long linenum)  			opts += strlen(cp);  			goto next_option;  		} +		cp = "no-user-shell"; +		if (strncasecmp(opts, cp, strlen(cp)) == 0) { +			auth_debug_add("User shell execution disabled."); +			no_user_shell = 1; +			opts += strlen(cp); +			goto next_option; +		}  		cp = "command=\"";  		if (strncasecmp(opts, cp, strlen(cp)) == 0) {  			opts += strlen(cp); diff --git a/auth-options.h b/auth-options.h index --- a/auth-options.h +++ b/auth-options.h @@ @@ extern int no_agent_forwarding_flag;  extern int no_x11_forwarding_flag;  extern int no_pty_flag;  extern int no_user_rc; +extern int no_user_shell;  extern char *forced_command;  extern struct envstring *custom_environment;  extern int forced_tun_device; diff --git a/session.c b/session.c index --- a/session.c +++ b/session.c @@ @@ do_child(Session *s, const char *command)  		perror(shell);  		exit(1);  	} +	if (no_user_shell) { +		argv[0] = (char *) command; +		argv[1] = NULL; +		execve(command, argv, env); +		perror(command); +		exit(1); +	}  	/*  	 * Execute the command using the user's shell.  This uses the -c  	 * option to execute the command.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      