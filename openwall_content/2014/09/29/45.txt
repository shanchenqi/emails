  oss-security - Re: Healing the bash fork            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Mon, 29 Sep From: "Kobrin, Eric" <ekobrin@...mai.com> To: "dwheeler@...eeler.com" <dwheeler@...eeler.com> CC: oss-security <oss-security@...ts.openwall.com>, chet.ramey 	<chet.ramey@...e.edu>, solar <solar@...nwall.com>, lcamtuf 	<lcamtuf@...edump.cx>, fweimer <fweimer@...hat.com> Subject: Re: Healing the bash fork  On Sep 29, at PM, "David A. Wheeler" <dwheeler@...eeler.com> wrote:  > On Mon, 29 Sep Tavis Ormandy <taviso@...xchg8b.com> wrote: >> If an adversary can choose the variable name, it's game over by definition. >> He can choose LD_PRELOAD, SHELLOPTS='xtrace' PS4='$(foo)', ... >  > I agree. If an adversary can arbitrary control the environment, it is definitely game over. > What's more, this has been true for decades and this is *clearly* documented all over the place. > If some program allows an untrusted user to control the content in arbitrary environment variables, > that would be a security vulnerability in that other program, not in bash.  It was also a flaw in the other program when the adversary was able to set the values. That flaw is so prevalent that we now have these recent patches.  My point is that we can tell the other people that they are using bash wrong, or we can take steps to make it harder to use unsafely. Introducing namespaces with prefixing and suffixing is fine for a quick patch, but I'd argue that it is too fragile for long term use.  What is the motivation to not store executable code (functions) differently from standard variables?  -- Eric Kobrin Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      