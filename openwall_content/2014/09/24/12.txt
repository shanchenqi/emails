  oss-security - Re: remote code execution through bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 24 Sep From: Solar Designer <solar@...nwall.com> To: oss-security@...ts.openwall.com Cc: chet.ramey@...e.edu Subject: Re: remote code execution through bash  On Wed, Sep 24, at Florian Weimer wrote: > Stephane Chazelas discovered a vulnerability in bash, related to how > environment variables are processed: trailing code in function > definitions was executed, independent of the variable name. >  > In many common configurations, this vulnerability is exploitable over > the network. >  > Chet Ramey, the GNU bash upstream maintainer, will soon release > official upstream patches.  More detail is already out:   Florian posted a Debian security advisory on this ([DSA bash security update) to the debian-security-announce list, but somehow it is not yet seen at:  https://www.debian.org/security/  (I guess it will be very soon.)  I've just confirmed that the issue can be exploited via OpenSSH setting SSH_ORIGINAL_COMMAND:  $ ssh -o 'rsaauthentication yes' 0 '() { ignored; }; /usr/bin/id'  Received disconnect from Command terminated on signal 11.  This is with command="set" in .ssh/authorized_keys for the key being used.  (Without the "; /usr/bin/id" portion, the command prints the environment variables, including SSH_ORIGINAL_COMMAND being the function with just "ignored" in its body.)  As we can see, the command runs, and moreover in this case bash happened to segfault after having run "id".  I see no good workaround.  Starting the forced command with "unset SSH_ORIGINAL_COMMAND &&" does not help - we'd need to unset the variable before starting bash, not from bash.  TERM is another attack vector, but IIRC sshd does not set TERM when no-pty is used.  So, speaking of SSH forced commands, it appears to be only SSH_ORIGINAL_COMMAND that we have no good workaround for.  Indeed, there are many other setups where the problem is exploitable, not just SSH forced commands.  Alexander  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      