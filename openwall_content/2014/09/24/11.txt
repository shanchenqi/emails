  oss-security - Re: remote code execution through bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 24 Sep From: Florian Weimer <fw@...eb.enyo.de> To: oss-security@...ts.openwall.com Subject: Re: remote code execution through bash  * Florian Weimer:  > Chet Ramey, the GNU bash upstream maintainer, will soon release > official upstream patches.   Someone has posted large parts of the prenotification as a news article, so in the interest of full disclosure, here is what we wrote to the non-vendors (vendors also received patches):  Debian and other GNU/Linux vendors plan to disclose a critical, remotely exploitable security vulnerability in bash this week, related to the processing of environment variables.  Stephane Chazelas discovered it, and has been assigned to it.  The issue is currently under embargo (not public), and you receive this message as a courtesy notification because we assume that you have network-based filtering capabilities, so that you can work on ways to protect a significant number of customers.  However, you should not yet distribute IPS/IDS signatures, publicly or to customers.  At present, public disclosure is scheduled for Wednesday, UTC.  We do not expect the schedule to change, but we may be forced to revise it.   The technical details of the vulnerability follow.  Bash supports exporting not just shell variables, but also shell functions to other bash instances, via the process environment to (indirect) child processes.  Current bash versions use an environment variable named by the function name, and a function definition starting with “() {” in the variable value to propagate function definitions through the environment.  The vulnerability occurs because bash does not stop after processing the function definition; it continues to parse and execute shell commands following the function definition.  For example, an environment variable setting of    VAR=() { ignored; }; /bin/id  will execute /bin/id when the environment is imported into the bash process.  (The process is in a slightly undefined state at this point. The PATH variable may not have been set up yet, and bash could crash after executing /bin/id, but the damage has already happened at this point.)  The fact that an environment variable with an arbitrary name can be used as a carrier for a malicious function definition containing trailing commands makes this vulnerability particularly severe; it enables network-based exploitation.    So far, HTTP requests to CGI scripts have been identified as the major attack vector.  A typical HTTP request looks like this:  GET /path?query-param-name=query-param-value HTTP/1.1 Host: www.example.com Custom: custom-header-value  The CGI specification maps all parts to environment variables.  With Apache httpd, the magic string “() {” can appear in these places:  * Host (“www.example.com”, as REMOTE_HOST) * Header value (“custom-header-value”, as HTTP_CUSTOM in this example) * Server protocol (“HTTP/1.1”, as SERVER_PROTOCOL)  The user name embedded in an Authorization header could be a vector as well, but the corresponding REMOTE_USER variable is only set if the user name corresponds to a known account according to the authentication configuration, and a configuration which accepts the magic string appears somewhat unlikely.  In addition, with other CGI implementations, the request method (“GET”), path (“/path”) and query string (“query-param-name=query-param-value”) may be vectors, and it is conceivable for “query-param-value” as well, and perhaps even “query-param-name”.  The other vector is OpenSSH, either through AcceptEnv variables, TERM or SSH_ORIGINAL_COMMAND.  Other vectors involving different environment variable set by additional programs are expected.    Again, please do not disclose this issue to customers or the general public until the embargo has expired.  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      