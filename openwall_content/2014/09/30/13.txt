  oss-security - Re: Healing the bash fork            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Tue, 30 Sep From: Sven Kieske <s.kieske@...twald.de> To: <oss-security@...ts.openwall.com> Subject: Re: Healing the bash fork    On Mark R Bannister wrote: > In fact, it only guarantees isolation from the Apache web server attack > vector, but provides no guarantees from anything else we have not yet > discovered that accepts arbitrarily named environment vairiables > (I wonder what is all about, no technical details made public yet ...).  Well Mr. Wheeler wrote:  On David A. Wheeler wrote: > I agree. If an adversary can arbitrary control the environment, it > is definitely game over. > What's more, this has been true for decades and this is *clearly* > documented all over the place. > If some program allows an untrusted user to control the content in > arbitrary environment variables, > that would be a security vulnerability in that other program, not in > bash.  While I somehow agree with the above (this sure is a vuln in 3rd party programs) I also still think bash should fix this by making it harder to pass malicious content (e.g. switch an option like "yes-I-know-this is-totally-insecure" to "on" ), even if it breaks "backward-compatibility" and "workflows".  This reminds me of this:   bottom line: "Every change breaks someones workflow" - so this is no excuse at all.  After all we're in the 21st century and programs need to become more secure by orders of magnitude, compared to bad practices in the past.  This is a simple tradeoff: making people fix their programs by a backward incompatible change (in a new release) or allowing insecure stuff (just big projects with security in mind will change their program)  as always: not to upgrade/ not to change things is no option at all  --  Mit freundlichen Grüßen / Regards  Sven Kieske  Systemadministrator Mittwald CM Service GmbH & Co. KG Königsberger Straße 6 Espelkamp T: F: https://www.mittwald.de Geschäftsführer: Robert Meyer St.Nr.: USt-IdNr.: HRA AG Bad Oeynhausen Komplementärin: Robert Meyer Verwaltungs GmbH, HRB AG Bad Oeynhausen  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      