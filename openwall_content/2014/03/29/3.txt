  oss-security - Re: CVE request: MediaWiki login csrf            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sat, 29 Mar From: Jann Horn <jann@...jh.net> To: oss-security@...ts.openwall.com Subject: Re: CVE request: MediaWiki login csrf  On Sat, Mar 29, at Florent Daigniere wrote: > On Sat, at Jann Horn wrote: > > However, this means that Login CSRF becomes a big security issue because it > > would allow me to add evil JS to my account and then force the browser of > > someone else to execute it in the context of the MediaWiki server's domain. >  > I had a look at how mediawiki generates its CSRF token... a smiley is > worth a thousand words. :XD >  > -> includes/User.php:getEditToken >  > "Anon" users (whatever that is) share a token (EDIT_TOKEN_SUFFIX). > Others have their pseudo-random "secret" hashed and stored in their > session... and it's spit out using "return md5( $token . $salt ) . > EDIT_TOKEN_SUFFIX;" >  > Few lines below is the function called matchEditToken(), *lazily* > evaluating the above against what it receives on the wire. >  > I won't bore you with the details, but the above is very unlikely to be > okay. In no particular order: > -) according to the above, "Anon" users share the same CSRF tokens  Ah, that would probably allow an attacker to misuse his website's visitors for spamming wikipedia, right? Not with any kind of elevated access though, just coming from lots of different IPs and therefore hard to ban.   > -) the attacker can force a session (and its secret) onto a user: ever > heard of http://www.php.net/manual/en/session.idpassing.php ? (grep > tells me that neither session.use_only_cookies nor session.use_trans_sid > are set)  Hmm, that sounds plausible, but I was unable to do that. Well, I'm not very familiar with PHP, so I probably missed something.   > -) the way the tokens are generated and compared is not okay (lazy > comparison in PHP, no constant time comparison, hash-length-extension > attacks, ...)  Hm, yes, lazy comparison sounds bad, and non-constant-time also. But how would you do a hash length extension against this? Wouldn't that only work if the salt was in front of the token in the hash, not behind it?  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      