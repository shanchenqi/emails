  oss-security - Re: Fwd: Non-upstream patches for bash            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Sun, 19 Oct From: Chet Ramey <chet.ramey@...e.edu> To: cve-assign@...re.org, jwilk@...lk.net CC: chet.ramey@...e.edu, oss-security@...ts.openwall.com Subject: Re: Fwd: Non-upstream patches for bash  -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  On AM, cve-assign@...re.org wrote: >> the parser is not locale-agnostic. Here's an example how it can be >> exploited: >>  That's not actually an exploit, or even a bug.  > The discussion in is about changing code in Python 2.x to > work around this. However, is it useful to assign one new > ID for Bash, on the expectation that Bash was intended > to recognize valid characters in zh_CN.GBK, but instead is identifying > part of a two-byte character as a \ character, and this has security > implications for products that attempt to do otherwise-correct quoting > of untrusted strings for use in sh commands?  This is exactly the opposite of what is happening.  The test in the link (message shows that bash and ksh are properly reading valid multibyte characters in the input and not treating backslashes that are the second byte of a multibyte character as escape characters.  The other shells, presumably not multibyte-character-aware at all, incorrectly allow that backslash to escape the closing double quote.  Posix is very careful to specify that the shell reads characters, and uses characters when deciding how to tokenize the input, instead of bytes. If those characters are multibyte, the shell is expected to read multiple bytes.  Are you proposing that a multibyte character whose second byte happens to be a `|' should start a pipeline?  Chet - --  ``The lyf so short, the craft so long to lerne.'' - Chaucer 		 ``Ars longa, vita brevis'' - Hippocrates Chet Ramey, ITS, CWRU    chet@...e.edu    http://cnswww.cns.cwru.edu/~chet/ -----BEGIN PGP SIGNATURE----- Version: GnuPG (Darwin) Comment: GPGTools - http://gpgtools.org  iAsAn3EQrDeHo3ldByfbYgrGixYgZL+B =kgf1 -----END PGP SIGNATURE-----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      