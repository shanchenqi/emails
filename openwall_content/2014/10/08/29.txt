  oss-security - Re: Thoughts on Shellshock and beyond            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Wed, 8 Oct From: Tim <tim-security@...tinelchicken.org> To: oss-security@...ts.openwall.com Subject: Re: Thoughts on Shellshock and beyond   > While it is too late for our hardware etc. perhaps strong type systems such as > found in Haskell can help here? It is known to be very good at avoiding > undefined or unexpected runtime behavior. Too late also for current languages > to have this bolted on but if anyone wanted to write "secure" software I'd be > looking at languages which provide some more guarantees. Too late for bash > also, of course which I suppose points us back at the original problem.   I agree significant security benefit can be gained from these kinds of approaches.  The trick is, convincing people to use such a language.    Things like JavaScript and PHP are wildly popular because they are so easy to get started with.  Minimal learning curve counts for a lot. That, and rapid development of new functionality is king in business. How can strongly typed functional language compete?  tim     Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      