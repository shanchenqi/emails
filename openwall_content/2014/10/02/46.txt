  oss-security - Re: Healing the bash fork            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [day] [month] [year] [list]  Date: Thu, 02 Oct (EDT) From: "David A. Wheeler" <dwheeler@...eeler.com> To: "oss-security" <oss-security@...ts.openwall.com> CC: "oss-security" <oss-security@...ts.openwall.com> Subject: Re: Healing the bash fork  > On PM, Tomas Hoger wrote: > > The following indicates there is other prefix and suffix used, that > > makes these incompatibility issues worse: > >    > >    The names of all environment variables that introduce function > >    definitions are required to have a prefix "__BASH_FUNC<" and suffix > >    ">()" to prevent unintended function passing via HTTP headers.  On Wed, 01 Oct Florian Weimer <fweimer@...hat.com> replied: > I initially dismissed this as a presentation artifact in the web page,  > but it's true, there are additional <> characters in the mangled name.  > I wonder what breaks as a result.  At least () and %% are somewhat  > benign in their effect if they are used unquoted in the relevant places  > (error, not accidental file creation). >  > (To be absolute clear, I do not see any security issues with Apple's  > choice of mangling.)  I *do* worry a little about Apple's choice here.  The "%%" suffix chosen by the official bash release is not a sequence of shell metacharacters, so if the variable name is passed unquoted it is unlikely to cause problems. In contrast, "<" and ">" chosen by Apple *ARE* shell metacharacters.  If they get passed to a shell unquoted (say as a dump of the environment), there's a risk that the result might be turned into an exploit.  Yes, people should be quoting it anyway, but the need to quote environment variable *names* is not as obvious to some people as the need to quote variable *data*.  Apple's rationale seems dubious, too. The claimed purpose of the angle brackets is to "to prevent unintended function passing via HTTP headers", but this is odd. HTTP header field values absolutely can contain less than and greater than; RFC section simply says that they are not allowed in tokens, and thus can serve as delimiters Angle brackets have special meaning in HTML, of course, but that's different.  --- David A. Wheeler  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      