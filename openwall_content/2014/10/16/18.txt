  oss-security - Re: attacking hsts through ntp            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Oct From: Hanno Bรถck <hanno@...eck.de> To: oss-security@...ts.openwall.com, agl@...gle.com Subject: Re: attacking hsts through ntp  I'm CC-ing Adam Langley, don't know if he is on this list.  Am Thu, 16 Oct schrieb Michal Zalewski <lcamtuf@...edump.cx>:  > However, in section seven, where the author claims that preloaded > entries are added for days, that's only via the net-internals > debugging interface. (The code screenshot shown is also of code for > that debugging interface.) I believe that preloaded entries in Chrome > will always be enforced, no matter what the system time is.  Something can't be correct here. In the talk the attack was presented directly with chrome + google mail (which is one of the preloaded entries). Either he cheatet or the days limit applies to them, too (haven't done any tests myself).  But basically, it may be debatable if browsers should consider preloaded entries as "forever". Independent of that I think the quesiton how date/time can be made more secure is worth investigation. tlsdate etc. certainly seem like a good idea to me. The OS default should be a secure timesetting method.  If I understand it correct tlsdate uses the timestamp field of normal tls connections while ntp is a timesetting protocol on its own. I'm not into that stuff, can ntp be retrofittet with tls? Is that a good idea? Has it advantages/disadvantages compared to tlsdate?  Still open is obviously the question: Who do you trust with your time? If your timeserver is compromised you still have an attack vector.  --  Hanno Bรถck http://hboeck.de/  mail/jabber: hanno@...eck.de GPG:  Download attachment "signature.asc" of type "application/pgp-signature" bytes)  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      