  oss-security - Re: attacking hsts through ntp            Products  Openwall GNU/*/Linux   server OS Linux Kernel Runtime Guard John the Ripper   password cracker  Free & Open Source for any platform in the cloud Pro for Linux Pro for macOS  Wordlists   for password cracking passwdqc   policy enforcement  Free & Open Source for Unix Pro for Windows (Active Directory)  yescrypt   KDF & password hashing yespower   Proof-of-Work (PoW) crypt_blowfish   password hashing phpass   ditto in PHP tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker  Services Publications  Articles Presentations  Resources  Mailing lists Community wiki Source code repositories (GitHub) Source code repositories (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs  What's new         Follow @Openwall on Twitter for new release announcements and other news   [<prev] [next>] [<thread-prev] [thread-next>] [day] [month] [year] [list]  Date: Thu, 16 Oct From: Adam Langley <agl@...gle.com> To: Hanno Bรถck <hanno@...eck.de> Cc: oss-security@...ts.openwall.com Subject: Re: attacking hsts through ntp  On Thu, Oct 16, at PM, Hanno Bรถck <hanno@...eck.de> wrote: >> However, in section seven, where the author claims that preloaded >> entries are added for days, that's only via the net-internals >> debugging interface. (The code screenshot shown is also of code for >> that debugging interface.) I believe that preloaded entries in Chrome >> will always be enforced, no matter what the system time is. > > Something can't be correct here. In the talk the attack was presented > directly with chrome + google mail (which is one of the preloaded > entries). Either he cheatet or the days limit applies to them, too > (haven't done any tests myself).  Ah, so the author really is mistaken by the days bit in net-internals. However, we do have a timeout for HSTS preloads which git blame says that I added, although I don't remember it. The timeout is the same as our pinning timeout, which is 10 weeks from the build timestamp.  There are other tricks that can be played with the system time: roll the time back and use an "expired" certificate which has been pruned from the CRLs for one. I'm sure that there are others.  That's why we have tlsdate in ChromeOS. It does, indeed, use the timestamp from a TLS handshake. In the case of ChromeOS we depend on the timestamp from Google, which makes sense for a ChromeOS device that already trusts Google. If one was to design a secure timestamp system one could do much better signatures, batching of requests into a single signature etc). But we already have TLS running which means that there's no incremental operational overhead, which is very attractive.   Cheers  AGL  Powered by blists - more mailing lists  Please check out the  Open Source Software Security Wiki, which is counterpart to this mailing list.  Confused about mailing lists and their use? Read about mailing lists on Wikipedia and check out these guidelines on proper formatting of your messages.      